--[=[
 o-----------------------------------------------------------------------------o
 |
 | Symplectic integrators
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide a catalog of symplectic integrators from 1st to 8th order
    Integrators must have the following calling convention:
      integrate(elem, map, len, drift, kick)

 o-----------------------------------------------------------------------------o
]=]

-- Yoshida schemes ------------------------------------------------------------o

-- [Yoshida90] eq 5.18 and p267
local function make_yoshida (w)
  local d, k, n, s = {}, {}, #w+1, 0
  for i=1,n-1 do k[i] = w[n-i] ; s = s+w[i] end
  d[1], k[n] = k[1]/2, 1-2*s
  for i=2,n do d[i] = (k[i]+k[i-1])/2 end
  -- local tostring in MAD
  -- for i=1,#d do print(i, tostring(d[i]), tostring(k[i])) end
  return d, k
end

local yosh4_w = { -- 4th order (eq. 2.11)
  A = {  1.35120719195965777 },
}

local yosh6_w = { -- 6th order (table1)
  A = { -0.117767998417887E1 ,  0.235573213359357E0 , 0.784513610477560E0 },
--  B = { -0.213228522200144E1 ,  0.426068187079180E-2, 0.143984816797678E1 },
--  C = {  0.152886228424922E-2, -0.214403531630539E1 , 0.144778256239930E1 },
}

local yosh8_w = { -- 8th order (table2)
--  A = { -0.161582374150097E1 , -0.244699182370524E1, -0.716989419708120E-2,
--         0.244002732616735E1 ,  0.157739928123617E0,  0.182020630970714E1 ,
--         0.104242620869991E1 },
--  B = { -0.169248587770116E-2,  0.289195744315849E1,  0.378039588360192E-2,
--        -0.289688250328827E1 ,  0.289105148970595E1, -0.233864815101035E1 ,
--         0.148819229202922E1 },
--  C = {  0.311790812418427E0 , -0.155946803821447E1, -0.167896928259640E1 ,
--         0.166335809963315E1 , -0.106458714789183E1,  0.136934946416871E1 ,
--         0.629030650210433E0 },
  D = {  0.102799849391985E0 , -0.196061023297549E1,  0.193813913762276E1 ,
        -0.158240635368243E0 , -0.144485223686048E1,  0.253693336566229E0 ,
         0.914844246229740E0 },
--  E = {  0.227738840094906E-1,  0.252778927322839E1, -0.719180053552772E-1,
--         0.536018921307285E-2, -0.204809795887393E1,  0.107990467703699E0 ,
--         0.130300165760014E1 },
}

local yosh4_d, yosh4_k = make_yoshida(yosh4_w.A)
local yosh6_d, yosh6_k = make_yoshida(yosh6_w.A)
local yosh8_d, yosh8_k = make_yoshida(yosh8_w.D)

--[[ for debug and comparison of solutions
MAD.option.format = "% -.10f"
print('A4') make_yoshida(yosh4_w.A)
print('A6') make_yoshida(yosh6_w.A)
print('B6') make_yoshida(yosh6_w.B)
print('C6') make_yoshida(yosh6_w.C)
print('A8') make_yoshida(yosh8_w.A)
print('B8') make_yoshida(yosh8_w.B)
print('C8') make_yoshida(yosh8_w.C)
print('D8') make_yoshida(yosh8_w.D)
print('E8') make_yoshida(yosh8_w.E)
--]]

-- Runge-Kutta-Nystrom schemes ------------------------------------------------o

-- TODO...

-- integrators ----------------------------------------------------------------o

local function simple (elem, m, l, drift, kick) -- 1st order
  local nst = elem.nst or m.nst
  local l_n = assert(nst >= 1 and l/nst, "invalid nst (must be >=1)")
  local l_i = l_n/2

  for i=1,nst do -- nst kicks
    drift(elem, m, l_i)    l_i = l_n
     kick(elem, m, l_n)
  end
    drift(elem, m, l_n/2)
end

local function collim (elem, m, l, drift, kick) -- 1st order
  local nst = elem.nst or m.nst
  local l_n = assert(nst >= 1 and l/nst, "invalid nst (must be >=1)")
  local l_i = l_n/2

  for i=1,nst do -- nst drifts
     kick(elem, m, l_i)    l_i = l_n
    drift(elem, m, l_n)
  end
     kick(elem, m, l_n/2)
end

-- [Burkhardt13] table 1, p. 946
local function teapot (elem, m, l, drift, kick) -- 2nd order
  local nst = elem.nst or m.nst
  local l_n, l_d, l_D = assert(nst >= 1 and l/nst, "invalid nst (must be >=1)")
  if nst > 1 then l_d, l_D = l/(2*(nst+1)), l*nst/(nst^2-1) else l_d = l_n/2 end
  local l_i = l_d

  for i=1,nst do -- nst kicks
    drift(elem, m, l_i)    l_i = l_D
     kick(elem, m, l_n)
  end
    drift(elem, m, l_d)
end

-- [Yoshida90] eq. 2.11, p. 263
local function yoshida4 (elem, m, l, drift, kick) -- 4th order
  local nst = elem.nst or m.nst
  local l_n = assert(nst >= 1 and l/nst, "invalid nst (must be >=1)")
  local l_i, l_2n = l_n, 2*l_n

  for i=1,nst do -- nst*3 kicks (k=4)
    drift(elem, m, l_i * yosh4_d[1])    l_i = l_2n
     kick(elem, m, l_n * yosh4_k[1])
    drift(elem, m, l_n * yosh4_d[2])
     kick(elem, m, l_n * yosh4_k[2]) -- middle
    drift(elem, m, l_n * yosh4_d[2])
     kick(elem, m, l_n * yosh4_k[1])
  end
    drift(elem, m, l_n * yosh4_d[1])
end

-- [Yoshida90] table 1, p. 267
local function yoshida6 (elem, m, l, drift, kick) -- 6th order
  local nst = elem.nst or m.nst
  local l_n = assert(nst >= 1 and l/nst, "invalid nst (must be >=1)")
  local l_i, l_2n = l_n, 2*l_n

  for i=1,nst do -- nst*7 kicks (k=8)
    drift(elem, m, l_i * yosh6_d[1])    l_i = l_2n
     kick(elem, m, l_n * yosh6_k[1])
    drift(elem, m, l_n * yosh6_d[2])
     kick(elem, m, l_n * yosh6_k[2])
    drift(elem, m, l_n * yosh6_d[3])
     kick(elem, m, l_n * yosh6_k[3])
    drift(elem, m, l_n * yosh6_d[4])
     kick(elem, m, l_n * yosh6_k[4]) -- middle
    drift(elem, m, l_n * yosh6_d[4])
     kick(elem, m, l_n * yosh6_k[3])
    drift(elem, m, l_n * yosh6_d[3])
     kick(elem, m, l_n * yosh6_k[2])
    drift(elem, m, l_n * yosh6_d[2])
     kick(elem, m, l_n * yosh6_k[1])
  end
    drift(elem, m, l_n * yosh6_d[1])
end

-- [Yoshida90] table 2, p. 267
local function yoshida8 (elem, m, l, drift, kick) -- 8th order
  local nst = elem.nst or m.nst
  local l_n = assert(nst >= 1 and l/nst, "invalid nst (must be >=1)")
  local l_i, l_2n = l_n, 2*l_n

  for i=1,nst do -- nst*15 kicks (k=16)
    drift(elem, m, l_i * yosh8_d[1])    l_i = l_2n
     kick(elem, m, l_n * yosh8_k[1])
    drift(elem, m, l_n * yosh8_d[2])
     kick(elem, m, l_n * yosh8_k[2])
    drift(elem, m, l_n * yosh8_d[3])
     kick(elem, m, l_n * yosh8_k[3])
    drift(elem, m, l_n * yosh8_d[4])
     kick(elem, m, l_n * yosh8_k[4])
    drift(elem, m, l_n * yosh8_d[5])
     kick(elem, m, l_n * yosh8_k[5])
    drift(elem, m, l_n * yosh8_d[6])
     kick(elem, m, l_n * yosh8_k[6])
    drift(elem, m, l_n * yosh8_d[7])
     kick(elem, m, l_n * yosh8_k[7])
    drift(elem, m, l_n * yosh8_d[8])
     kick(elem, m, l_n * yosh8_k[8]) -- middle
    drift(elem, m, l_n * yosh8_d[8])
     kick(elem, m, l_n * yosh8_k[7])
    drift(elem, m, l_n * yosh8_d[7])
     kick(elem, m, l_n * yosh8_k[6])
    drift(elem, m, l_n * yosh8_d[6])
     kick(elem, m, l_n * yosh8_k[5])
    drift(elem, m, l_n * yosh8_d[5])
     kick(elem, m, l_n * yosh8_k[4])
    drift(elem, m, l_n * yosh8_d[4])
     kick(elem, m, l_n * yosh8_k[3])
    drift(elem, m, l_n * yosh8_d[3])
     kick(elem, m, l_n * yosh8_k[2])
    drift(elem, m, l_n * yosh8_d[2])
     kick(elem, m, l_n * yosh8_k[1])
  end
    drift(elem, m, l_n * yosh8_d[1])
end

-- end ------------------------------------------------------------------------o
return { -- catalog of integration schemes
  simple, teapot, yoshida4, yoshida4, yoshida6, yoshida6, yoshida8, yoshida8,
  yoshida4=yoshida4, yoshida6=yoshida6, yoshida8=yoshida8,
  simple=simple, teapot=teapot, collim=collim,
}
