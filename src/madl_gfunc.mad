--[=[
 o-----------------------------------------------------------------------------o
 |
 | Generic functional module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide a set of generic functions for functional programming.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local string, io, bit in _G
local type, getmetatable, setmetatable, assert, rawget, select in _G

local band, bor, bnot, lshift, rshift, rol in bit

local is_nil, is_number, is_function, is_table, is_callable,
      wprotect, set_concept, concept                               in MAD.typeid
local sign                                                         in MAD.gmath
local not_scannable, not_extendable, not_mutable                   in concept

-- implementation -------------------------------------------------------------o

local boolnum = {[false]=0, [true]=1}

local gfunc = {

  -- functions helpers
  narg    = \...     -> select('#',...), -- number of arguments
  ident   = \...     -> ...,             -- identity
  fnil    = \        -> nil,             -- functional nil
  ftrue   = \        -> true,            -- functional true
  ffalse  = \        -> false,           -- functional false
  fzero   = \        -> 0,               -- functional zero
  fone    = \        -> 1,               -- functional one
  first   = \a       -> a,               -- 1st argument only
  second  = \a,b     -> b,               -- 2nd argument only
  third   = \a,b,c   -> c,               -- 3rd argument only
  fourth  = \a,b,c,d -> d,               -- 4th argument only
  swap    = \a,b     -> (b,a),           -- swap #1 and #2 arguments, discard others
  swapv   = \a,b,... -> (b,a,...),       -- swap #1 and #2 arguments, keep others
  echo    = \...     => io.write(...) return ... end,

  -- bit-like operators (see http://bitop.luajit.org/api.html)
  tobit   = bit.tobit,
  tohex   = bit.tohex,
  bnot    = bit.bnot,
  band    = bit.band,
  bor     = bit.bor,
  bxor    = bit.bxor,
  bswap   = bit.bswap,
  lshift  = bit.lshift,
  rshift  = bit.rshift,
  arshift = bit.arshift,
  rol     = bit.rol,
  ror     = bit.ror,

  -- flag (1 bit) operators
  bset    = \x,n -> bor (x, rol( 1, n)),
  bclr    = \x,n -> band(x, rol(-2, n)),
  btst    = \x,n -> band(x, rol( 1, n)) ~= 0,

  -- flags (32 bit) operators
  fbit    = \n     -> lshift(1, n),
  fnot    = \x     -> bnot(x),
  fset    = \x,... -> bor (x, ...), -- fset(x, f1, f2, ...)
  fcut    = \x,... -> band(x, ...), -- fcut(x, f1, f2, ...)
  fclr    = \x,f   -> band(x, bnot(f)),
  ftst    = \x,f   -> band(x,   f) == f,
  fall    = \x,... -> band(x, ...) == bor(0, ...),
  fany    = \x,... -> band(x, ...) ~= 0,

  -- logical-like operators
  lfalse  = \    -> false,
  ltrue   = \    -> true,
  lbool   = \x   -> not not x,
  lnot    = \x   -> not x,
  land    = \x,y -> x and y,
  lor     = \x,y -> x or y,
  lnum    = \x   -> not x and 0 or 1,

  -- relational-like operators
  eq      = \x,y -> x == y,
  ne      = \x,y -> x ~= y,
  lt      = \x,y -> x <  y,
  le      = \x,y -> x <= y,
  gt      = \x,y -> x >  y,
  ge      = \x,y -> x >= y,

  -- comparison operator [-1,0,1]
  cmp     = \x,y -> boolnum[x > y] - boolnum[x < y],

  -- math-like operators
  unm     = \x   ->  -x,
  sqr     = \x   -> x * x,
  inv     = \x   -> 1 / x,
  add     = \x,y -> x + y,
  sub     = \x,y -> x - y,
  mul     = \x,y -> x * y,
  div     = \x,y -> x / y,
  mod     = \x,y -> x % y,
  pow     = \x,y -> x ^ y,

  -- vector-like operators
  emul    = \x,y,r_ -> x:__emul(y,r_), -- .*
  ediv    = \x,y,r_ -> x:__ediv(y,r_), -- ./
  emod    = \x,y,r_ -> x:__emod(y,r_), -- .%
  epow    = \x,y,r_ -> x:__epow(y,r_), -- .^
  
  -- object-like operators
  get     = \x,k   -> x[k],
  set     = \x,k,v => x[k]=v end,
  len     = \x     -> #x,
  cat     = \x,y   -> x..y,
  call    = \x,... -> x(...),

  -- operators as strings
  opstr   = {} 
}

-- strings as operators equivalence

local opstr in gfunc

opstr['~' ] = gfunc.unm
opstr['^2'] = gfunc.sqr
opstr['1/'] = gfunc.inv
opstr['+' ] = gfunc.add
opstr['-' ] = gfunc.sub
opstr['*' ] = gfunc.mul
opstr['/' ] = gfunc.div
opstr['%' ] = gfunc.mod
opstr['^' ] = gfunc.pow

opstr['.*'] = gfunc.emul
opstr['./'] = gfunc.ediv
opstr['.%'] = gfunc.emod
opstr['.^'] = gfunc.epow

opstr['T' ] = gfunc.ltrue
opstr['F' ] = gfunc.lfalse
opstr['!!'] = gfunc.lbool
opstr['!' ] = gfunc.lnot
opstr['&&'] = gfunc.land
opstr['||'] = gfunc.lor
opstr['!#'] = gfunc.lnum

opstr['=='] = gfunc.eq
opstr['~='] = gfunc.ne
opstr['!='] = gfunc.ne
opstr['<' ] = gfunc.lt
opstr['<='] = gfunc.le
opstr['>' ] = gfunc.gt
opstr['>='] = gfunc.ge
opstr['?='] = gfunc.cmp

opstr['->'] = gfunc.get
opstr['<-'] = gfunc.set
opstr['#' ] = gfunc.len
opstr['..'] = gfunc.cat
opstr['()'] = gfunc.call

-- functors

-- Note: Functors were originally implemented to avoid creating lambda functions
--       not compiled by LuaJIT (i.e. FNEW bytecode). Let's see if there is any
--       performances losses when using lambda functions and simplify the code.

local _id = {} -- itdentity

local function is_functor (a)
  local mt = getmetatable(a)
  return mt ~= nil and mt.__obj == _id
end

local fct_mt -- forward declaration

local function functor (f)
  assert(is_callable(f), "invalid argument #1 (callable expected)")
  if is_functor(f) then f = f.__fun end
  return setmetatable({__fun=f}, fct_mt)
end

gfunc.functor = functor

function gfunc.compose (f, g)
  assert(is_callable(f), "invalid argument #1 (callable expected)")
  assert(is_callable(g), "invalid argument #2 (callable expected)")
  if is_functor(f) then f = f.__fun end
  if is_functor(g) then g = g.__fun end
  return setmetatable({__fun=\... -> f(g(...))}, fct_mt)
end

function gfunc.chain (f, g)
  assert(is_callable(f), "invalid argument #1 (callable expected)")
  assert(is_callable(g), "invalid argument #2 (callable expected)")
  if is_functor(f) then f = f.__fun end
  if is_functor(g) then g = g.__fun end
  return setmetatable({__fun=\... => f(...) ; return g(...) end}, fct_mt)
end

function gfunc.achain (f, g)
  assert(is_callable(f), "invalid argument #1 (callable expected)")
  assert(is_callable(g), "invalid argument #2 (callable expected)")
  if is_functor(f) then f = f.__fun end
  if is_functor(g) then g = g.__fun end
  return setmetatable({__fun=\... -> f(...) and g(...)}, fct_mt)
end

function gfunc.ochain (f, g)
  assert(is_callable(f), "invalid argument #1 (callable expected)")
  assert(is_callable(g), "invalid argument #2 (callable expected)")
  if is_functor(f) then f = f.__fun end
  if is_functor(g) then g = g.__fun end
  return setmetatable({__fun=\... -> f(...) or g(...)}, fct_mt)
end

function gfunc.bind1st (f, a)
  assert(is_callable(f), "invalid argument #1 (callable expected)")
  if is_functor(f) then f = f.__fun end
  return setmetatable({__fun=\... -> f(a,...)}, fct_mt)
end

function gfunc.bind2nd (f, b)
  assert(is_callable(f), "invalid argument #1 (callable expected)")
  if is_functor(f) then f = f.__fun end
  return setmetatable({__fun=\a,... -> f(a,b,...)}, fct_mt)
end

function gfunc.bind3rd (f, c)
  assert(is_callable(f), "invalid argument #1 (callable expected)")
  if is_functor(f) then f = f.__fun end
  return setmetatable({__fun=\a,b,... -> f(a,b,c,...)}, fct_mt)
end

function gfunc.bind2st (f, a, b)
  assert(is_callable(f), "invalid argument #1 (callable expected)")
  if is_functor(f) then f = f.__fun end
  return setmetatable({__fun=\... -> f(a,b,...)}, fct_mt)
end

function gfunc.bind3st (f, a, b, c)
  assert(is_callable(f), "invalid argument #1 (callable expected)")
  if is_functor(f) then f = f.__fun end
  return setmetatable({__fun=\... -> f(a,b,c,...)}, fct_mt)
end

local str = \s -> string.format("functor: %p", s)

fct_mt = set_concept({ -- functor
  __obj       = _id,
  __pow       = gfunc.compose,
  __concat    = gfunc.chain,
  __call      = \s,... -> s.__fun(...),
  __index     = \s,k   -> s.__fun(k  ),
  __tostring  = str,
}, not_scannable + not_extendable + not_mutable)

-- bottom definition uses metatables (must be after)
gfunc.bottom = gfunc.functor(gfunc.ident)
gfunc.opstr["_|_"] = gfunc.bottom -- alias

-- env ------------------------------------------------------------------------o

MAD.typeid.is_functor = is_functor

gfunc = wprotect(setmetatable(gfunc, {__tostring := "MAD.gfunc"}))

-- end ------------------------------------------------------------------------o
return { gfunc = gfunc }
