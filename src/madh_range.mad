--[=[
 o-----------------------------------------------------------------------------o
 |
 | Range module (help)
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o
]=]

local __help = {}

-- help -----------------------------------------------------------------------o

__help.self = [=[
NAME
  range, logrange -- range and logarithmic range

SYNOPSIS
  r1 = start..stop[..step]  -- raw range
  r2 = range    (start [, stop [, step]])
  r3 = nrange   (start [, stop [, size]])

  r4 = log(start..stop[..step])  -- raw logrange
  r5 = logrange (start [, stop [, step]])
  r6 = nlogrange(start [, stop [, size]])

DESCRIPTION
  Ranges are defined by their start, stop (included) and step arguments. The
  defaults for stop, step and size are respectively start, 1 and 100. A range
  can define various entities using specific values for step:
  - an empty sequence                      (e.g. sign(step) ~= sign(stop-start))
  - a  singleton, a single point  sequence (e.g. step > stop-start for step > 0)
  - an interval , a two    points sequence             (e.g. step == stop-start)
  - a  finite sequence of points           (e.g. step < stop-start for step > 0)
  - an infinite constant sequence   (e.g. step == 0 or 1 for range and logrange)

  Ranges can be used as stateless iterators in generic for loops (i.e. ipairs),
  and provide better numerical stability for non-exact floating point numbers.
  The index (i.e. []), iterators (i.e. ipairs) and get methods return nil
  outside the boundaries (segment interpolation), while the value method does
  not check for boundaries (line interpolation).

RETURN VALUES
  The constructors for range and logrange (argument #3 is step), the
  constructors for nrange and nlogrange (argument #3 is size), their respective
  stateless iterators for generic for loops, and the functions is_range and
  is_logrange to identify the ranges object.

ERRORS
  Constructors trig an error if any of the argument #1, #2 and #3 (if provided)
  are not finite numbers for range and nrange or not strictly positive finite
  numbers for logrange and nlogrange or if size is not a positive number.

REMARK

  The raw range (resp. raw logrange) are built by concatenating numbers that
  create range objects storing the user values unmodified (resp. log of the user
  values unmodified), while other constructors adjust the step field to fulfil
  the following properties given r = range(start, stop, step) and nr =
  nrange(start, stop, size):
    0 <= stop - r :value(r :size()-1) < eps
    0 <= stop - nr:value(nr:size()-1) < eps
    nr:size() == size

EXAMPLES
  do
    local range in MAD
    r01 = range(1)
    r02 = range(1,10)
    r03 = range(1,10,2)
    r04 = range(0,1.5,0.1)
    r05 = range(0,-1.5,-0.1)
    r12 = 1..10
    r13 = 1..10..2
    r14 = 0..1.5..0.1
    r15 = 0..-1.5..-.1
    r19 = 0..1.5.. .1
    print(r05.start, r15.stop, r15.step)  -- print 0 -1.5 0.1
  end

SEE ALSO
  None.
]=]
__help['..']     = __help.self
__help.range     = __help.self
__help.nrange    = __help.self
__help.logrange  = __help.self
__help.nlogrange = __help.self
__help.log       = __help.self

__help.value = [=[
NAME
  value, get, [] (index)  -- range interpolation

SYNOPSIS
  rng:value(x)
  rng:get(x)
  rng[x]

DESCRIPTION
  Methods used for interpolating ranges. Value and get methods are iterated from
  0, and indexing starts from 1. Index and get are used for segment
  interpolation, they return nil outside the boundaries, while value is used for
  line interpolation and never fails.

RETURN VALUES
  These methods return the interpolated value for given a data point in the
  range.

EXAMPLES
  do
    local range in MAD
    local rng = range(1,10,1)
    print( rng:value( 0 ) )                    -- 1
    print( rng:value( 9 ) )                    -- 10
    print( rng:value( 10) )                    -- 11
    print( rng:value(-1 ) )                    -- 0
    print( rng:value(-10) )                    -- -9

    print( rng:get( 0 ) )                      -- 1
    print( rng:get( 9 ) )                      -- 10
    print( rng:get( 10) )                      -- nil
    print( rng:get(-1 ) )                      -- nil

    print( rng[0]  )                           -- nil
    print( rng[1]  )                           -- 1
    print( rng[10] )                           -- 10
    print( rng[11] )                           -- nil
  end

SEE ALSO
  None.
]=]
__help.get   = __help.value
__help.index = __help.value
__help['[]'] = __help.value

__help.is_range = [=[
NAME
  is_range, is_logrange, is_empty     -- range identification

SYNOPSIS
  is_range(rng)
  is_logrange(rng)
  rng:is_empty()

DESCRIPTION
  Functions used to identify ranges type and kind.

RETURN VALUES
  is_range and is_logrange return true if their argument is a range of
  respective types. is_empty returns true for empty ranges (i.e. empty segment).

EXAMPLES
  do
    local is_range, is_logrange, logrange, range in MAD
    print( is_range 'yes' )                     -- false
    print( is_range(0..1) )                     -- true
    print( is_logrange(logrange(1,10)) )        -- true

    print( range( 1 , 10,-1):is_empty )         -- true
    print( range( 10, 1 , 1):is_empty )         -- true
    print( range( 1 , 10, 1):is_empty )         -- false
  end

SEE ALSO
  None.
]=]
__help.is_logrange = __help.is_range
__help.is_empty    = __help.is_range

__help.irange = [=[
NAME
  irange , ilogrange              -- ranges stateless iterators
  inrange, inlogrange             -- ranges stateless iterators

SYNOPSIS
  irange    (start [, stop [, step]])
  ilogrange (start [, stop [, step]])
  inrange   (start [, stop [, size]])
  inlogrange(start [, stop [, size]])

DESCRIPTION
  irange and ilogrange are equivalent to compose ipairs with range and logrange
  respectively. inrange and inlogrange are equivalent to compose ipairs with
  nrange and nlogrange respectively.

RETURN VALUES
  irange, ilogrange, inrange and inlogrange return stateless iterators for
  direct use in for loops.

EXAMPLES
  do
    for i,v in irange ( 1, 10, 2 )       do print(i,v) end
    for i,v in inrange( 1, 10, 10)       do print(i,v) end
    for i,v in ilogrange ( 1, 1e6, 10 )  do print(i,v) end
    for i,v in inlogrange( 1, 1e6, 1e6)  do print(i,v) end
  end

SEE ALSO
  ipairs
]=]
__help.ilogrange  = __help.irange
__help.inrange    = __help.irange
__help.inlogrange = __help.irange

__help.ranges = [=[
NAME
  ranges, bounds, overlap

SYNOPSIS
  rng:ranges()
  lrng:ranges()
  rng:bounds()
  lrng:bounds()
  rng1:overlap(rng2)
  lrng1:overlap(lrng2)

DESCRIPTION
  TODO

RETURN VALUES
  Ranges returns the values of start, stop and step of a given range. bounds
  returns the start and stop values that restrain the range, their order is
  dependand on the lead of range. Overlap returns true if two ranges have at
  least one common point.

EXAMPLES
  do
    local range, nrange, logrange in MAD
    print( (1..10)             :ranges() )          -- 1,10,1
    print( logrange(1,10^6,10) :ranges() )          -- 1,10^6,10
    print( range( 1, 10, 1)    :bounds() )          -- 1,10
    print( range(10, 1 ,-1)    :bounds() )          -- 1,10
    print( logrange(10^5,10,10):bounds() )          -- 10^5, 10
    print( (1..9)     :overlap(9..1..-1) )          -- true
    print( (-9..-1)   :overlap(0..9)     )          -- false
  end

SEE ALSO
  None.
]=]
__help.bounds  = __help.range
__help.overlap = __help.range

__help.equal = [=[
NAME
  ==, size, reverse, - (unary)

SYNOPSIS
  rng1 == rng2
  rng:size()
  lrng:size()
  rng:reverse()
  lrng:reverse()

DESCRIPTION
  TODO

RETURN VALUES
  size returns the number of points contained in a given range. reverse returns
  range with reversed from original start-stop lead and step with opposite sign.
  Function equal returns true only ifcompared ranges have same start, stop and
  step values.

EXAMPLES
  do
    local logrange, range, nrange in MAD
    print(  range(1,20)         ==  1..20..1 )        -- true
    print( nrange(1,20,20)      ==  1..20    )        -- true

    print( range(1, 10)         :size() )             -- 10
    print( range(1,-10)         :size() )             -- 0

    print( (1..10..0.1)         :reverse() )          -- (10..1..-0.1)
    print( range(2,20,2)        :reverse() )          -- range(20,2,-2)
    print( logrange(1,10^6,10)  :reverse() )          -- logrange(10^6,1,0.1)
    print( logrange(10^7,10,0.1):reverse() )          -- logrange(10,10^7,10)
  end

SEE ALSO
  None.
]=]
__help['==']   = __help.equal
__help['-']    = __help.equal
__help['#']    = __help.equal
__help.size    = __help.equal
__help.reverse = __help.equal

-- no help
__help.__new    = ''
__help.__unm    = ''
__help.__len    = ''
__help.__eq     = ''
__help.__index  = ''
__help.__ipairs = ''

-- end ------------------------------------------------------------------------o
return __help
