--[=[
 o-----------------------------------------------------------------------------o
 |
 | Range module (help)
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o
]=]

local __help = {}

-- help -----------------------------------------------------------------------o

__help.range = [=[
NAME
  range, logrange -- range and logarithmic range

SYNOPSIS
  r1 = start..stop[..step]  -- raw range
  r2 = range ([start,] stop [, step])
  r3 = nrange([start,] stop [, size])

  r4 = log(start..stop[..step])  -- raw logrange
  r5 = logrange ([start,] stop [, step])
  r6 = nlogrange([start,] stop [, size])

DESCRIPTION
  Ranges are defined by their start, stop (included) and step arguments. The
  default values for start, step and size are respectively 1, 1 and 100.
  A range can represent various entities using specific values for step:
  - an empty sequence                      (e.g. sign(step) ~= sign(stop-start))
  - a  singleton, a sequence of one point           (e.g. step > stop-start > 0)
  - an interval, a sequence of two points              (e.g. step == stop-start)
  - a finite sequence of points                     (e.g. 0 < step < stop-start)
  - an infinite constant sequence             (e.g. step == 0 and start == stop)

  Ranges can be used as stateless iterators in generic for loops (i.e. ipairs),
  and provide better numerical stability for non-exact floating point numbers.
  The index (i.e. []), iterators (i.e. ipairs), get() and last() methods return
  nil outside the boundaries (segment interpolation), while the value method
  does not check for boundaries (line interpolation) and returns either the
  interpolated value or NaN for empty set.

RETURN VALUES
  The constructed ranges (see REMARK for details).

ERRORS
  The constructors trig an error if any of the argument #1, #2 and #3 (if
  provided) are not finite numbers for range and nrange or not positive finite
  numbers for logrange and nlogrange or if size is not a positive number. An
  error will be also triggered when step is 0 and start ~= stop for range or 1
  for logrange.

REMARK
  A raw range is built by 'concatenating' numbers that stores user's values
  unmodified. A raw logrange is built by taking the (generic) log of a raw
  range. Other constructors may adjust the value of step to fulfil the following
  properties for non empty ranges:
    r = range(start, stop, step)
    step is ajusted if r:size() is within 1e-12 of an integer (before rounding)
    stop-step <= r:last() <= stop for step >= 0
    stop-step >= r:last() >= stop for step <= 0
    step/r.step-1 < 2*eps

EXAMPLES
  do
    local range in MAD
    r01 = range(10)
    r02 = range(1,10)
    r03 = range(1,10,1)
    r04 = range(0,1.5,0.1)
    r05 = range(0,-1.5,-0.1)
    r12 = 1..10
    r13 = 1..10..1
    r14 = 0..1.5.. .1
    r15 = 0..-1.5..-.1
    print(r15.start, r15.stop, r15.step)  -- print 0 -1.5 -0.1
  end

SEE ALSO
  None.
]=]
__help['..']        = __help.range
__help.nrange       = __help.range
__help.logrange     = __help.range
__help.nlogrange    = __help.range
__help['range.log'] = __help.range

__help['range.value'] = [=[
NAME
  value, get, last, [] (index)  -- range interpolation

SYNOPSIS
  rng:value(x)
  rng:get(x)
  rng:last()
  rng[x]

DESCRIPTION
  The value, get and indexing methods are used for interpolating ranges. The
  value and get methods start from 0, while the indexing operator starts from 1.
  The indexing, get and last methods are used for segment interpolation and
  return nil outside the boundaries, while the value method is used for line
  interpolation and never fails. For empty sets they all return nil except
  the value method that returns NaN.

RETURN VALUES
  These methods return the interpolated range value at a given point, nil or NaN
  otherwise.

EXAMPLES
  do
    local rng = MAD.range(1,10,1)
    print( rng:value( 0 ) )                    -- 1
    print( rng:value( 9 ) )                    -- 10
    print( rng:value( 10) )                    -- 11
    print( rng:value(-1 ) )                    -- 0
    print( rng:value(-10) )                    -- -9

    print( rng:get( 0 ) )                      -- 1
    print( rng:get( 9 ) )                      -- 10
    print( rng:get( 10) )                      -- nil
    print( rng:get(-1 ) )                      -- nil

    print( rng[0]  )                           -- nil
    print( rng[1]  )                           -- 1
    print( rng[10] )                           -- 10
    print( rng[11] )                           -- nil
  end

SEE ALSO
  None.
]=]
__help['range.get'  ] = __help['range.value']
__help['range.last '] = __help['range.value']
__help['range.index'] = __help['range.value']
__help['range.[]'   ] = __help['range.value']

__help['logrange.value'] = __help['range.value']
__help['logrange.get'  ] = __help['range.value']
__help['logrange.last' ] = __help['range.value']
__help['logrange.index'] = __help['range.value']
__help['logrange.[]'   ] = __help['range.value']

__help['typeid.is_range'] = [=[
NAME
  is_range, is_logrange     -- range identification

SYNOPSIS
  is_range(rng)
  is_logrange(rng)

DESCRIPTION
  The is_range and is_logrange functions are useful to identify the types of the
  ranges.

RETURN VALUES
  The is_range and is_logrange functions return true if their argument are
  respectivaly a range and a logrange.

EXAMPLES
  do
    local is_range, is_logrange, logrange, range in MAD
    print( is_range 'yes' )                     -- false
    print( is_range(0..1) )                     -- true
    print( is_logrange(logrange(1,10)) )        -- true
  end

SEE ALSO
  None.
]=]
__help['typeid.is_logrange'] = __help['typeid.is_range']

__help['range.iterator'] = [=[
NAME
  ipairs, ranges, bounds, overlap, is_empty

SYNOPSIS
  ipairs(rng)
  rng:ranges()
  rng:bounds()
  rng:overlap(rng2)
  rng:is_empty()

DESCRIPTION
  The ipairs function returns a stateless range iterator equivalent to for
  direct use with generic 'for', the ranges method is useful to retrieve the
  components that define a range. They are different from its fields in case of
  logranges. The bounds method computes the boundaries of the range interpolated
  as a segment using the last method, and return these boundaries in ascending
  order followed by the step with proper sign. The overlap method checks if two
  ranges of the same type overlap using the bounds method. The is_empty method
  checks if a the range is empty.

RETURN VALUES
  The ipairs function returns an iterator, the ranges method returns the start,
  stop and step of the range. The bounds method returns the start, last and step
  of the range, where start is always lesser of equal to last for non empty set,
  nil otherwise. The overlap method returns true if two ranges have at least one
  common point. The is_empty method returns true if the range is empty (i.e. no
  point).

ERRORS
  The overlap method trigs an error if the two ranges are not of the same types.

EXAMPLES
  do
    local range, nrange, logrange, nlogrange in MAD
    for i,v in ipairs(range    (1,10 ,2 )) do print(i,v) end
    for i,v in ipairs(nrange   (1,10 ,10)) do print(i,v) end
    for i,v in ipairs(logrange (1,1e6,10)) do print(i,v) end
    for i,v in ipairs(nlogrange(1,1e6,7 )) do print(i,v) end
    print( (1..10)             :ranges() )   -- 1,10,1
    print( logrange(1,10^6,10) :ranges() )   -- 1,10^6,10
    print( range( 1, 10, 1)    :bounds() )   -- 1,10
    print( range(10, 1 ,-1)    :bounds() )   -- 1,10
    print( logrange(10^5,10,10):bounds() )   -- 10^5, 10
    print( range( 1 , 10,-1):is_empty()  )   -- true
    print( range( 10, 1 , 1):is_empty()  )   -- true
    print( range( 1 , 10, 1):is_empty()  )   -- false
    print( (1..9)  :overlap(9..1..-1)    )   -- true
    print( (-9..-1):overlap(0..9)        )   -- false
  end

SEE ALSO
  None.
]=]
__help['range.ranges' ] = __help['range.iterator']
__help['range.bounds' ] = __help['range.iterator']
__help['range.overlap'] = __help['range.iterator']

__help['logrange.iter'   ] = __help['range.iterator']
__help['logrange.ranges' ] = __help['range.iterator']
__help['logrange.bounds' ] = __help['range.iterator']
__help['logrange.overlap'] = __help['range.iterator']

__help['range.equal'] = [=[
NAME
  ==, size, reverse, - (unary)

SYNOPSIS
  rng1 == rng2
  rng:size()   , #rng
  rng:reverse(), -rng
  rng:same()

DESCRIPTION
  TODO

RETURN VALUES
  The equal operator checks if two ranges are of same types with equal
  components, taking into account the possible adjustement of their respective
  steps. The size method (operator #) returns the number of points in the range
  when interpolated as a segment. The reverse methods (operator unary -) returns
  a new range reversed from original. The same method returns the range itself
  due to its readonly semantic.

EXAMPLES
  do
    local logrange, range, nrange in MAD
    print(  range(1,20)         ==  1..20..1 )        -- true
    print( nrange(1,20,20)      ==  1..20    )        -- true

    print( range(1, 10)         :size() )             -- 10
    print( range(1,-10)         :size() )             -- 0

    print( (1..10..0.1)         :reverse() )          -- 10..1..-0.1
    print( range(2,20,2)        :reverse() )          -- 20..2..-2
    print( logrange(1,10^6,10)  :reverse() )          -- 1e6..1..0.1
    print( logrange(10^7,10,0.1):reverse() )          -- 10..1e7..10
  end

SEE ALSO
  None.
]=]
__help['range.=='     ] = __help['range.equal']
__help['range.-'      ] = __help['range.equal']
__help['range.#'      ] = __help['range.equal']
__help['range.size'   ] = __help['range.equal']
__help['range.same'   ] = __help['range.equal']
__help['range.reverse'] = __help['range.equal']

__help['logrange.equal'  ] = __help['range.equal']
__help['logrange.=='     ] = __help['range.equal']
__help['logrange.-'      ] = __help['range.equal']
__help['logrange.#'      ] = __help['range.equal']
__help['logrange.size'   ] = __help['range.equal']
__help['logrange.same'   ] = __help['range.equal']
__help['logrange.reverse'] = __help['range.equal']

__help['range: why ±inf are forbidden'] = [=[
  [Dev] Motivation to forbid ±inf in constructors:
  - value would return NaN if
      step  == 0    and x     == ±inf  (valid)
      step  == ±inf and x     == 0     (forbid)
    x*step  == ±inf and start == ∓inf  (forbid)
  - size would return NaN if
      step  == 0    and stop  == start (guard)
      start == ±inf and stop  == start (forbid)
  - step would return NaN if
      size  == 1    and stop  == start (guard)
      start == ±inf and stop  == start (forbid)
]=]

__help['range: why adjusting step'] = [=[
  [Dev] Motivation to adjust step in non raw constructors:
    Step is adjusted if the computed size is close to an integer by ±1e-12.
    Then the following properties should hold even for rational binary numbers:
    - size  (start, stop , step_  ) == size_
    - step  (start, stop , size_  ) == step_
    - value (start, step_, size_-1) == stop
    The maximum adjustment is step = step * (1-eps)^2, beyond this value it is
    the user reponsibility to provide better inputs.

  These numerical adjustements were implemented to ensure that ranges behave
  more as expected by users, still fitting within range limits. The maximum
  relative difference between adjusted and original step is epsilon = 1e-12 if
  the size is provided (i.e. nrange), plus -2*eps*step to ensure aforementioned
  properties.
]=]

__help['range: infinite constant sequence'] = [=[
  Infinite constant sequences can be created by using start == stop and step = 0
  in range constructor or size = inf in nrange constructor. The user must satify
  the constraint start == stop in both constructors to show its intention.
]=]

__help['range: singleton sequence'] = [=[
  Singleton sequences can be created by using step > stop-start for start < stop
  and step < stop-start for stop < start in range constructor or size = 1 in
  nrange constructor. In this latter case with size = 1, step will be set to
  huge * sign(stop-start).
]=]

-- end ------------------------------------------------------------------------o
return __help
