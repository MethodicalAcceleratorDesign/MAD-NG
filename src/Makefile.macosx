#
# o----------------------------------------------------------------------------o
# |
# | MAD Makefile
# |
# | Methodical Accelerator Design (Copyleft 2016+)
# | Authors: L. Deniau, laurent.deniau at cern.ch
# | Contrib: -
# |
# o----------------------------------------------------------------------------o
# | You can redistribute this file and/or modify it under the terms of the GNU
# | General Public License GPLv3 (or later), as published by the Free Software
# | Foundation. This file is distributed in the hope that it will be useful, but
# | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
# o----------------------------------------------------------------------------o
#

# project
PRJ     := mad

# lua/mad modules to NOT embed
NOT     := # $(wildcard *.mad help/*.mad)

# setup
CC      := gcc
FC      := gfortran
DIR     := build
LIB     := ../lib
BIN     := ../bin/macosx
AR      := ar -ruv
LJ      := $(firstword $(wildcard ./mad $(LIB)/luajit/bin/luajit))

# depend
DFLAGS  := -std=c99 -MM

# compiler
CFLAGS  := -std=c99 -W -Wall -Wextra -pedantic
CFLAGS  += -O3 -ftree-vectorize -fPIC -flto -march=native #-fopt-info
CFLAGS  += -Waggregate-return -Wcast-align -Wdisabled-optimization \
					 -Wpointer-arith -Wsign-compare -Wwrite-strings \
					 -Wbad-function-cast -Wmissing-prototypes -Wnested-externs \
					 -Wstrict-prototypes -Wunreachable-code \
					 $(CCOPTIONS) -fopenmp #-DDEBUG
# https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html
# https://gcc.gnu.org/wiki/FloatingPointMath
CFLAGS  += -fno-math-errno -fno-builtin-cproj -ffast-math
				 # -fno-cx-limited-range
				 # -fassociative-math -freciprocal-math -ffinite-math-only

# fortran
FFLAGS  := -std=f95 -W -Wall -Wextra -pedantic
FFLAGS  += -O3 -ftree-vectorize -fPIC -flto -march=native

# lua/mad
LFLAGS  :=

# linker
LDFLAGS := #-Wl,-macosx_version_min,10.15
LDFLAGS += -static-libgcc # disable ASLR: -Wl,-no_pie

LDFLAGS += $(BIN)/liblpeg.a   $(BIN)/liblfs.a     $(BIN)/libluajit.a \
					 $(BIN)/liblapack.a $(BIN)/librefblas.a \
					 $(BIN)/libnfft3.a  $(BIN)/libfftw3.a   \
					 $(BIN)/libnlopt.a \
					 $(or $(wildcard $(shell gcc -print-file-name=libgfortran.a)),-lgfortran) \
					 $(or $(wildcard $(shell gcc -print-file-name=libquadmath.a)),-lquadmath) \
					 $(or $(wildcard $(shell gcc -print-file-name=libgomp.a))    ,-lgomp) \
					 $(LDOPTIONS)

# files setup
ASRC    := $(wildcard *.lua *.mad help/*.mad *.c sse/*.c *.f90) # all sources
RSRC    := $(filter-out $(NOT),$(ASRC))                       # retained sources
CSRC    := $(filter %.c,$(RSRC))                              # .c   sources
FSRC    := $(filter %.f90,$(RSRC))                            # .f90 sources
LSRC    := $(filter %.lua,$(RSRC))                            # .lua sources
MSRC    := $(filter %.mad,$(RSRC))                            # .mad sources

DEP     := $(patsubst %.c,%.d,$(filter-out mad_main.c,$(CSRC)))
DEP     := $(addprefix $(DIR)/,$(DEP))

OBJ     := $(patsubst %.c,%.o,$(CSRC))
OBJ     += $(patsubst %.f90,%.o,$(FSRC))
OBJ     += $(patsubst %.lua,%.o,$(LSRC))
OBJ     += $(patsubst %.mad,%.o,$(MSRC))
OBJ     := $(addprefix $(DIR)/,$(OBJ))

DOIT    := $(shell mkdir -p $(DIR) $(DIR)/help  $(DIR)/sse)

# files specific setup
$(DIR)/mad_main.o:    CFLAGS += -I$(LIB)/luajit/src
$(DIR)/mad_nlopt.o:   CFLAGS += -I$(LIB)/nlopt/src/api
$(DIR)/mad_fft.o:     CFLAGS += -I$(LIB)/fftw3/api -I$(LIB)/nfft3/include
$(DIR)/madx_micado.o: FFLAGS += -Wno-compare-reals

# rules
$(PRJ): lib$(PRJ).a
	$(CC) $(CFLAGS) -o $@ -Wl,-force_load $< $(LDFLAGS)

lib$(PRJ).a: $(OBJ)
	$(AR) $@ $(OBJ)

$(DIR)/%.o: %.mad
	$(LJ) $(LFLAGS) -bg $< $@

$(DIR)/%.o: %.lua
	$(LJ) $(LFLAGS) -bg $< $@

$(DIR)/%.o: %.f90
	$(FC) $(FFLAGS) -c $< -o $@

$(DIR)/%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

$(DIR)/%.d: %.c
	$(CC) $(DFLAGS) $< > $@
	@sed -i.bak -e 's,\($*\)\.o[ :]*,$(DIR)/\1.o $@ : ,g' $@
	@rm $@.bak

.PHONY: dep clean cleanbin cleanobj

dep:
	otool -L $(PRJ)

cleanbin:
	rm -f $(PRJ)

cleanobj:
	rm -rf $(DIR)
	rm -rf lib$(PRJ).a

clean: cleanbin cleanobj

# default rule
.DEFAULT_GOAL := $(PRJ)

# include dependencies
BUILDGOALS := $(PRJ) lib$(PRJ).a
ifneq ($(filter $(BUILDGOALS),$(MAKECMDGOALS)),)
-include $(DEP)
endif
ifeq ($(MAKECMDGOALS),)
-include $(DEP)
endif
