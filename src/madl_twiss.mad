--[=[
 o-----------------------------------------------------------------------------o
 |
 | Twiss module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local command, track, cofind, option, warn, vector, matrix        in MAD
local normal, normal1, map2bet, bet2map, chr2bet, syn2bet, dp2pt,
      ofname, ofcname, ofhname, ofchname, cvindex, msort, par2vec in MAD.gphys
local sign                                                        in MAD.gmath
local chain, achain                                               in MAD.gfunc
local tblcat, tblcpy, tblrep, assertf, errorf, printf             in MAD.utility
local lbool                                                       in MAD.gfunc
local is_nil, is_true, is_boolean, is_number, is_string, is_iterable,
      is_mappable, is_callable, is_table, is_vector, is_damap     in MAD.typeid
local ofun_tol                                                    in MAD.gphys.tol
local atfirst, atstd                                              in MAD.symint.slcsel
local abs, min, max, sqrt, floor                                  in math

local chromdp = 1e-6

local assert, error, getmetatable, setmetatable, table =
      assert, error, getmetatable, setmetatable, table

local r4 = 1..4
local I4 = matrix(4):eye()
local I6 = matrix(6):eye()

-- helpers --------------------------------------------------------------------o

local function mdump (mflw, msg_)
  io.write('\n', msg_, '\n')
  for i=1,mflw.tpar do
    io.write("mflw[", i, "]=\n")
    if is_damap(mflw[i])
    then for k,v in pairs(mflw[i]) do print(k,v) end mflw[i]:print()
    else print(mflw[i]) end
  end
end

local function twdump (mflw, msg_, str_)
  local fmt = option.numfmt
  local msg, str = msg_ or '', str_ or 'M'
  option.numfmt = "% 10.5f"
  for i=1,mflw.npar do
    printf("%s%d: ", msg, i)
    mflw[i]:get0():print(str,1e-12,'line')
    mflw[i]:get1():print(' "     ')
  end
  option.numfmt = fmt
end

-- twiss mtable ---------------------------------------------------------------o

local cvtlst = { 'deltap',
  'q1', 'q2', 'q3', 'dq1', 'dq2', 'dq3', 'alfap','etap','gammatr',
  'synch_1','synch_2','synch_3','synch_4','synch_5','synch_6','synch_8'
}

local function fill_sum (mflw)
  if not mflw.__twdat then return end -- not yet in twiss

  local mtbl, __twdat in mflw

  -- cleanup deltap
  if __twdat.chrm then
    local deltap in mtbl
    local ndp = #deltap
    for i=ndp/2+1,ndp do deltap[i] = nil end
  end

  -- total length
  mtbl.length = mflw.spos + mflw.ds - mflw.s0

  -- momentum compaction & phase slip factors, gamma transition
  local npar, ofun, chrm, q1, q2, q3, dq1, dq2, dq3, nf0,
        synch_1, synch_2, synch_3, synch_4, synch_5, synch_6, synch_8,
        alfap, etap, gammatr in __twdat
  local beam, len = mflw.beam, mtbl.length

  for i=1,mflw.npar do
    local id = mflw[i].id
    if id <= npar then
      local m    = mflw[i]
      local of   = ofun[id]
      local beam = m.beam or beam

      q1[id] = of.mu1
      q2[id] = of.mu2
      q3[id] = of.mu3

      if chrm then
        local dpt  = dp2pt(chrm, beam.beta)
        local ofdp = ofun[id+npar]

        dq1[id] = (ofdp.mu1 - of.mu1) / dpt
        dq2[id] = (ofdp.mu2 - of.mu2) / dpt
        dq3[id] = (ofdp.mu3 - of.mu3) / dpt

        synch_1[id] = of.synch_1
        synch_2[id] = of.synch_2
        synch_3[id] = of.synch_3
        synch_4[id] = of.synch_4
        synch_5[id] = of.synch_5
        synch_6[id] = of.synch_6
        synch_8[id] = of.synch_8
      elseif m:mord() >= 2 and nf0[id] then
        local nf = nf0[id]:analyse'anh'
        dq1[id] = nf:dq1{1} ; if abs(dq1[id]) < ofun_tol then dq1[id] = 0 end
        dq2[id] = nf:dq2{1} ; if abs(dq2[id]) < ofun_tol then dq2[id] = 0 end
        dq3[id] = nf:dq3{1} ; if abs(dq3[id]) < ofun_tol then dq3[id] = 0 end
      end

      -- calculation from MAD-X, need to be reviewed
      local R  = m:get1()
      local sd = R:get(5,6) + R:get(5,1)*of.dx + R:get(5,2)*of.dpx
                            + R:get(5,3)*of.dy + R:get(5,4)*of.dpy

      etap   [id] = -sd*beam.beta^2 / len
      alfap  [id] = 1/beam.gamma^2 + etap[id]
      gammatr[id] = sqrt(1/abs(alfap[id])) * sign(alfap[id])
    end
  end

  -- link data to mtbl
  for i=2,#cvtlst do -- skip deltap
    local k = cvtlst[i]
    mtbl:var_set(k, __twdat[k])
  end

  -- mute singleton list or empty list in the header into the value or 0
  for _,k in ipairs(cvtlst) do
    local v = mtbl[k]
    if is_iterable(v) then
      local n = #v
          if n == 0 then mtbl[k] = 0
      elseif n == 1 then mtbl:var_set(k, v[1])
      end
    end
  end
end

local function fill_row (elm, mflw, lw, islc)
  if not mflw.__twdat then return end -- not yet in twiss

  local mtbl, info, saveanf in mflw
  local nrow, ofun, nf0, rdts, onam in mflw.__twdat

-- printf("tw_fill: islc=%2d, nrow=%4d, elm=%s\n", islc, nrow, elm.name)

  if info >= 3 and rdts then
    printf("twiss: computing RDTs at :%4d:%s\n", nrow, elm.name)
  end

  for i=1,mflw.npar do
    local m = mflw[i]
    if not m.nosave then
      nrow = nrow + 1

      -- save optical functions (expand done by track!)
      local of = ofun[m.id]
      for _,k in ipairs(onam) do
        local col = mtbl[k]
        if not is_table(col) then col:_reshapeto(nrow) end
        col[nrow] = of[k]
      end

      -- save RDTs (expand done by track!)
      if rdts then
        local nf0 = nf0[m.id]
        if m:eq(nf0.m_prev) then                  -- duplicate values
          if saveanf then mtbl.__nf[nrow] = mtbl.__nf[nrow-1] end
          for _,k in ipairs(rdts) do
            nf0.m_dup = (nf0.m_dup or 0)+1
            local col = mtbl[k]
            if not is_table(col) then col:_reshapeto(nrow) end
            col[nrow] = col[nrow-1]
          end
        else
          nf0.m_prev = m:copy(nf0.m_prev)
          local nf = nf0:analyse('all', m)        -- full analysis
          if saveanf then mtbl.__nf[nrow] = nf end
          for _,k in ipairs(rdts) do
            local col = mtbl[k]
            if not is_table(col) then col:_reshapeto(nrow) end
            col[nrow] = nf:gnfu(k:sub(2))
          end
        end
      end
    end
  end

  mflw.__twdat.nrow = nrow
  return true
end

-- beta0 (action) -------------------------------------------------------------o

local function twissact (elm, mflw, lw, islc)
  if not mflw.__twdat then return end -- not yet in twiss

! printf("\ntw_ofun: islc=%2d, npar=%2d, elem=%s\n", islc, mflw.npar, elm.name)

  local fst = atfirst(nil, nil , nil, islc)
  local std = atstd  (nil, mflw, nil, islc)

  if not (fst or std) then return end

  local ofun, chrm, npar in mflw.__twdat

  -- map to beta0 block
  if std then
    for i=1,mflw.npar do
      local m = mflw[i]
      map2bet(m, ofun[m.id])
    end
  end

  -- synchrotron integrals
  if chrm and fst then
    for i=1,mflw.npar do
      local id in mflw[i]
      if id <= npar then syn2bet(ofun[id], mflw, elm) end
    end
  end

  -- chromatic functions
  if chrm and std then
    local beam in mflw
    local dpt = dp2pt(chrm, beam.beta)
    for i=1,mflw.npar do
      local id, beam in mflw[i]
      if id > npar then
        local beam in mflw[i]
        local dpt = beam and dp2pt(chrm, beam.beta) or dpt
        local id0 = mflw[mflw[i].nosave].id
--        print(id, id1, ofun[id].id, ofun[id1].id, mflw[i].nosave)
        assert(ofun[id].id == id, "unexpected corrupted optical function index (dp)")
        assert(id0+npar    == id, "unexpected corrupted optical function index")
        chr2bet(ofun[id0], ofun[id], dpt)
      end
    end
  end
end

-- chrom option ---------------------------------------------------------------o

local function chrom_dps (self)
  local chrom, deltap = self.chrom, self.deltap or 0
  local cdp = (chrom == true or chrom == 0) and chromdp or chrom
  local dps = is_number(deltap) and {deltap} or deltap
  assert(is_number  (cdp), "invalid chrom attribute (boolean or number expected)")
  assert(is_iterable(dps), "invalid deltap attribute (iterable expected)")

  if cdp then
    -- double the list of deltap
    local ndp  = #dps
    local cdps = table.new(2*ndp,0)
    for i,v in ipairs(dps) do
      cdps[i], cdps[i+ndp] = v, v+cdp
    end

    -- update self
    self.chrom  = cdp
    self.deltap = cdps
  end
end

-- closed orbits --------------------------------------------------------------o

local function twiss_cofind (self, mflw0)
  local npar, info in mflw0

  -- setup cofind for jacobian or damaps
  local costp = self.costp == true and cofind.costp or self.costp
  local mapdef = not costp and self.mapdef or nil

  -- process 'Xset' damaps only (i.e. particles)
  local j, X0, Xi = 1, table.new(npar,0), table.new(npar,0)
  for i=1,npar do -- use particles or (re)use damaps
    local m = mflw0[i]
    if m.status ~= 'Aset' then
      X0[j] = costp and m:get0():totable() or m
      Xi[j], X0[j].beam, X0[j].nosave, X0[j].nocopy, j =
       m.id,     m.beam,     m.nosave,            i, j+1
    end
  end

  -- nothing to process (no damaps)
  j = j-1 ; if j == 0 then return end

  -- compute closed orbit(s)
  if info >= 2 then
    io.write("twiss: searching for closed orbit(s)...\n")
  end

  local _, mflw = cofind { exec=false } :copy_variables(self)
                         { X0=X0, save=false, nstep=-1,
                           mapdef=mapdef, costp=costp }

  -- sanity check
  assert(j == mflw.tpar, "unexpected corrupted mflw")

  -- update damaps with particles closed orbit
  if costp then
    local v = vector(6)
    for i=1,j do
      local m0 = mflw0[X0[i].nocopy]
      m0.status = X0[i].status
      m0:setvar(par2vec(X0[i],v))
    end
  end

  -- restore id, clear nocopy
  for i=1,j do X0[i].id, X0[i].nocopy = Xi[i], nil end

  -- report
  if mflw.npar ~= mflw.tpar then
    warn("%d/%d particles are unstable/singular/lost after closed orbit search",
         mflw.tpar - mflw.npar, mflw.tpar)
    msort(mflw0)
  end
end

-- one-turn-maps --------------------------------------------------------------o

local function twiss_track (self, mflw0)
  local npar, info in mflw0

  -- process 'stable' damaps only (i.e. particles)
  local j, X0, Xi = 1, table.new(npar,0), table.new(npar,0)
  for i=1,npar do
    local m = mflw0[i]
    if m.status == 'stable' then
      Xi[j], X0[j], m.nocopy, j = m.id, m:clr0(), i, j+1
    end
  end

  -- nothing to process (no damaps)
  j = j-1 ; if j == 0 then return end

  -- compute one-turn-map(s)
  if info >= 2 then
    io.write("twiss: computing one-turn-map(s)...\n")
  end

  local _, mflw = track { exec=false } :copy_variables(self)
                        { X0=X0, save=false, nstep=-1 }

  -- sanity check
  assert(j == mflw.tpar, "unexpected corrupted mflw")

  -- restore id, clear nocopy
  for i=1,j do X0[i].id, X0[i].nocopy = Xi[i], nil end

  -- report
  if mflw.npar ~= mflw.tpar then
    warn("%d/%d particles lost while computing the one-turn-maps",
         mflw.tpar - mflw.npar, mflw.tpar)
    msort(mflw0)
  end
end

-- normal/closed forms --------------------------------------------------------o

local function check_normal (m, of)
  local fmt = option.numfmt
  option.numfmt = "% .5e"
  io.write("Checking normal form vs optical functions\n")
  m:get1():print('A') ; bet2map(of, m:copy()):get1():print('A(beta0)') ; show(of)
  option.numfmt = fmt
end

local function twiss_nform (self, mflw0)
  local npar, sdir, info, debug in mflw0
  local coupling, trkrdt in self

  -- compute normal form(s)
  if info >= 2 then
    io.write("twiss: computing normal form(s)...\n")
  end

  -- prepare mflw0 to twiss extensions
  mflw0.__twdat = {ofun={}, nf0={}}
  local ofun, nf0 in mflw0.__twdat

  for i=1,npar do
    local m = mflw0[i]
    local bet = (m.beam or mflw0.beam).beta

    -- convert in place one-turn-map M into normal form A
    if m.status ~= 'Aset' then
      local nf = normal(m) ; nf0[m.id] = nf ; nf.id = m.id
      nf.a:copy(m):set0(nf.x0).status = 'Aset'

      -- RDTs calculation at nf0
      if trkrdt then nf:analyse'all' end
    end

    -- create beta0 from damap
    local of = map2bet(m, nil, coupling, bet, sdir)

    -- check normal form
    if debug >= 2 then check_normal(m, of) end

    -- save beta0 block
    ofun[m.id] = of ; of.id = m.id
  end
end

-- extend track mflw and mtbl -------------------------------------------------o

local twheader = {
  'chrom', 'coupling', 'trkrdt', 'length',
  -- see also cvtlst above
  'q1', 'q2', 'q3', 'dq1', 'dq2', 'dq3', 'alfap', 'etap', 'gammatr',
  'synch_1', 'synch_2', 'synch_3', 'synch_4', 'synch_5', 'synch_6', 'synch_8',
}

local function twiss_init (self, mflw)
  local save, chrom, coupling, trkrdt, saveanf in self
  local npar, beam, mtbl, __twdat in mflw
  local n = npar

  -- do not save extra rows created by chrom
  if chrom then
    n = npar/2
    for i=1,n do mflw[i+n].nosave = i end
  end

  -- add twiss data to mflw
  __twdat.npar = n
  __twdat.nrow = 0
  __twdat.chrm = chrom
  __twdat.rdts = trkrdt or saveanf and {}
  __twdat.omat = matrix(6)
  __twdat.onam = coupling and (chrom and ofchname or ofcname) or
                               chrom and ofhname  or ofname

  -- tunes and chromaticities
  __twdat.q1, __twdat.dq1 = table.new(n,0), table.new(n,0)
  __twdat.q2, __twdat.dq2 = table.new(n,0), table.new(n,0)
  __twdat.q3, __twdat.dq3 = table.new(n,0), table.new(n,0)

  -- momentum compaction, phase slip factors, gamma transition, synch. integrals
  __twdat.alfap   = table.new(n,0)
  __twdat.etap    = table.new(n,0)
  __twdat.gammatr = table.new(n,0)
  __twdat.synch_1 = table.new(n,0)
  __twdat.synch_2 = table.new(n,0)
  __twdat.synch_3 = table.new(n,0)
  __twdat.synch_4 = table.new(n,0)
  __twdat.synch_5 = table.new(n,0)
  __twdat.synch_6 = table.new(n,0)
  __twdat.synch_8 = table.new(n,0)

  if save then
    -- extend mtbl
    mtbl.type     = 'twiss'
    mtbl.header   = tblcat(mtbl.header, twheader)

    mtbl.chrom    = chrom
    mtbl.coupling = coupling
    mtbl.trkrdt   = trkrdt

    -- add twiss columns and type to mtbl
    for _,k in ipairs(mflw.__twdat.onam) do mtbl:addcol(k,{0}) end

    -- add rdts columns
    if trkrdt then
      assert(is_table(trkrdt), "invalid trkrdt list, list of strings expected")
      for _,k in ipairs(trkrdt) do
        assert(is_string(k) and k:sub(1,1) == 'f',
               "invalid rdt's name (must start by 'f')")
        mtbl:addcol(k,{0})
      end
    end

    -- add __nf col
    if saveanf then
      mflw.saveanf = saveanf
      mtbl:addcol('__nf',{})
    end
  end

  return mflw
end

-- twiss mflow ----------------------------------------------------------------o

local function make_mflow (self)
  local save, chrom, radiate, mapdef in self

  -- wrap actions (see track)
  if save then
    local atsave = self:var_get 'atsave' -- prevent evaluation
    self.atsave = not atsave and fill_row or achain(fill_row, atsave)
  end
  -- action for optical function calculation
  local atentry  = self:var_get 'atentry' -- prevent evaluation
  local atslice  = self:var_get 'atslice' -- prevent evaluation
  local atexit   = self:var_get 'atexit'  -- prevent evaluation
  self. atentry  = not atentry and twissact or chain(atentry, twissact)
  self. atslice  = not atslice and twissact or chain(atslice, twissact)
  self. atexit   = not atexit  and twissact or chain(atexit , twissact)

  -- double the deltaps of self
  if save and chrom then chrom_dps(self) end

  -- block quantum radiation and photon tracking
  if radiate then self.radiate = lbool(radiate) end

  -- ensure damaps (default order is 1)
  assert(mapdef ~= false, "invalid mapdef, true, order or definition required")

  -- prepare template for final tracking of normal form
  local _, mflw = track { exec=false } :copy_variables(self) { nstep=0 }
  if mflw.debug >= 3 then twdump(mflw,'da.') end

  -- clear setup already included
  self.O0, self.deltap = 0, 0

  -- check if cofind is needed
  local cofind
  for i=1,mflw.npar do
    if mflw[i].status ~= 'Aset' then cofind = true ; break end
  end

  if cofind then
    -- search for closed orbits (update mflw, keep order)
    twiss_cofind(self, mflw)
    if mflw.npar == 0 then return mflw end -- no more particles...
    if mflw.debug >= 3 then twdump(mflw,'co.') end

    -- track one-turn-map (update mflw, keep order)
    twiss_track(self, mflw)
    if mflw.npar == 0 then return mflw end -- no more particles...
    if mflw.debug >= 3 then twdump(mflw,'tk.') end
  end

  -- compute normal forms (update mflw, keep order)
  twiss_nform(self, mflw)
  if mflw.debug >= 3 then twdump(mflw,'nf.') end

  -- return extended mflw and mtbl (if any)
  return twiss_init(self, mflw)
end

-- twiss command --------------------------------------------------------------o

local _id = {} -- identity (unique)

local function exec (self)
  local mflw

  -- retrieve or build mflw (and extend mtbl)
  if self.mflow then
    assert(self.mflow.__twss == _id, "invalid mflow (twiss mflow expected)")
    mflw = self.mflow
    mflw.nstep = self.nstep or mflw.nstep  -- update volatile fields
    mflw.info  = self.info  or mflw.info
    mflw.debug = self.debug or mflw.debug
  else
    mflw = make_mflow(self) -- the real work is done here!
    mflw.__twss = _id
    if not mflw.__twdat then
      warn("twiss not completed (all damaps were unstable/singular/lost)")
      return mflw.mtbl, mflw
    end
  end

  -- track the normal form(s)
  if mflw.info >= 2 then
    io.write("twiss: computing optics (and rdts)...\n")
  end

  -- track the normal form(s)
  local mtbl, mflw, ei = track { mflow=mflw }

  -- finalise twiss calculation (tunes, chromas, etc)
  if not ei and mtbl then fill_sum(mflw) end

  return mflw.mtbl, mflw, ei
end

-- attributes set to nil will use the default from track by inheritance

local twiss = command 'twiss' {
  sequence=nil,      -- sequence (required)                               (trck)
  beam=nil,          -- beam (required or sequence.beam)                  (trck)
  range=nil,         -- range of tracking (or sequence.range)             (trck)
  dir=nil,           -- s-direction of tracking (1 or -1)                 (trck)

  s0=nil,            -- initial position offset s                         (trck)
  X0=nil,            -- initial X coordinates (or damap, or beta0)        (trck)
  O0=nil,            -- initial O coordinates of reference orbit          (trck)
  deltap=nil,        -- initial deltap(s)                                 (trck)
  chrom=false,       -- compute chromatic functions by finite difference  (twss)
  coupling=false,    -- compute optical functions for coupling modes      (twss)
  trkrdt=false,      -- compute (list of) RDTs                            (twss)

  nturn=nil,         -- number of turns                                   (trck)
  nstep=nil,         -- number of elements to track for last phase        (trck)
  nslice=nil,        -- number of slices (or len-frac) for each element   (trck)
  method=nil,        -- method or order for integration (1 to 8)          (trck)
  model=nil,         -- model for integration ('DKD' or 'TKT')            (trck)
  mapdef=2,          -- always use damap formalism (true => {xy=1})       (twss)
  secnmul=nil,       -- maximun number of curved multipoles for bends     (trck)
  implicit=nil,      -- slice implicit elements too                       (trck)
  misalign=nil,      -- consider misalignment errors                      (trck)
  aperture=nil,      -- default aperture                                  (trck)
  fringe=nil,        -- activate fringe fields (0..7)                     (trck)
  frngmax=nil,       -- maximum multipole fringe field                    (trck)
  radiate=nil,       -- radiate at slices                                 (trck)
  nocavity=nil,      -- disable rfcavities                                (trck)
  totalpath=nil,     -- 't' is the totalpath                              (trck)
  cmap=nil,          -- use C/C++ maps when available                     (trck)
  ptcmodel=nil,      -- use PTC model (nil=MADNG, true=PTC, false=MADX)   (trck)

  save=true,         -- create mtable and save results                    (trck)
  aper=nil,          -- check for aperture (default atsave)               (trck)
  observe=0,         -- save after all elements                           (trck)
  savemap=nil,       -- save damap in the mtable, col __map               (trck)
  saveanf=nil,       -- save analysed normal form in the mtable, col __nf (trck)

  atentry=nil,       -- action called when entering an element  (ataper)  (trck)
  atslice=nil,       -- action called after each element slices (atsave)  (trck)
  atexit=nil,        -- action called when exiting an element   (atsave)  (trck)
  ataper=nil,        -- action called when checking for aperture          (trck)
  atsave=nil,        -- action called when saving in mtable               (trck)
  atdebug=nil,       -- action called when debugging the element maps     (trck)

  savesel=nil,       -- save selector (predicate)                         (trck)
  apersel=nil,       -- aper selector (predicate, default atentry)        (trck)

  coitr=nil,         -- maximum number of iterations                      (cofn)
  cotol=nil,         -- closed orbit tolerance (i.e. min |dx|)            (cofn)
  costp=nil,         -- relative finite diff. step for jacobian or true   (cofn)
  O1=nil,            -- optional final coordinates translation            (cofn)

  info=nil,          -- information level (output on terminal)            (trck)
  debug=nil,         -- debugging information level (output on terminal)  (trck)
  usrdef=nil,        -- user defined data attached to the mflow           (trck)

  mflow=nil,         -- mflow, exclusive with other attributes except nstep
  exec=exec,         -- command to execute upon children creation

  __attr = tblcat(   -- list of all setup attributes
    cofind.__attr,
    {'chrom', 'coupling', 'trkrdt', 'saveanf'},
    {noeval=cofind.__attr.noeval}
  )
} :set_readonly() -- reference twiss command is readonly

-- end ------------------------------------------------------------------------o
return { twiss = twiss }
