--[=[
 o-----------------------------------------------------------------------------o
 |
 | Match module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local ffi = require 'ffi'

local _C, command, vector, matrix, warn, option                  in MAD
local fnil, ident                                                in MAD.gfunc
local assertf, errorf, printf, strsplit, log2num                 in MAD.utility
local is_nil, is_string, is_iterable, is_mappable, is_callable   in MAD.typeid
local eps, inf, nan                                              in MAD.constant

local abs, sqrt, min, max in math

local strfmt = string.format

local mintol = 1e-8

-- load nlopt libs ------------------------------------------------------------o

local nloptrun = require 'madl_nlopt' -- must be first
local lsoptrun = require 'madl_lsopt' -- must be second (extend)

-- extend lib enums -----------------------------------------------------------o

ffi.cdef [[
enum {
  /* extra status/return code from MAD */
  NLOPT_RUNNING = 0,
}
]]

-- NLopt return code strings (see madl_nlopt) ---------------------------------o

local retstr = {
  -- generic failure code
  [_C.NLOPT_FAILURE         ] = 'FAILURE',
  [_C.NLOPT_INVALID_ARGS    ] = 'INVALID_ARGS',
  [_C.NLOPT_OUT_OF_MEMORY   ] = 'OUT_OF_MEMORY',
  -- generic success code
  [_C.NLOPT_SUCCESS         ] = 'SUCCESS',
  [_C.NLOPT_STOPVAL_REACHED ] = 'FMIN',     -- MODIFIED
  [_C.NLOPT_FTOL_REACHED    ] = 'FTOL',     -- MODIFIED
  [_C.NLOPT_XTOL_REACHED    ] = 'XTOL',     -- MODIFIED
  [_C.NLOPT_MAXEVAL_REACHED ] = 'MAXCALL',  -- MODIFIED
  [_C.NLOPT_MAXTIME_REACHED ] = 'MAXTIME',  -- MODIFIED
  [_C.NLOPT_ROUNDOFF_LIMITED] = 'ROUNDOFF', -- MODIFIED
  [_C.NLOPT_FORCED_STOP     ] = 'STOPPED',  -- MODIFIED
  -- extra codes (check value with enum of nlopt return code!)
  [_C.NLOPT_RUNNING         ] = 'RUNNING',  -- ADDED
}

-- Optimiser supported algorithms (see madl_nlopt and madl_lsopt) -------------o

--[[
Algorithm specs:
  id = C enum
  bd = support bounds constraints (r = requires finite bounds)
  eq = support equality constraints (result == 0)
  le = support inequality constraints (result <= 0)
  gr = require explicit computation of gradient
  lo = require local optimiser specification
  lg = augmented lagrangian method

Algorithm names:
  {G/L}{D/N}_* = global/local derivative/no-derivative optimization
  *_RAND algorithms involve some randomization.
  *_NOSCAL algorithms are *not* scaled to a unit hypercube
           (i.e. they are sensitive to the units of x)
--]]

local optalgo = {
  -- MAD NLOpt algorithms
  -- global optimisers without derivatives
  GN_CRS2_LM                 = { bd='r', eq='n', le='n', gr='n', lo='n', lg='n' },
  GN_DIRECT                  = { bd='r', eq='n', le='n', gr='n', lo='n', lg='n' },
  GN_DIRECT_L                = { bd='r', eq='n', le='n', gr='n', lo='n', lg='n' },
  GN_DIRECT_L_NOSCAL         = { bd='r', eq='n', le='n', gr='n', lo='n', lg='n' },
  GN_DIRECT_L_RAND           = { bd='r', eq='n', le='n', gr='n', lo='n', lg='n' },
  GN_DIRECT_L_RAND_NOSCAL    = { bd='r', eq='n', le='n', gr='n', lo='n', lg='n' },
  GN_DIRECT_NOSCAL           = { bd='r', eq='n', le='n', gr='n', lo='n', lg='n' },
  GN_ESCH                    = { bd='r', eq='n', le='n', gr='n', lo='n', lg='n' },
  GN_ISRES                   = { bd='r', eq='y', le='y', gr='n', lo='n', lg='n' },
  GN_MLSL                    = { bd='r', eq='n', le='n', gr='n', lo='n', lg='n' },
  GN_MLSL_LDS                = { bd='r', eq='n', le='n', gr='n', lo='n', lg='n' },
  GN_ORIG_DIRECT             = { bd='r', eq='y', le='y', gr='n', lo='n', lg='n' },
  GN_ORIG_DIRECT_L           = { bd='r', eq='y', le='y', gr='n', lo='n', lg='n' },
  -- global optimisers with derivatives
  GD_MLSL                    = { bd='r', eq='n', le='n', gr='y', lo='n', lg='n' },
  GD_MLSL_LDS                = { bd='r', eq='n', le='n', gr='y', lo='n', lg='n' },
  GD_STOGO                   = { bd='r', eq='n', le='n', gr='y', lo='n', lg='n' },
  GD_STOGO_RAND              = { bd='r', eq='n', le='n', gr='y', lo='n', lg='n' },
  -- local optimisers without derivatives
  LN_AUGLAG                  = { bd='y', eq='y', le='y', gr='n', lo='n', lg='y' },
  LN_AUGLAG_EQ               = { bd='y', eq='y', le='y', gr='n', lo='n', lg='y' },
  LN_BOBYQA                  = { bd='y', eq='n', le='n', gr='n', lo='n', lg='n' },
  LN_COBYLA                  = { bd='y', eq='y', le='y', gr='n', lo='n', lg='n' }, -- default
  LN_NELDERMEAD              = { bd='y', eq='n', le='n', gr='n', lo='n', lg='n' },
  LN_NEWUOA                  = { bd='y', eq='n', le='n', gr='n', lo='n', lg='n' },
  LN_NEWUOA_BOUND            = { bd='y', eq='n', le='n', gr='n', lo='n', lg='n' },
  LN_PRAXIS                  = { bd='y', eq='n', le='n', gr='n', lo='n', lg='n' },
  LN_SBPLX                   = { bd='y', eq='n', le='n', gr='n', lo='n', lg='n' },
  -- local optimisers with derivatives
  LD_AUGLAG                  = { bd='y', eq='y', le='y', gr='y', lo='n', lg='y' },
  LD_AUGLAG_EQ               = { bd='y', eq='y', le='y', gr='y', lo='n', lg='y' },
  LD_CCSAQ                   = { bd='y', eq='n', le='y', gr='y', lo='n', lg='n' },
  LD_LBFGS                   = { bd='y', eq='n', le='n', gr='y', lo='n', lg='n' },
  LD_LBFGS_NOCEDAL           = { bd='y', eq='n', le='n', gr='y', lo='n', lg='n' },
  LD_MMA                     = { bd='y', eq='n', le='y', gr='y', lo='n', lg='n' },
  LD_SLSQP                   = { bd='y', eq='y', le='y', gr='y', lo='n', lg='n' },
  LD_TNEWTON                 = { bd='y', eq='n', le='n', gr='y', lo='n', lg='n' },
  LD_TNEWTON_PRECOND         = { bd='y', eq='n', le='n', gr='y', lo='n', lg='n' },
  LD_TNEWTON_PRECOND_RESTART = { bd='y', eq='n', le='n', gr='y', lo='n', lg='n' },
  LD_TNEWTON_RESTART         = { bd='y', eq='n', le='n', gr='y', lo='n', lg='n' },
  LD_VAR1                    = { bd='y', eq='n', le='n', gr='y', lo='n', lg='n' },
  LD_VAR2                    = { bd='y', eq='n', le='n', gr='y', lo='n', lg='n' },
  -- surrounding optimisers (require local optimizer)
  AUGLAG                     = { bd='y', eq='y', le='y', gr='?', lo='y', lg='y' },
  AUGLAG_EQ                  = { bd='y', eq='y', le='y', gr='?', lo='y', lg='y' },
  G_MLSL                     = { bd='y', eq='n', le='n', gr='?', lo='y', lg='n' },
  G_MLSL_LDS                 = { bd='y', eq='n', le='n', gr='?', lo='y', lg='n' },

  -- MAD LSOpt algorithms
  -- local optimisers with derivatives
  LD_LMDIF                   = { bd='y', eq='y', le='y', gr='y', lo='n', lg='n' },
  LD_JACOBIAN                = { bd='y', eq='y', le='y', gr='y', lo='n', lg='n' }, -- default
}

-- load nlopt lib wrapper -----------------------------------------------------o

do -- check integrity between optalgo and NLOPT enums (from madl_nlopt)
  local ntot = _C.NLOPT_NUM_ALGOS
  local n, t = 0, table.new(ntot,0)
  for s,a in pairs(optalgo) do
    a.id = assert(_C['NLOPT_'..s]) -- extend optalgo rows with id attribute
    n = n+1 ; t[n] = a
  end
  assert(n == ntot, "unexpected missing NLOPT algorithm")
  -- fill array part with rows by id, starting at enum 0, i.e. len+1
  for i=1,n do optalgo[t[i].id] = t[i] end
  assert(n == #optalgo+1, "unexpected corrupted list of NLOPT algorithm")
end

-- expression default weights by kind -----------------------------------------o

local expr_weights = { -- default weight = 1
  x     =  10,  y     =  10,  t     =  10,
  px    = 100,  py    = 100,  pt    = 100, -- generics
  dx    =  10,  dy    =  10,  dt    =  10,  d    =  10,
  dpx   = 100,  dpy   = 100,  dpt   = 100,  dp   = 100,
  ddx   =  10,  ddy   =  10,  ddt   =  10,  dd   =  10,
  ddpx  = 100,  ddpy  = 100,  ddpt  = 100,  ddp  = 100,
  --
  wx    =   1,  wy    =   1,  wz    =   1,  w    =   1,
  phix  =   1,  phiy  =   1,  phiz  =   1,  phi  =   1,
  --
  betx  =   1,  bety  =   1,  betz  =   1,  beta =   1,
  alfx  =  10,  alfy  =  10,  alfz  =  10,  alfa =   1,
  mux   =  10,  muy   =  10,  muz   =  10,  mu   =  10,
  --
  beta1 =   1,  beta2 =   1,  beta3 =   1,  beta =   1,
  alfa1 =  10,  alfa2 =  10,  alfa3 =  10,  alfa =  10,
    mu1 =  10,    mu2 =  10,    mu3 =  10,    mu =  10,
  --
  q1    =  10,  q2    =  10,  q3    =  10,  q    =  10,
  dq1   =   1,  dq2   =   1,  dq3   =   1,  dq   =   1,
}

-- getters/setters ------------------------------------------------------------o

local isa_tpsa in MAD.typeid

local function mklocacc (env, fun, vnam, vidx)
  local var, scp = env.__var, env.__var.scope
  return \ => if scp[vnam] == nil then
                for i=3,1e6 do
                  local info = debug.getinfo(i, 'f')
                  assert(info, 'local not found in getter (unexpected)')
                  if info.func == fun then scp[vnam]=i; break end
                end
              end
              local k, v = debug.getlocal(scp[vnam], vidx)
              assert(k == vnam, 'invalid local variable in getter')
              return isa_tpsa(v) and v:get0() or v
            end,
        \x => if scp[vnam] == nil then
                for i=3,1e6 do
                  local info = debug.getinfo(i, 'f')
                  assert(info, 'local not found in setter (unexpected)')
                  if info.func == fun then scp[vnam]=i; break end
                end
              end
              local k, v = debug.getlocal(scp[vnam], vidx)
              assert(k == vnam, 'invalid local variable in setter')
              if isa_tpsa(v) then
                v:set0(x)
              else
                debug.setlocal(scp[vnam], vidx, x)
                var.flush = var.jitf
              end
            end
end

local function mkupvacc (env, fun, vnam, vidx)
  local var = env.__var
  return \ => local k, v = debug.getupvalue(fun, vidx)
              assert(k == vnam, 'invalid upvalue in getter')
              return isa_tpsa(v) and v:get0() or v
            end,
        \x => local k, v = debug.getupvalue(fun, vidx)
              assert(k == vnam, 'invalid upvalue in setter')
              if isa_tpsa(v) then
                v:set0(x)
              else
                debug.setupvalue(fun, vidx, x)
                var.flush = var.jitf
              end
            end
end

local wmsg =
  "write access to %s is very slow; use set or indirect (table) access"

local function accessors (env)
  local loc, upv, ctx = {}, {}, getfenv(3)
  local fun = debug.getinfo(3, 'f').func

  assert(ctx and fun, "unexpected invalid stack level")

  -- scan local variables of the caller
  for i=1,1e6 do
    local k,v = debug.getlocal(3, i)
    if not k then break end
    loc[k], loc[i] = i, v -- top/bottom override (required!)
  end
  -- scan upvalues of the caller
  for i=1,1e6 do
    local k,v = debug.getupvalue(fun, i)
    if not k then break end
    upv[k], upv[i] = i, v -- never override (unique!)
  end

--print("LOC") for k,v in pairs(loc) do if is_string(k) then print(k,loc[v]) end end
--print("UPV") for k,v in pairs(upv) do if is_string(k) then print(k,upv[v]) end end

  -- build variables getter/setter
  local variables in env
  local wrn = not (variables.nowarn or variables.set)
  local n in env.__var

  for i=1,n do
    local v = variables[i]
    if v.get and v.set then goto next end

    local var, get, set = v.var
    assertf(is_string(var), "invalid 'var' for variable #%d (string expected)", i)
    local nam, isep = strsplit(var, '.[')

    if loc[nam] then     -- local variable
      if isep > 0 then   -- local variable with indirect access
        local fmt = strfmt([[return \%s,__typ ->
          (\    ->    __typ(%s) and %s:get0() or %s,
           \__x => if __typ(%s) then %s:set0(__x) else %s=__x end end)
        ]], nam, var, var, var, var, var, var)
        -- printf("fmt_loc='%s'\n", fmt)
        get, set = assert(loadstring(fmt))()(loc[loc[nam]], isa_tpsa)
      else               -- local variable with direct access (need jit.flush!)
        if wrn and not v.set then warn(wmsg, "local variables") ; wrn=false end
        get, set = mklocacc(env, fun, nam, loc[nam])
      end

    elseif upv[nam] then -- upvalue
      if isep > 0 then   -- upvalue with indirect access
        local fmt = strfmt([[return \%s,__typ ->
          (\    ->    __typ(%s) and %s:get0() or %s,
           \__x => if __typ(%s) then %s:set0(__x) else %s=__x end end)
        ]], nam, var, var, var, var, var, var)
        -- printf("fmt_upv='%s'\n", fmt)
        get, set = assert(loadstring(fmt))()(upv[upv[nam]], isa_tpsa)
      else               -- upvalue with direct access (need jit.flush!)
        if wrn and not v.set then warn(wmsg, "upvalues") ; wrn=false end
        get, set = mkupvacc(env, fun, nam, upv[nam])
      end

    elseif ctx[nam] then -- caller context
      local fmt = strfmt([[return \__ctx,__typ ->
          (\    ->    __typ(__ctx.%s) and __ctx.%s:get0() or __ctx.%s,
           \__x => if __typ(__ctx.%s) then __ctx.%s:set0(__x) else __ctx.%s=__x end end)
        ]], var, var, var, var, var, var)
      -- printf("fmt_ctx='%s'\n", fmt)
      get, set = assert(loadstring(fmt))()(ctx, isa_tpsa)

    else
      errorf("unable to build '%s' getter and setter (variable not found)", var)
    end

    v.get = v.get or assert(get)
    v.set = v.set or assert(set)

  ::next::
  end
end

-- debug ----------------------------------------------------------------------o

-- print matrix (debug helper)
local function dspmat(mat, nam)
  if mat ~= nil then
    local fmt = option.numfmt;
    option.numfmt = "% -.16e" ; mat:print(nam) ; option.numfmt = fmt
  end
end

-- summary --------------------------------------------------------------------o

local function disp_summ (env)
  local variables, equalities, inequalities, objective, weights in env
  local var = env.__var
  local m, n, p, q, c, cn, cwgt, edsp in var
  local s1, s2, s3, v1, v2, xa, xr, cr, pf

  env.dtime = os.clock()-var.time0 -- update timer before display

  if var.status == _C.NLOPT_RUNNING then
    s1, s2, s3 = 'Curr. Value', 'Curr. Step ', 'Expr. Value'
    v1, v2     =  var.x       ,  var.h
    xa, xr, cr =  var.xadj.cur,  var.xrej.cur,  var.crej.cur
    pf         =  ident
  else
    s1, s2, s3 = 'Final Value', 'Init. Value', 'Penalty Value'
    v1, v2     =  var.x       ,  var.x0
    xa, xr, cr =  var.xadj    ,  var.xrej    ,  var.crej
    pf         =  abs
  end

  if m > 0 and (edsp or q > 0) then
    printf("\n Constraints                Type        Kind        Weight     %s\n", s3)
    io.write"------------------------------------------------------------------------------\n"

    if edsp then
      for i=1,p do
        local e, v = equalities[i] or {}, c[i]/cwgt[i]
        printf("%2d % -24s % -11s % -10s % -10.5g % -.5e%s\n",
                  i, e.name or '', 'equality', e.kind or ' .', cwgt[i],
                  pf(v), cr[i] == cr.n and ' *' or cn[i] > 0 and ' >' or '')
      end
    end
    for i=p+1,m do
      local e, v = inequalities[i-p] or {}, c[i]/cwgt[i]
      printf("%2d % -24s % -11s % -10s % -10.5g % -.5e%s\n",
                i, e.name or '', 'inequality', e.kind or ' .', cwgt[i],
                v < 0 and 0 or v, cr[i] == cr.n and ' *' or cn[i] > 0 and ' >' or '')
    end
  end

  printf("\n Variables                  %s  %s  Lower Limit  Upper Limit\n", s1, s2)
  io.write"--------------------------------------------------------------------------------\n"

  for i=1,n do
    local xmin = var.xmin[i] > -1e100 and strfmt("% -.5e",var.xmin[i]) or '  .'
    local xmax = var.xmax[i] <  1e100 and strfmt("% -.5e",var.xmax[i]) or '  .'
    local e = variables[i] or {}
    printf("%2d % -23s % -.5e % -.5e % -12s % -12s%s\n", i, e.name or e.var or '',
           v1[i], v2[i], xmin, xmax,
           xr[i] == xr.n and ' *' or xa[i] == xa.n and ' #' or '')
  end

  if var.status == _C.NLOPT_RUNNING then
    printf("\nncall=%d [%.1fs], fval=%-.5e, fstp=%-.5e, ccnt=%d.\n\n",
            env.ncall, env.dtime, var.fval, var.fstp, var.ccnt)
  else
    printf("\nncall=%d [%.1fs], fbst[%d]=%-.5e, fstp=%-.5e, status=%s.\n\n",
            env.ncall, env.dtime, var.bst.ncall, var.bst.fval, var.bst.fstp,
            retstr[var.status])
  end
end

-- stopping criteria ----------------------------------------------------------o

local function chkstp (env)
  local var, obj = env.__var, env.objective

  env.dtime = os.clock()-var.time0 -- update timer

  if env.stop == true then
    if env.info >= 3 then io.write("nlopt: forced to stop.\n") end
    var.status = _C.NLOPT_FORCED_STOP        ; return true
  end

  if var.ccnt == 0 or obj.bstra == 0 then -- feasible point
    local fval, fstp, fmin, ftol, frtol in var

    if fval <= fmin then
      var.status = _C.NLOPT_STOPVAL_REACHED  ; return true

    elseif abs(fstp)-ftol <= 0 or abs(fstp)-frtol*(abs(fval)+eps) <= 0 then
      var.status = _C.NLOPT_FTOL_REACHED     ; return true
    end
  end

  if env.ncall > 1 then
    local x, h, xtol, xrtol, xtolf in var
    local ax, adx = var.x:abs(), var.h:abs()

    if xtolf and ((adx-xtol):max() <= 0 or (adx-xrtol*(ax+eps)):max() <= 0) then
      var.status = _C.NLOPT_XTOL_REACHED     ; return true

    elseif xrtol < eps and (adx-eps*(ax+eps)):max() <= 0 then
      var.status = _C.NLOPT_ROUNDOFF_LIMITED ; return true
    end
  end

  if var.maxcall > 0 and env.ncall >= var.maxcall then
    var.status = _C.NLOPT_MAXEVAL_REACHED    ; return true

  elseif var.maxtime > 0 and env.dtime >= var.maxtime then
    var.status = _C.NLOPT_MAXTIME_REACHED    ; return true
  end

  return false
end

-- helpers --------------------------------------------------------------------o

-- invalid variable domain
local function invalid_dom (env)
  local var = env.__var
  var.fval, var.fstp, var.ccnt = nan, nan, nan
end

-- update variables
local function update_vars (env)
  local variables in env
  local var = env.__var
  local x in var

  if variables.set ~= nil then
    variables.set(x, env)
  else
    var.flush = nil
    for i=1,x.nrow do variables[i].set(x[i], env) end
    if var.flush then jit.flush() end
  end
end

local function backup (src, dst, xtr_)
  dst.fval, dst.fstp, dst.ccnt =
  src.fval, src.fstp, src.ccnt

  dst.x  = src.x :copy(dst.x )
  dst.h  = src.h :copy(dst.h )
  dst.c  = src.c :copy(dst.c )
  dst.cn = src.cn:copy(dst.cn)

  if xtr_ then -- save gradient and jacobian
    dst.fgrd = src.fgrd:copy(dst.fgrd)
    dst.cjac = src.cjac:copy(dst.cjac)
  end

  return dst
end

-- optimizer functions --------------------------------------------------------o

-- compute objective function(s)
local function compute_fval (env)
  local command, equalities, inequalities in env
  local var, obj = env.__var, env.objective
  local m, n, p, q, x, c, cn, cjac, ctol, bst in var
  local fval = 0

  env.ncall = env.ncall + 1
  env.dtime = os.clock()-var.time0
  var.cres  = nil

  update_vars(env)                            -- update user variables

  if command ~= nil then
    var.cres = command(env)                   -- call user defined command
    if is_nil(var.cres) then return nil end   -- invalid domain
  end

  if obj.exec ~= nil then
    fval = obj.exec(x, var.fgrd)              -- call user defined function
    if is_nil(fval) then return nil end       -- invalid domain
  end

  if inequalities.exec ~= nil then
    inequalities.exec(x, c, cjac)             -- call user function
    c:copy(c,1+p)                             -- move data to the right place
    if cjac then cjac:copy(cjac,1+p*n) end
  else
    for i=1,q do c[p+i] = inequalities[i].expr(var.cres, env) end
  end

  if equalities.exec ~= nil then
    equalities.exec(x, c, cjac)               -- call user function
  else
    for i=1,p do c[i] = equalities[i].expr(var.cres, env) end
  end

  c:emul(var.cwgt, c)                         -- apply weights

  -- compute penalty function, count invalid constraints
  local cv = 0 ; cn:zeros()
  for i=1,p do
    if abs(c[i]) > ctol[i] then cn[i] = 1 end cv = cv+c[i]^2
  end
  if var.optf
  then for i=p+1,m do -- nlopt algorithms prefer to have full jacobian
    if c[i] > ctol[i] then cn[i] = 1               end cv = cv+c[i]^2 end
  else for i=p+1,m do -- mad algorithms prefer to have reduced jacobian
    if c[i] > ctol[i] then cn[i] = 1 else c[i] = 0 end cv = cv+c[i]^2 end
  end

  -- the objective is the penalty function
  if obj.exec == nil then fval = sqrt(cv)/var.fwgt end

  -- save current values
  var.fval, var.fstp, var.ccnt = fval, fval-var.fval, cn:sum() -- prv.fval better?

  -- backup best result according to selected strategy (bstra)
  local bakbst
  if (obj.bstra == 0 and var.fval < bst.fval) or
     (obj.bstra == 1 and var.ccnt <= bst.ccnt and var.fval < bst.fval) or
     (var.ccnt < bst.ccnt or var.ccnt == bst.ccnt and var.fval < bst.fval) then
    if env.debug >= 2 then io.write("best case updated\n") end
    backup(var, bst) ; bst.ncall = env.ncall
  end

  -- var: fval, fstp, ccnt, eval, lval, [fgrd, ejac, ljac]
  return fval
end

-- compute gradient and (in)equalities jacobians
local function compute_fgrd (env)
  local var, trc = env.__var, env.info >= 3

  if env.jacobian then
    local cres, fval, fgrd, cjac in var
    if is_nil(cres) then return nil end   -- invalid domain
    env.jacobian(cres, fgrd, cjac, env)
    return fval
  end

  local n, x, h, c, xstp, xslp, xmin, xmax, fval, fgrd, cjac, prv, bak in var
  local bro = env.objective.broyden and prv.c

  -- backup states
  backup(var, bak)

  -- estimate dh from last step or current point
  local hn = h:norm()
  local dh = 1e-4*hn
  if dh == 0 then dh = 1e-8*x:norm() end
  if dh == 0 then dh = 1e-10 end

  if trc then printf("nlopt: computing derivatives with dh=%-.8e\n", dh) end

  local Bc
  if bro then Bc = cjac + (c - prv.c - cjac*h)*h:t()/hn^2 end -- /hn better?

  -- compute jacobian
  for iv=1,n do
    if bro and h[iv] >= 0.8*hn then             -- Broyden's rank one update
      cjac:setcol(iv, Bc:getcol(iv))
      if trc then printf("nlopt: Broyden's update for variable %d\n", iv) end
    else                                        -- finite difference required
      if xstp[iv] ~= 0 then dh = xstp[iv] end
      x[iv] = x[iv]+dh ; var.fval = fval
      if dh*xslp[iv] < 0 or x[iv] < xmin[iv] or x[iv] > xmax[iv] then
        x[iv], dh = x[iv]-2*dh, -dh   -- take -dh if slope or bbox are violated
      end

      local dfval = compute_fval(env)
      if is_nil(dfval) then fval = nil ; break end

      fgrd[iv] = (dfval-fval)/dh
      cjac:setcol(iv, (c - bak.c)/dh)

      x[iv] = bak.x[iv]
    end
  end

  -- restore states
  backup(bak, var)
  update_vars(env)

  -- save current state for next call
  backup(var, prv)

  -- return fval, fgrd, cjac
  return fval
end

-- functions factory
local function opt_fun (env)
  local var = env.__var

  -- objective function
  local fun = function ()
    -- compute objective function and (in)equalities constraints
    local fval = not var.funf and var.fval or compute_fval(env)
    -- compute function gradient and (in)equalities jacobian
    if fval ~= nil and var.grdf then fval = compute_fgrd(env) end
    -- check returned value
    if fval == nil then invalid_dom(env) end

    -- some debug display
    if env.debug >= 2 and fval then
      printf("fval=%-.16e\n", fval)
      printf("ccnt=%d\n", var.ccnt)
      dspmat(var.x   , "X"    )
      dspmat(var.c   , "C"    )
      if var.fgrd then dspmat(var.fgrd, "F-GRD") end
      if var.cjac then dspmat(var.cjac, "C-JAC") end
    end

    -- display intermediate summary (no if jacobian only)
    if env.info >= 2 and fval and var.funf then disp_summ(env) end

    -- return objective function value
    return var.fval
  end

  -- (in)equality functions (nothing to do)
  local efun = var.method.eq == 'y' and var.p>0 and \ () or nil
  local lfun = var.method.le == 'y' and var.q>0 and \ () or nil

  return fun, efun, lfun -- objective, equalities and inequalities functions
end

-- match command --------------------------------------------------------------o

local function exec (self)
  local variables, equalities, inequalities, weights, objective in self
  local command  = self:var_get 'command'  -- prevent evaluation
  local jacobian = self:var_get 'jacobian' -- prevent evaluation
  local cmdexec  = command           or fnil
  local jacexec  = jacobian          or fnil
  local objexec  = objective.exec    or fnil
  local equexec  = equalities.exec   or fnil
  local inqexec  = inequalities.exec or fnil

  -- check inputs
  assert(is_mappable(variables)   , "invalid match 'variables' (mappable expected)")
  assert(is_mappable(equalities)  , "invalid match 'equalities' (mappable expected)")
  assert(is_mappable(inequalities), "invalid match 'inequalities' (mappable expected)")
  assert(is_mappable(weights)     , "invalid match 'weights' (mappable expected)")
  assert(is_mappable(objective)   , "invalid match 'objective' (mappable expected)")
  assert(is_callable(cmdexec)     , "invalid match 'command' (callable expected)")
  assert(is_callable(jacexec)     , "invalid match 'jacobian' (callable expected)")
  assert(is_callable(objexec)     , "invalid objective function (callable expected)")
  assert(is_callable(equexec)     , "invalid equality function (callable expected)")
  assert(is_callable(inqexec)     , "invalid inequality function (callable expected)")

  -- check selected method (and submethod)
  local mthd = objective.method or objective.exe and 'LN_COBYLA' or 'LD_JACOBIAN'
  local mopt = assertf(optalgo[mthd], "unknown optimisation method '%s'", mthd)
  local sopt = nil

  if mopt.lo == 'y' then
    local smthd = objective.submethod or 'LN_COBYLA'
    sopt = assertf(optalgo[smthd], "unknown optimisation submethod '%s'", smthd)
  end

  -- check info and debug level
  local info, debug in self
  local ninf = assertf(log2num(info  or 0), "invalid info '%s'" , tostring(info ))
  local ndbg = assertf(log2num(debug or 0), "invalid debug '%s'", tostring(debug))

  -- gradient (and jacobians) computation (explicitly) needed
  local grdm = mopt.gr == 'y' or mopt.gr == '?' and sopt.gr == 'y'
  local exef = equalities.exec or inequalities.exec or objective.exec
  local grdf = false
  if grdm then
    if objective.grad == nil then grdf = not exef else grdf = objective.grad end
  end

  -- local sizes
  local n =    variables.nvar or #variables
  local p =   equalities.nequ or #equalities
  local q = inequalities.nequ or #inequalities
  local m = p+q

  -- check sizes compatiblity
  assert(n > 0, "invalid objective (variables expected)")

  -- matching environment
  local env = {
    ncall        = 0,           -- current number of call
    dtime        = 0,           -- current elapsed time
    info         = ninf,        -- info  level, can be changed during iterations
    debug        = ndbg,        -- debug level, can be changed during iterations
    stop         = false,       -- forced stop
    command      = command,
    jacobian     = jacobian,
    objective    = objective,
    variables    = variables,
    equalities   = equalities,
    inequalities = inequalities,
    weights      = weights,
    usrdef       = self.usrdef,

    __var = { -- hidden variables
      m     = m,                          -- number of constraints
      n     = n,                          -- number of variables
      p     = p,                          -- number of equalities
      q     = q,                          -- number of inequalities

      x     = vector(n),                  -- variables values
      h     = vector(n),                  -- variables steps
      x0    = vector(n),                  -- variables initial values
      xstp  = vector(n),                  -- variables initial steps
      xslp  = vector(n),                  -- variables slopes
      xmin  = vector(n),                  -- variables minimum bounds
      xmax  = vector(n),                  -- variables maximum bounds
      xtol  = vector(n),                  -- variables tolerances
      xrtol = variables.rtol or eps,      -- variables relative tolerance
      xtolf = false,                      -- variables tolerance flag
      xadj  = {n=0, cur={n=0}},           -- variables adjusted (index)
      xrej  = {n=0, cur={n=0}},           -- variables rejected (index)

      c     = vector(m),                  -- constraints values
      cn    = vector(m),                  -- constraints validity (failed: ~=0)
      cwgt  = vector(m),                  -- constraints weights
      ctol  = vector(m),                  -- constraints tolerances
      cjac  = grdm and matrix(m,n) or nil,-- constraints jacobian
      ccnt  = inf,                        -- constraints violated count
      crej  = {n=0, cur={n=0}},           -- constraints rejected (index)
      edsp  = equalities.disp ~= false,   -- constraints display (e.g. data fit)

      funf  = true,                       -- objective func compute func flag
      grdf  = grdf,                       -- objective func compute grad flag
      optf  = nil,                        -- objective func optimiser flag (reduce)
      fval  = inf,                        -- objective func value (dummy init)
      fstp  = 0,                          -- objective func current step
      fwgt  = 0,                          -- objective func weights norm
      fgrd  = grdm and vector(n) or nil,  -- objective func gradient
      fmin  = objective.fmin or nil,      -- objective func minimum (target)
      ftol  = objective.tol  or 0,        -- objective func tolerance (target)
      frtol = objective.rtol or 0,        -- objective func relative tolerance (target)

      fun   = nil,                        -- objective function (see above)
      efun  = nil,                        -- equalities function (see above)
      lfun  = nil,                        -- inequalities function (see above)

      bst = {fval=inf,ccnt=inf,ncall=0},  -- state best
      prv = {fval=inf,ccnt=inf},          -- state previous
      bak = {fval=inf,ccnt=inf},          -- state backup (e.g. jacobian, bisec)

      method  = mopt,                     -- algorithm method (optalgo row)
      submthd = sopt,                     -- algorithm submethod (optalgo row)
      status  = _C.NLOPT_RUNNING,         -- algorithm status
      errmsg  = nil,                      -- algorithm error message
      jitf    = false,                    -- JIT must be flushed (C API)
      scope   = {},                       -- local variables scope level

      maxcall = self.maxcall or 0,        -- call limit
      maxtime = self.maxtime or 0,        -- time limit

      backup  = backup,                   -- backup routine to save/rollback
      chkstp  = chkstp,                   -- stopping criteria check
      time0   = os.clock(),               -- start time
    },
  }

  local var = env.__var

  -- create variables getter/setters (if needed)
  if is_nil(variables.get) and is_nil(variables.set) then
    accessors(env)
  else
    assert(is_callable(variables.get) and is_callable(variables.set),
           "invalid variables get and/or set (callables expected)")
    variables.get(var.x0, env)
  end

  -- state variables
  for i=1,n do
    local v = variables[i] or {}
    if v.get then var.x0[i] = v.get(env) end
    var.x   [i] = var.x0[i]
    var.xstp[i] = v.step   or variables.step  or 0
    var.xslp[i] = v.slope  or variables.slope or 0
    var.xtol[i] = v.tol    or variables.tol   or 0
    var.xmin[i] = v.min    or variables.min   or -inf
    var.xmax[i] = v.max    or variables.max   or  inf

    if var.xmin[i] > var.xmax[i] then
      var.xmin[i], var.xmax[i] = var.xmax[i], var.xmin[i]
    end
    if v.sign or variables.sign then
          if var.x[i] > 0 and var.xmin[i] < 0 then var.xmin[i] = 0
      elseif var.x[i] < 0 and var.xmax[i] > 0 then var.xmax[i] = 0 end
    end
    if var.x[i] < var.xmin[i] or var.x[i] > var.xmax[i] then
      warn("invalid initial value %d (out of bounds)", i)
    end
  end

  -- xtol and xrtol flag
  var.xtolf = max(var.xrtol, var.xtol:max()) > 0

  -- equality constraints
  for i=1,p do
    local e = equalities[i] or {}
    var.cwgt[i] = abs(e.weight or weights[e.kind] or expr_weights[e.kind] or 1)
    var.ctol[i] = abs(e.tol or equalities.tol or mintol) * var.cwgt[i]
  end

  -- inequality constraints
  for i=p+1,m do
    local e = inequalities[i-p] or {}
    var.cwgt[i] = abs(e.weight or weights[e.kind] or expr_weights[e.kind] or 1)
    var.ctol[i] = (e.tol or inequalities.tol or mintol) * var.cwgt[i]
  end

  -- constraint weights
  var.fwgt = var.cwgt:norm()

  -- adjust fmin
  if var.fmin == nil then var.fmin = var.ctol:norm()/var.fwgt end

  -- build optimizer functions
  var.fun, var.efun, var.lfun = opt_fun(env)

  -- set flags about algorithms used
  var.optf = var.method.id < _C.NLOPT_NUM_ALGORITHMS or inequalities.exec

  -- call optimiser
  local status, errmsg
  if var.method.id < _C.NLOPT_NUM_ALGORITHMS
  then status, errmsg = nloptrun(env)
  else status, errmsg = lsoptrun(env)
  end

  -- backup reset flag and status string
  local reset in objective

  -- display error or final summary
  if status == false then
    reset = true
    warn("error '%s' occured during matching", errmsg or '?')
  else
    -- restore best case
    backup(var.bst, var)
    -- display final summary
    if env.info >= 1 then disp_summ(env) end
    -- update variables
    if reset ~= true then update_vars(env) end
  end

  -- reset variables to initial values
  if reset == true then
    var.x0:copy(var.x) ; update_vars(env)
  end

  -- return status, fmin, ncall
  return retstr[var.status], var.fval, env.ncall
end

local match = command 'match' {
  -- command to execute at each iteration (i.e. cres = command(env))
  command = nil,
  -- command to fill "explicitly" the jacobian (i.e. jac = jacobian(cres, env))
  jacobian = nil,
  -- state variables
  variables = {
  ! { var=nil, step=nil, min=nil, max=nil, sign=nil, slope=nil, tol=nil, name=nil, get=nil, set=nil },
     nvar=nil, step=nil, min=nil, max=nil, sign=nil, slope=nil, tol=nil, rtol=nil, get=nil, set=nil,
     nowarn=nil,
  },
  -- equalities constraints (i.e. val = expr(cres, env))
  equalities = {
  ! {expr=nil, name=nil, kind=nil, weight=nil, tol=nil},
     exec=nil, nequ=nil, disp=nil,             tol=nil,
  },
  -- inequalities constraints (i.e. val = expr(cres, env))
  inequalities = {
  ! {expr=nil, name=nil, kind=nil, weight=nil, tol=nil},
     exec=nil, nequ=nil,                       tol=nil,
  },
  -- constraints weights by kinds (i.e. weights[kind])
  weights = {},
  -- objective to minimize or maximize
  objective = {
    method=nil, submethod=nil, fmin=nil, tol=nil, rtol=nil,
    exec=nil, grad=nil, reset=nil, bstra=nil, broyden=nil,
    -- jacobian and lmdif only
    bisec=nil, rcond=nil, jtol=nil, jiter=nil, jstra=nil, jrand=nil
  },

  maxcall=nil,          -- call limit
  maxtime=nil,          -- time limit

  info=nil,             -- information level (output on terminal)
  debug=nil,            -- debug information level (output on terminal)

  usrdef=nil,           -- user defined data attached to matching environment

  exec=exec,            -- command to execute upon children creation
} :set_readonly()       -- reference match command is readonly

-- end ------------------------------------------------------------------------o
return { match = match }
