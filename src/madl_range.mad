--[=[
 o-----------------------------------------------------------------------------o
 |
 | Range module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provides full set of functions and operations on ranges and logranges.

 o-----------------------------------------------------------------------------o
]=]

local M, Mlog = {}, {}

-- locals ---------------------------------------------------------------------o

local ffi = require 'ffi'
local istype                                                in ffi
local abs, ceil, floor, modf, log, exp, eps, huge, inf, nan in math

local tostring                                              in MAD
local is_nil, is_nan, is_number, is_finite, is_positive     in MAD.typeid
local sign                                                  in MAD.gmath

-- constants

local exp_1, epsilon = exp(1), 1e-12

-- constructors ---------------------------------------------------------------o

local    range_ctor = ffi.typeof 'xrange'
local logrange_ctor = ffi.typeof 'struct { const double logstart,logstop,logstep; }'

local is_range    = \a -> istype(   range_ctor, a)
local is_logrange = \a -> istype(logrange_ctor, a)

-- implementation -------------------------------------------------------------o

-- helpers

--[[
  Motivation to forbid ±inf in constructors:
  - value would return NaN if
      step  == 0    and x     == ±inf  (valid)
      step  == ±inf and x     == 0     (forbid)
    x*step  == ±inf and start == ∓inf  (forbid)
  - size would return NaN if
      step  == 0    and stop  == start (guard)
      start == ±inf and stop  == start (forbid)
  - step would return NaN if
      size  == 1    and stop  == start (guard)
      start == ±inf and stop  == start (forbid)
]]--

local function value (start, step, x)
  return start + step*x
end

local function size (start, stop, step)
  if step == 0 then return inf end
  local size = floor( (stop-start) / step + 1 )
  return size < 0 and 0 or size
end

local function last (start, stop, step)
  if step == 0 then return start end
  local size = size(start, stop, step)
  if size >= 1 then
    return size < inf and value(start, step, size-1) or stop
  end
end

local function step (start, stop, size)
  local diff = stop-start
  if size >  1 then return diff / (size-1) end
  if size == 1 then return huge * sign(diff) end
  return nan -- empty range
end

local function stepeq (step1, step2)
  return step1 == step2 or abs(step1/step2 - 1) < epsilon
end

local function bounds (start, stop, step)
  local last = last(start, stop, step)
  if not is_nil(last) then
    if step >= 0
    then return start, last ,  step
    else return last , start, -step
    end
  end
end

local function is_empty (start, stop, step)
  return not (step >= 0 and start <= stop or
              step <= 0 and start >= stop or false)
end

--[[
  Motivation to adjust step in constructors:
    Step is adjusted if the computed size is close to an integer by ±1e-12.
    Then the following properties should hold even for rational numbers:
    - size  (start, stop , step_  ) == size_
    - step  (start, stop , size_  ) == step_
    - value (start, step_, size_-1) == stop
    The maximum adjustment is step = step * (1-eps)^2, beyond this value it is
    the user reponsibility to provide better inputs.
]]--

local function adjust (start, stop, step_, size_)
  if not is_nil(size_) then -- step from size
    step_ = step(start, stop, size_)
  elseif step_ == 0 then    -- no adjustment
    return start, stop, step_
  else                      -- size from step
    local frac
    size_, frac = modf( (stop-start) / step_ + 1 )
    if frac > 1-epsilon then
      size_ = size_ + 1
    end                     -- adjust step from size
    if size_ > 1 and (frac > 0 and frac < epsilon or frac > 1-epsilon) then
      step_ = step(start, stop, size_)
    end
  end
  if size_ > 1 then
    if size_ > size(start, stop, step_) then
      step_ = step_ - step_*eps
    end
    local last = last(start, stop, step_)
    if step_ > 0 and last > stop or step_ < 0 and last < stop then
      step_ = step_ - step_*eps
    end
  end
  return start, stop, step_
end

-- constructors

local function range (start, stop_, step_)
  assert(is_finite(start), "invalid argument #1 (finite number expected)")
  if is_nil(stop_) then start, stop_ = 1, start end
  assert(is_finite(stop_), "invalid argument #2 (finite number expected)")
  if is_nil(step_) then step_ = 1 end -- hardcoded in xrange, do not change!
  assert(is_finite(step_) and (step_ ~= 0 or start == stop_),
                           "invalid argument #3 (finite number expected)")
  return range_ctor(adjust(start, stop_, step_))
end

local function logrange (start, stop_, step_)
  assert(is_positive(start) and start < inf, "invalid argument #1 (positive finite number expected)")
  if is_nil(stop_) then start, stop_ = 1, start end
  assert(is_positive(stop_) and stop_ < inf, "invalid argument #2 (positive finite number expected)")
  if is_nil(step_) then step_ = exp_1 end
  assert(is_positive(step_) and step_ < inf and step_ ~= 1,
                                             "invalid argument #3 (positive finite number ~= 1 expected)")
  return logrange_ctor(adjust(log(start), log(stop_), log(step_)))
end

-- alternate constructors with size = #points

local function nrange (start, stop_, size_)
  assert(is_finite(start)  , "invalid argument #1 (finite number expected)")
  if is_nil(stop_) then start, stop_ = 1, start end
  assert(is_finite(stop_)  , "invalid argument #2 (finite number expected)")
  if is_nil(size_) then size_ = 100 end
  assert(is_positive(size_), "invalid argument #3 (positive number expected)")
  return range_ctor(adjust(start, stop_, nil, ceil(size_)))
end

local function nlogrange (start, stop_, size_)
  assert(is_positive(start) and start < inf, "invalid argument #1 (positive finite number expected)")
  if is_nil(stop_) then start, stop_ = 1, start end
  assert(is_positive(stop_) and stop_ < inf, "invalid argument #2 (positive finite number expected)")
  if is_nil(size_) then size_ = 100 end
  assert(is_positive(size_),                 "invalid argument #3 (positive number expected)" )
  return logrange_ctor(adjust(log(start), log(stop_), nil, ceil(size_)))
end

-- methods

M.same        = \r -> r
Mlog.same     = \r -> r

M   .value    = \r,x ->     value(r.   start, r.   step, x)
Mlog.value    = \r,x -> exp(value(r.logstart, r.logstep, x))

M   .size     = \r -> size(r.   start, r.   stop, r.   step)
Mlog.size     = \r -> size(r.logstart, r.logstop, r.logstep)

M   .is_empty = \r -> is_empty(r.   start, r.   stop, r.   step)
Mlog.is_empty = \r -> is_empty(r.logstart, r.logstop, r.logstep)

M   .reverse  = \r -> range   (    r.   stop ,     r.   start ,     -r.   step )
Mlog.reverse  = \r -> logrange(exp(r.logstop), exp(r.logstart), exp(-r.logstep))

function M.get (r, x)
  local v = value(r.start, r.step, x)
  if x >= 0 and not is_empty(v, r.stop, r.step) then
    return v
  end
  return nil
end

function Mlog.get (r, x)
  local v = value(r.logstart, r.logstep, x)
  if x >= 0 and not is_empty(v, r.logstop, r.logstep) then
    return exp(v)
  end
  return nil
end

function M.last(r)
  return last(r.start, r.stop, r.step)
end

function Mlog.last(r)
  local lst = last(r.logstart, r.logstop, r.logstep)
  return lst and exp(lst)
end

-- iterators

local function iterincr (r, i)
  local v = value(r.start, r.step, i)
  if v <= r.stop then return i+1, v end
end

local function iterdecr (r, i)
  local v = value(r.start, r.step, i)
  if v >= r.stop then return i+1, v end
end

local function iterincrlog (r, i)
  local v = value(r.logstart, r.logstep, i)
  if v <= r.logstop then return i+1, exp(v) end
end

local function iterdecrlog (r, i)
  local v = value(r.logstart, r.logstep, i)
  if v >= r.logstop then return i+1, exp(v) end
end

-- metamethods

function M.__index (r, a)
  if is_number(a) then return r:get(a-1) else return M[a] end
end

function Mlog.__index (r, a)
  if is_number(a) then return r:get(a-1) else return Mlog[a] end
end

function M.__ipairs (r)
  if r.step >= 0
  then return iterincr, r, 0
  else return iterdecr, r, 0 end
end

function Mlog.__ipairs (r)
  if r.logstep >= 0
  then return iterincrlog, r, 0
  else return iterdecrlog, r, 0 end
end

function M.__eq (r1, r2)
  return is_range(r1) and is_range(r2) and r1.start == r2.start and
         r1.stop == r2.stop and stepeq(r1.step, r2.step)
end

function Mlog.__eq (r1, r2)
  return is_logrange(r1) and is_logrange(r2) and r1.logstart == r2.logstart and
         r1.logstop == r2.logstop and stepeq(r1.logstep, r2.logstep)
end

M   .__len   = M   .size
Mlog.__len   = Mlog.size

M   .__unm   = M   .reverse
Mlog.__unm   = Mlog.reverse

M   .__newindex = \_,k => error("invalid range member '"..tostring(k).."'") end
Mlog.__newindex = \_,k => error("invalid logrange member '"..tostring(k).."'") end

-- iterators

M   .iter = \r -> ipairs(r)
Mlog.iter = \r -> ipairs(r)

-- fields and intervals

M   .ranges = \r -> (    r.start    ,     r.stop    ,     r.step    )
Mlog.ranges = \r -> (exp(r.logstart), exp(r.logstop), exp(r.logstep))

M   .bounds = \r -> bounds(r.start, r.stop, r.step)

function Mlog.bounds (r)
  local start, stop, step = bounds(r.logstart, r.logstop, r.logstep)
  if is_nil(start) then return nil end
  return exp(start), exp(stop), exp(step)
end

function M.overlap (r, s)
  assert(is_range(s), "invalid argument #2 (range expected)")
  local rl, rh = bounds(r.start, r.stop, r.step)
  local sl, sh = bounds(s.start, s.stop, s.step)
  return not (is_nil(rl) or is_nil(sl) or rh < sl or rl > sh)
end

function Mlog.overlap (r, s)
  assert(is_logrange(s), "invalid argument #2 (logrange expected)")
  local rl, rh = bounds(r.logstart, r.logstop, r.logstep)
  local sl, sh = bounds(s.logstart, s.logstop, s.logstep)
  return not (is_nil(rl) or is_nil(sl) or rh < sl or rl > sh)
end

-- conversion

-- from raw range to raw logrange, convert default step
M.log = \r -> logrange_ctor(log(r.start), log(r.stop), r.step ~= 1 and log(r.step) or 1)

function M.__totable (r)
  local s = r:size()
  local t = table.new(s,0)
  for i=1,s do t[i] = r:value(i-1) end
  return t
end
Mlog.__totable = M.__totable

function M.__tostring (r)
  if r.step == 1 then
    return string.format("%s..%s", tostring(r.start), tostring(r.stop))
  else
    return string.format("%s..%s..%s", tostring(r.start), tostring(r.stop),
                         tostring(r.step))
  end
end

function Mlog.__tostring (r)
  if r.logstep == 1
  then return string.format("%g..%g", tostring(exp(r.logstart)),
                            tostring(exp(r.logstop)))
  else return string.format("%g..%g..%g", tostring(exp(r.logstart)),
                            tostring(exp(r.logstop)), tostring(exp(r.logstep)))
  end
end

-- help
M   .__help = require 'madh_range'
Mlog.__help = require 'madh_range'
MAD.utility.defhelp(M   , 'range'   )
MAD.utility.defhelp(Mlog, 'logrange')

-- metatable
ffi.metatype(   range_ctor, M   )
ffi.metatype(logrange_ctor, Mlog)

-- type identification
MAD.typeid.is_range    = is_range
MAD.typeid.is_logrange = is_logrange

-- end ------------------------------------------------------------------------o
return {
  -- constructors
  range       = range,
  logrange    = logrange,
  nrange      = nrange,
  nlogrange   = nlogrange,
  __help      = M.__help,    -- shared with Mlog
}
