--[=[
 o-----------------------------------------------------------------------------o
 |
 | Synchrotron Radiation module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide routines for synchrotron radiation, adapted from MAD-X.

  References:
  - A. Latina, Review of Synchrotron Radiation Effects in MAD-X.
  - H. Burkhardt, CERN CLIC-Note-709 of 08-06-2007 for routine InvSynFracInt.

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- locals ---------------------------------------------------------------------o

local _C, warn                   in MAD
local hypot, rand, randp         in MAD.gmath
local is_damap                   in MAD.typeid
local printf                     in MAD.utility
local eps, minang, hbar, clight  in MAD.constant

local abs, sqrt in math

local getmetatable = getmetatable

-- tracking photons -----------------------------------------------------------o

local function track_photon (elm, m, i, ph_fac, beam)
  local clw, spos, ds in m
  -- take care of mflw wrappers (e.g. __edat and __sdat in track)
  m = assert(getmetatable(m).__index, "corrupted mflow wrapper (unexpected)")

  local x, px, y, py in m[i]

  if is_damap(m[i]) then
    x, px, y, py = x:get0(), px:get0(), y:get0(), py:get0()
  end

  local s   = spos+ds*clw
  local nrj = ph_fac*(beam.energy + pt*beam.pc)
  local phb = MAD.beam { particle="photon", energy=nrj }
  local a   = beam.pc/phb.pc
  local ph  = {x=x, px=a*px, y=y, py=a*py, t=0, pt=0, s0=s, beam=phb, id=#m+1,
               status='Xset'}

  if m.info >= 2 then
    printf("photon: emitting #%d in %s at %.3f m for turn #%d\n",
                           ph.id, elm.name, s,         m.turn)
    printf("photon: x=% -.2e, px=% -.2e, y=% -.2e, py=% -.2e\n",
                        ph.x,     ph.px,     ph.y,     ph.py)
  end

  m.npar, m.tpar, m.nphot = m.npar+1, m.tpar+1, m.nphot+1
  table.insert(m, m.npar, ph)
end

-- synchrotron radiation ------------------------------------------------------o

-- backup initial px, py

function M.srad_save (elm, m, lw, islc)
--print("srad_save", elm.name, elm.l, lw, islc)
  for i=1,m.npar do
    local beam in m[i]
    if beam and beam.charge == 0 then goto continue end
    local px, py, pt in m[i]
    if is_damap(m[i]) then px, py = px:get0(), py:get0() end
    m[i].px0, m[i].py0 = px, py
    ::continue::
  end
  m.pclw = 0
end

-- damping synchrotron radiation, backup px, py

function M.srad_damp_ng (elm, m, lw, islc)
--print("srad_damp", elm.name, elm.l, lw, islc, m.clw)
  local eh, sdir, info in m
  local elw = (m.clw-m.pclw) * elm.lrad
  local aelw = abs(elw)
  m.pclw = m.clw

  for i=1,m.npar do
    local beam in m[i]
    if beam and beam.charge == 0 then goto continue end
    local x, px, py, pt, px0, py0 in m[i]
    if is_damap(m[i]) then px, py, pt = px:get0(), py:get0(), pt:get0() end

    local  dpx  = px-px0 + elw*eh
    local  dpy  = py-py0
    local  kck2 = dpx^2+dpy^2


    if kck2 > 0 then
      local  beam = beam or m.beam
      local _bet0 = 1/beam.beta
      local  dpp1 = sqrt(1 + (2*_bet0)*pt + pt^2)
      local _beta = (_bet0+pt) / dpp1
      local  rfac = 2/3 * beam.emrad * (dpp1*beam.betgam)^3 * kck2 / aelw

--[[
 rfac = (hx**2 + hy**2) * (length / two * (one + h*x) - tan(e1)*x)
 rfac =      kck2        /       aelw
--]]

      local  damp = sqrt(1 + rfac*(rfac-2)*_beta^2)

      if sdir < 0 then damp, rfac = 1/damp, -rfac end

      -- scalar or tpsa
      m[i].px, px = m[i].px*damp , px*damp
      m[i].py, py = m[i].py*damp , py*damp
      m[i].pt     = m[i].pt*(1-rfac) - rfac*_bet0

--print("npar=", i, "kck2=", kck2, "elw=", elw, "rfac=", rfac, "px=", px, "px0=", px0)

      if info >= 2 and rfac ~= 0 then
        printf("synrad: particle #%d lost %.2e GeV in slice %d of %s (rfac=%.16e)\n",
               m[i].id, rfac*beam.energy, islc, elm.name, rfac)
      end
    end

    -- backup
    m[i].px0, m[i].py0 = px, py

    ::continue::
  end
end

function M.srad_damp (elm, m, lw, islc)
--print("srad_damp", elm.name, elm.l, lw, islc, m.clw)
  local eh, sdir, info in m
  local elw = (m.clw-m.pclw) * elm.lrad
  local aelw = abs(elw)
  m.pclw = m.clw

  for i=1,m.npar do
    local beam in m[i]
    if beam and beam.charge == 0 then goto continue end
    local x, px, py, pt, px0, py0 in m[i]
    if is_damap(m[i]) then px, py, pt = px:get0(), py:get0(), pt:get0() end

    local  dpx  = px-px0 + elw*eh
    local  dpy  = py-py0
    local  kck2 = dpx^2+dpy^2

    if kck2 > 0 then
      local  beam = beam or m.beam
      local _bet0 = 1/beam.beta
      local  dpp1 = sqrt(1 + (2*_bet0)*pt + pt^2)
      local _beta = (_bet0+pt) / dpp1
      local  rfac = 2/3 * beam.emrad * (dpp1*beam.betgam)^3 * kck2 / aelw

--[[
 rfac = (hx**2 + hy**2) * (length / two * (one + h*x) - tan(e1)*x)
 rfac =      kck2        /       aelw
--]]

      local  damp = sqrt(1 + rfac*(rfac-2)*_beta^2)

      if sdir < 0 then damp, rfac = 1/damp, -rfac end

      -- scalar or tpsa
      m[i].px, px = m[i].px*damp , px*damp
      m[i].py, py = m[i].py*damp , py*damp
      m[i].pt     = m[i].pt*(1-rfac) - rfac*_bet0

--print("npar=", i, "kck2=", kck2, "elw=", elw, "rfac=", rfac, "px=", px, "px0=", px0)

      if info >= 2 and rfac ~= 0 then
        printf("synrad: particle #%d lost %.2e GeV in slice %d of %s (rfac=%.16e)\n",
               m[i].id, rfac*beam.energy, islc, elm.name, rfac)
      end
    end

    -- backup
    m[i].px0, m[i].py0 = px, py

    ::continue::
  end
end

-- quantum synchrotron radiation, backup px, py

local kcrit = 1.5*hbar*clight

function M.srad_quant (elm, m, lw, islc)
--print("srad_quant", elm.name, elm.l, lw, islc)
  local eh, sdir, radiate, info in m
  local elw = islc>0 and lw*elm.lrad or m.clw-m.pclw
  local aelw = abs(elw)
  m.pclw = m.clw

  for i=1,m.npar do
    local beam in m[i]
    if beam and beam.charge == 0 then goto continue end
    local px, py, pt, px0, py0 in m[i]
    if is_damap(m[i]) then
      px, py, pt = px:get0(), py:get0(), pt:get0()
    end

    local dpx = px-px0 + elw*eh
    local dpy = py-py0
    local kck = hypot(dpx, dpy)

    if kck > 0 then
      local  beam = beam or m.beam
      local  bet0 = beam.beta
      local _bet0 = 1/bet0
      local  dpp1 = sqrt(1 + (2*_bet0)*pt + pt^2)
      local _beta = (_bet0 + pt) / dpp1
      local  gama = (bet0*pt + 1)*beam.gamma
      local ucrit = kcrit * gama^2/beam.mass * kck / aelw
      local aphot = beam.aphot * dpp1 * kck
      local nphot = randp(aphot)
      local  rfac = 0

      for i=1,nphot do
        local ph_val = _C.mad_rad_InvSynFracInt(rand())
        local ph_fac = ph_val*ucrit
        rfac = rfac + ph_fac

        if radiate == "photon" and abs(ph_fac) >= 1e-12 then
          track_photon(elm, m, i, ph_fac, beam)
        end
      end

      local damp = sqrt(1 + rfac*(rfac-2)*_beta^2)

      if sdir < 0 then damp, rfac = 1/damp, -rfac end

      if info >= 2 and rfac ~= 0 or nphot > 2 then
        printf("synrad: particle #%d lost %.4e GeV [%d photons] in slice %d of %s (pt=%.5e)\n",
                m[i].id, rfac*beam.energy, nphot, islc, elm.name, pt)
        if nphot > 5 then
          warn(">5 photons emitted, synch. radiat. too high at x=%.2e, y=%.2e", x, y)
        elseif nphot > 2 then
          warn(">2 photons emitted, thinner slicing strongly recommended")
        end
      end

      -- scalar or tpsa
      m[i].px, px = m[i].px*damp , px*damp
      m[i].py, py = m[i].py*damp , py*damp
      m[i].pt     = m[i].pt*(1-rfac) - rfac*_bet0
    end

    -- backup
    m[i].px0, m[i].py0 = px, py

    ::continue::
  end
end

-- end ------------------------------------------------------------------------o
return { synrad = M }
