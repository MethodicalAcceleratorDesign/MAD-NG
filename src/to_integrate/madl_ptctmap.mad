--[=[
 o-----------------------------------------------------------------------------o
 |
 | PTC-t Track module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
            I. Shreyber, irina.tecker at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

local M = { __help = {} }

-- help -----------------------------------------------------------------------o

M.__help.self = [=[
NAME
  track -- track

SYNOPSIS
  TODO

DESCRIPTION
  The module track provides...

RETURN VALUES
  The track command

SEE ALSO
  element, sequence, survey
]=]

M.__help['References Track'] = [=[
[1] A. Wolski,  "Beam Dynamics in High Energy Particle Accelerators".
[2] E. Forest,  "Beam Dynamics, A New Attitude and Framework".
[3] E. Forest,  "Introduction to Polymorphic Tracking Code", KEK report 2002-3.
[4] H. Yoshida, "Construction of higher order symplectic integrators ",
    Phys.Let A, Volume 150, number 5,6,7
]=]

--[[
MAD-NG: DKD always where D and K are functions!
  Angle ~= 0 : D=DRIFT(TEAPOT)=SPROT i.e. SBEND
  -> K0 ~= 0 : K=SKICK= ?multipole (+Malte)
  -> K0 == 0 : K=SKICK??

  Angle == 0 : i.e. RBEND and QUAD
  -> K0 ~= 0, K1 == 0 : D=DRIFT(STREX), K=KICKEXR
  -> K0 ~= 0, K1 ~= 0 : D=DRIFT(STREX), K=KICKEXR (or SPARR? or Andy's M)
  -> K0 == 0, K1 == 0 : D=DRIFT(STREX), K=KICKEXR
  -> K0 == 0, K1 ~= 0 : D=DRIFT(TKTF)=KICKPATHR (MatrixQuad)
                        K=KICKTKT7R(TKTF) + PUSHTKT7R(TKTF)
]]

--[[
PTC: Which element uses what?
TYPE     : ELEMENT in a_def_element_fibre_layout.inc
DISPATCH : TRACKR  in Si_def_element.f90
INTERFACE: TRACK   in Sh_def_kind.f90  (see below)

INTERFACE TRACK
  PROCEDURE:      TYPE:              POINTER:
  DRIFT_INTER     EL:DRIFT1          EL%D0      ! DRIFT
  SYMPINTR        EL:DKD2            EL%K2      ! INTEGRATOR
  KICKTR          EL:KICKT3          EL%K3      ! THIN KICK
  CAVER           EL:CAV4            EL%C4      ! CAVITY THICK/THIN
  SYMPINTSOLR     EL:SOL5            EL%S5      ! SOLENOID
  SYMPINTKTKR     EL:KTK             EL%T6      ! SLOW THICK ELEMENT (SIXTRACK)
  SYMPINTTKT7R    EL:TKTF            EL%T7      ! FAST THICK ELEMENT
  PUSH_NSMI_R     EL:NSMI            EL%S8      ! THE THIN NORMAL SMI (SIXTRACK)
  PUSH_SSMI_R     EL:SSMI            EL%S9      ! THE THIN SKEW SMI (SIXTRACK)
  SSYMPINTR       EL:TEAPOT          EL%TP10    ! SECTOR (TEAPOT)
  MONTR           EL:MON             EL%MON14   ! MONITOR AND INSTRUMENT
  SYMPSEPR        EL:ESEPTUM         EL%SEP15   ! ELECTROSTATIC SEPTUM
  SYMPINTEXR      EL:STREX           EL%K16     ! EXACT STRAIGHT INTEGRATOR
  ?? not used     EL:ENGE            EL%ENGE17  ! SOLENOID (SIXTRACK)
  RCOLLIMATORR    EL:RCOL            EL%RCOL18  ! COLLIMATORS
  ECOLLIMATORR    EL:ECOL            EL%ECOL19  ! COLLIMATORS
  CAVER_TRAV      EL:CAV_TRAV        EL%CAV21   ! CAVITY TRAVELLING WAVE
  INTR_HE_TOT     EL:HELICAL_DIPOLE  EL%HE22    ! HELICAL_DIPOLE
                  EL:SAGAN           EL%WI      ! WIGGLER (USER DEFINED ELEMENT in Sg_sagan_wiggler)
  INTPANCAKER     EL:PANCAKE         EL%PA      ! PANCAKE (GENERAL B)
  SUPER_DRIFT_R   EL:SUPERDRIFT1     EL%SDR     ! SUPERDRIFT (GENERAL DRIFT)
END INTERFACE

TEAPOT,TP10,KIND10: (SBEND DKD & MKM, THICK, ANGLE~=0)
-------------------
SSYMPINTR (integrator fringe-body(nst)-fringe)
-> FRINGE_TEAPOTR
   -> ROT_XZ
   -> NEWFACER
   -> FRINGE_DIPOLER
   -> MULTIPOLE_FRINGE
   -> FRINGE2QUAD
   -> WEDGER
-> SINTE (body-integrator nst)
   -> INTER_TEAPOT (integrator 1-nst)
      -> SSECH1R (model dispatch)
         -> SPROTR (drift DKD)
         -> SSECR  (drift MDM)
      -> SKICK (magnetic)
         -> GETELECTRICR (kick)

      -> RK2_TEAPOTR (electric)
         -> FEVAL_TEAPOTR
            -> GETELECTRICR (kick)
      -> RK4_TEAPOTR (electric)
         -> FEVAL_TEAPOTR
            -> GETELECTRICR (kick)
      -> RK6_TEAPOTR (electric)
         -> FEVAL_TEAPOTR
            -> GETELECTRICR (kick)
ZEROR_TEAPOT (INIT)

STREX,K16,KIND16: (QUAD DKD and RBEND DKD & MKM, ANGLE=0)
-----------------
SYMPINTEXR (integrator fringe-body(nst)-fringe)
-> FRINGE_STREXR
   :MAD-LIKE
   -> ROT_XZ
   -> NEWFACER
   -> FRINGE_DIPOLER
   -> WEDGER (RBEND as SBEND)
   :NOT MAD-LIKE
   -> EDGE_TRUE_PARALLELR
      -> ROT_XZ
      -> NEWFACER
      -> FRINGE_DIPOLER
   -> MULTIPOLE_FRINGE
   -> FRINGE2QUAD
-> INTEEXR (body-integrator nst)
   -> INTER_STREX (integrator 1-nst)
      -> DRIFTR (drift thin)   DKD
      -> SPARR  (drift-matrix) MKM
      -> KICKEXR (kick)
ZEROR_STREX (INIT)

TKTF,T7,KIND7: (QUAD MKM, THICK, ANGLE==0, K0=0)
--------------
SYMPINTTKT7R (integrator fringe-body(nst)-fringe)
-> FRINGE_STRAIGHTR
   -> EDGER
      -> ROT_XZ
      -> NEWFACER
      -> FRINGE_DIPOLER
   -> MULTIPOLE_FRINGE
   -> FRINGE2QUAD
-> INTTKT7R (body-integrator nst)
   -> INTER_TKTF (integrator 1-nst)
      -> GETMAT7R  (matrix init if X(5) changes)
      -> KICKPATHR (drift)
      -> KICKTKT7R (kick)
      -> PUSHTKT7R (matrix)
ZEROR_TKT7 (INIT)

NOTES:
------
B0 [angle] vs BN(1) [field]
K%TIME: See K.4 eq 36 p.72 (and KICKR eq.)
true : X(5) is delta_E, X(6) is -cT (time of flight)
false: X(5) is delta_p, X(6) is -s  (path length)

Special extension for Knobs (ask to Piotr)
MAKEPOTKNOB_ELEC OR MAKEPOTKNOB
TRACK_SLICE
UNMAKEPOTKNOB_ELEC OR UNMAKEPOTKNOB
]]

-- locals ---------------------------------------------------------------------o

local Command, element, sequence, table                            in MAD
local is_nil, is_number, vector, matrix, is_matrix                 in MAD
local abs, sqrt, max, sin, cos, tan, asin, acos, atan, sinc        in MAD

local minlen, minang = 1e-14, 1e-14

--[[ beta corresponds to beam particle=proton, energy=450
proton: m0c^2=0.938GeV
gamma = E_beam/E_rest= E_beam/m0c^2
beta  = sqrt(1 - (1/gamma)^2)
gamma = 1/sqrt(1 - beta^2)
]]
local beta    = 0.99999782628282619
local betai   = 1/beta
local gamma   = 1/(sqrt(1 - beta^2))
local bg2     = beta^2*gamma^2 -- gamma^2-1

--[[ METHOD:
2 - 2nd order, 1 kick per integration step
4 - Ruth-Neri-Yoshida 4th order, 3 kicks per step
6 - Yoshida 6th order, 7kicks per step
]]
local method = 2 -- 2,4,6
-- local method = 'teapot'


--[[MODEL: 1 drift-kick-drift, 2 - matrix-kick-matrix)
]]
local model      = 2

local nst        = 1
local direction  = 1
local charge     = 1
local total_path = 0

local rbend = true
--[[TODO:
-Add charge, direction, mass(?)

-Deltap (recalculation of pt)

- KICKEX: how to read properly strength of thick element (i.e. convert
k1,k1s, k2 etc to knl,ksl)

-????KICKEX: add a check for thick element that there is only one strength,
i.e. quad only has k1 and not k0, k2 or???
]]
-- add patch, rotation + translation

-- helpers --------------------------------------------------------------------o

local fact = { [0]=1, 1 }
(function() for i=2,25 do fact[i] = fact[i-1]*i end end)()

-- implementation -------------------------------------------------------------o

local function invalid_track (elem, m)
  error(string.format("invalid element %s of kind %s with length %s",
                      elem.name, elem.kind, l and tostring(l) or 0))
end

M.__help['Track drift'] = [[
  [1] Drift Space, ch. 3.1, p.86 eq.(3.13-3.18)
  [2] p.353, ch. 12.1.3
  [3] PTC, Function DRIFTR in file Sh_def_kind.f90, same formula as [1]
]]

-- Drift general exact strait
local function drift_track (elem, m, l) -- TODO: check numerical stability
  if l >= minlen then
    local x, px, y, py, t, pt in m
    local l_pz = l/sqrt(1 + 2*betai*pt + pt^2 - px^2 - py^2)
    m.x = x + px * l_pz
    m.y = y + py * l_pz
    m.t = t + (betai + pt)*l_pz - l*betai*(1-total_path)
  end
  print("V after adrift = ", m.x, m.px, m.y, m.py, m.t, m.pt)
end

M.__help['Track mutlipole'] = [[
  [2] p.354, ch. 12.1.3
  [3] PTC, Function KICKEXR in file Sh_def_kind.f90)
]]

-- Kick general exact strait
local function kick_mult(elem, m, l)
  local knl, ksl = elem.knl or {}, elem.ksl or {}
  local nmul = max(#knl, #ksl)

  io.write('tracking kick for ', elem.name, ' (l=', l, ', nmul=', nmul, ')\n')

 if nmul == 0 then return end

  local x, px, y, py, t, pt in m -- t, pt not used
  local by = knl[nmul] or 0
  local bx = ksl[nmul] or 0
  local byt

  for j=nmul-1,1,-1 do
    byt = x * by - y * bx + (knl[j] or 0)
    bx  = y * by + x * bx + (ksl[j] or 0)
    by  = byt
  end

  m.px = px - by + (knl[1] or 0)
  m.py = py + bx
  -- LD: missing t adjustment? (see slides)
end

M.__help['Track kick'] = [[
  [2] p. 72, Section K.4.2,
  [3] PTC, Function KICKEXR in file Sh_def_kind.f90)
]]

local function kick_track(elem, m, l)
  io.write('tracking kick for ', elem.name, ' (l=', l, ')\n')

  local knl, ksl = elem.knl or {}, elem.ksl or {}
  local dkn, dks = elem.dkn or {}, elem.dks or {}
  local kn = { elem.k0 , elem.k1 , elem.k2 , elem.k3  }
  local ks = { elem.k0s, elem.k1s, elem.k2s, elem.k3s }
  local nmul = max(#knl, #ksl, #dkn, #dks, #kn, #ks)

  if nmul == 0 then return end

  for i=1,nmul do
    kn[i] = ((kn[i] or 0) + (dkn[i] or 0))*l + (knl[i] or 0)
    ks[i] = ((ks[i] or 0) + (dks[i] or 0))*l + (ksl[i] or 0)
  end

  local x, px, y, py, t, pt in m -- t, pt not used
  local by = kn[nmul] * fact[nmul-1]
  local bx = ks[nmul] * fact[nmul-1]
  local byt

  for i=nmul-1,1,-1 do
    byt = x * by - y * bx + kn[i]
    bx  = y * by + x * bx + ks[i]
    by  = byt
  end

  m.px = px - by*l + kn[1] -- l?
  m.py = py + bx*l
  -- LD: missing t adjustment? (see slides)
end


M.__help['Track pushtkt'] = [[
[2] MKM: p. 75, Section K.4.7,
[3] PTC, Function INTER_TKTF  in file Sh_def_kind.f90)
]]

local function getM_track(elem)
 local M = matrix(6):eye()
--TODO matrix calculation
--[[
  SUBROUTINE GETMAT7R(EL) in PTC to calculate M matrix

]]
  return M
end

local function getRM_track(elem)
 local RM = matrix(6):eye()
--TODO matrix calculation
--[[
  SUBROUTINE GETMAT7R(EL) in PTC to calculate RM matrix

]]
  return RM
end

M.__help['Track straight matrix-kick'] = [[
  [2] p.358, ch. 12.2.2 Drift-Kick Split, drift in polar coordinates
  [3] p. 76, PTC, Function SPROTR in file Sh_def_kind.f90)
]]


local function pushtkt_track(elem, m , l)

    local l in elem
    local t1, t2, t3, t4 = 0, 0, 0, 0
    local bv  = direction*charge
    local M   =  getM_track(elem)  or matrix(6):eye()
    local RM  =  getRM_track(elem) or matrix(6):eye() -- case of dir = -1
-- TODO rlx calculated within GETMAT7R!!!!
    local rlx = vector(3):eye()
    if  bv>0  then

    	t1 = M(1,1)*m.x +   M(1,2) * px +  M(1,3) * pt / beta
    	t2 = M(2,1)*m.x +   M(2,2) * px +  M(2,3) * pt / beta
    	t3 = M(1,1)*m.y +   M(1,2) * py
    	t4 = M(2,1)*m.y +   M(2,2) * py
    else

    	t1 = RM(1,1)*m.x +   RM(1,2) * px +  RM(1,3) * pt / beta
    	t2 = RM(2,1)*m.x +   RM(2,2) * px +  RM(2,3) * pt / beta
    	t3 = RM(1,1)*m.y +   RM(1,2) * py
    	t4 = RM(2,1)*m.y +   RM(2,2) * py
        m.t = m.t + rlx[1] * m.x / beta + rlx[2] * m.px / beta + rlx[3] * m.pt
    end

    m.x = t1
    m.px= t2
    m.y = t3
    m.py =t4
end

local function kickpath_track (elem, m, l)
--[[ PTC KICKPATHR ]]
  local pz = sqrt(1 + 2*betai*pt + pt^2 - px^2 - py^2)
  m.x = x + l * px * (1/pz - 1)
  m.y = y + l * py * (1/pz - 1)
  m.t = t + l * (betai + pt)/pz - l * (1 -T)*betai
  return l
end

local function kicktkt_track(elem, m, l)
  error("NYI")
-- TODO implement
--[[ PTC KICKTKT7 ]]
  return l
end


M.__help['Track curved drift-kick'] = [[
  [2] p.358, ch. 12.2.2 Drift-Kick Split, drift in polar coordinates
  [3] p. 76, PTC, Function SPROTR in file Sh_def_kind.f90)
]]

local function sdrift_track (elem, m, l) -- check numerical statibility
  local l, angle in elem

  if is_nil(k0) or k0 == 0 then -- to check...
    drift_track(m, l) return
  end

  local x, px, y, py, t, pt in m
  local rho, pz, ptt
  local xt, pxt, yt, tt = 0, 0, 0, 0

  rho = l/angle
  pz  = sqrt(1 + 2 * betai*pt + pt^2 - px^2 - py^2)
  ptt = 1 - px * tan(angle) / pz

  xt  = (x + rho * (2 *  sin(angle/2)^2 + px * sin(angle)/pz)) / cos(angle) / ptt
  pxt = px * cos(angle) + sin(angle) * pz
  yt  = y + py * (x + rho) * tan(angle) / pz / ptt
  tt  = t + (x + rho) * tan(angle) * (betai + pt) / pz / ptt - l * betai

  m.x  = xt
  m.px = pxt
  m.y  = yt
  m.t  = tt
end

M.__help['Track curved kick '] = [[
  [2] p.358, ch. 12.2.2 Drift-Kick Split, kick in polar coordinates
  [3] p. 76, PTC, Function SKICK in file Sh_def_kind.f90)

]]

local function skick_track (elem, m, l)
  local l, k0, k0s in elem
  k0, k0s = k0 or 0, k0s or 0

  local x, px, y, py, t, pt in m -- y, t not used
  local b1 = -k0  * (1 + k0 *x)
  local b2 =  k0s * (1 + k0s*x)
  local bv = direction * charge -- from map

--TO ADD    call GETELECTRIC(EL,E,phi,B,VM,X,kick=my_true)

  m.px = px + l * bv * b1
  m.py = py + l * bv * b2
end

-- integrator schemes ---------------------------------------------------------o

local function integrate2 (elem, m, drift, kick)
  local l, nst in elem
  local l_n = l/(nst or 1)

  for i=1,nst do
    drift(elem, m, l_n/2)
     kick(elem, m, l_n  )
    drift(elem, m, l_n/2)
  end
end

--[[
FD1, FD2, FK1, FK2 are constants related to the 4th order Ruth-Yoshida integrator.
FD1 = FD4 =  1/(2*(2-2^(1/3)))           =  0.67560359597982889
FD2 = FD3 =  (1-2^(1/3))/(2*(2-2^(1/3))) = -0.17560359597982886
FK1 = FK3 =  1/(2-2^(1/3))               =  1.3512071919596578
FK2 =     =  -2^(1/3)/(2-2^(1/3))        = -1.7024143839193155
]]

--[[ 6th order Yoshida, see[4]
    YOSK(4) =  0.0
    YOSK(3) =  0.78451361047756e0_dp
    YOSK(2) =  0.235573213359357e0_dp
    YOSK(1) = -1.17767998417887e0_dp
    YOSK(0) =  1.0 - 2.0 * (YOSK(1) + YOSK(2) + YOSK(3))

    do i=4,1,-1
       YOSD(i)=(YOSK(i)+YOSK(i-1)) / 2
    enddo

  SUBROUTINE MAKE_YOSHIDA
    IMPLICIT NONE
    integer i

    YOSK(4)=0.0_dp
    YOSK(3)=0.78451361047756e0_dp
    YOSK(2)=0.235573213359357e0_dp
    YOSK(1)=-1.17767998417887e0_dp
    YOSK(0)=1.0_dp-2.0_dp*(YOSK(1)+YOSK(2)+YOSK(3))

    do i=4,1,-1
       YOSD(i)=(YOSK(i)+YOSK(i-1))/2.0_dp
    enddo

    do i=3,0,-1
       YOSK(i+1)=YOSK(I)
    enddo


]]


local fk1, fd1 =  1.3512071919596578,  0.67560359597982889
local fk2, fd2 = -1.7024143839193155, -0.17560359597982886

local function integrate4 (elem, m, drift, kick)
  local l, nst in elem
  local l_n = l/(nst or 1)

  for i=1,nst do
    drift(elem, m, l_n * fd1)
     kick(elem, m, l_n * fk1)
    drift(elem, m, l_n * fd2)
     kick(elem, m, l_n * fk2)
    drift(elem, m, l_n * fd2)
     kick(elem, m, l_n * fk1)
    drift(elem, m, l_n * fd1)
  end
end

local function integrate6 (elem, m, drift, kick)
  error("NYI")
--[[       CASE(6)
          DO I =1,4
             DF(I)=EL%L*YOSD(I)/EL%P%NST
             DDF(I)=EL%P%LD*YOSD(I)/EL%P%NST
             DK(I)=EL%L*YOSK(I)/EL%P%NST
          ENDDO

          DO J=4,2,-1
             CALL DRIFT(DF(J),DDF(J),EL%P%beta0,k%TOTALPATH,EL%P%EXACT,k%TIME,X)
             CALL KICKEX (EL,DK(J),X,k)
          ENDDO
          CALL DRIFT(DF(1),DDF(1),EL%P%beta0,k%TOTALPATH,EL%P%EXACT,k%TIME,X)
          CALL KICKEX (EL,DK(1),X,k)
          CALL DRIFT(DF(1),DDF(1),EL%P%beta0,k%TOTALPATH,EL%P%EXACT,k%TIME,X)
          DO J=2,4
             CALL KICKEX (EL,DK(J),X,k)
             CALL DRIFT(DF(J),DDF(J),EL%P%beta0,k%TOTALPATH,EL%P%EXACT,k%TIME,X)
          ENDDO

]]

end

local function simple (elem, m, drift, kick)
  local l, nst in elem
  nst = nst or 1
  local l_n, l_p = 0, 0
  local l_nst = nst>0 and l/(2*nst) or 0

  for i=1,nst do
    l_n, l_p = l_nst*(2*i-1), l_n
    drift(elem, m, l_n-l_p)
     kick(elem, m, l_n    )
  end
  drift(elem, m, l-l_n)
end

local function collim (elem, m, drift, kick)
  local l, nst in elem
  nst = nst or 2
  assert(nst > 0, "invalid number of integration steps")
  local l_n, l_p = nst==1 and l/2 or 0, 0
  local l_nst = nst>2 and l/(nst-1) or l

  for i=2,nst do
    l_n, l_p = l_nst*(i-1), l_n
     kick(elem, m, l_p    )
    drift(elem, m, l_n-l_p)
  end
  kick(elem, m, l_n)
end

local function teapot (elem, m, drift, kick)
  local l, nst in elem
  nst = nst or 1
  local l_n, l_p, l_2 = 0, 0, l/2
  local l_nst = nst>1 and l_2*nst/(1-nst^2) or 0

  for i=1,nst do
    l_n, l_p = l_nst*(nst-2*i+1), l_n
    drift(elem, m, l_n-l_p)
     kick(elem, m, l_n+l_2)
  end
  drift(elem, m, l-l_n)
end

local integrate = {
  integrate2, integrate2, integrate4, integrate4, integrate6, integrate6,
  simple=simple, teapot=teapot, collim=collim,
}

-- frame of integration

-- angle == 0 and k0 ~= 0 rbend on (??? rbend with the straight ref. frame ??)
--STRAIGHT REF. FRAME FOR RBEND : STREX

-- angle == 0 and k0 == 0 rbend off (i.e. drift)
--  DRIFT-TRACK

-- angle ~= 0 and k0 ~= 0 sbend on
-- SBEND, default RBEND:  TEAPOT

-- angle ~= 0 and k0 == 0 sbend off( useless, what kind of element is this? broken sbend?)

--   <=> rbend with l = l_arc and k0 = angle, what about errors?

-- angle == 0 abd k0 == 0 but k[n] ~= 0: straight magnet
-- DKD (model = 1 ): STREX ; MKM (model = 2): TKTF

local function thin_track (elem, m)
  io.write('THIN_TRACK: for ', elem.name, ' (l=', elem.l,', nstep=', nst, ')\n')
  local l in elem

  if l >= minlen then
    error("invalid thin element length (too long): " .. elem.name)
  end

  -- in principle it should call only one time kick_mult because l=0
  -- k0=0: kick_mult, k0~=0: kick_mult_malte...
  integrate[method](elem, m, l, drift_track, kick_mult)
  return l
end

M.__help['Track straight'] = [[
  [2] p.352, ch. 12.1
      DKD: ch 12.1.3, p. 353
      MKM: ch 12.1.4, p.354
  [3] DKD: p. 72, Section K.4.2,
           PTC, Function INTER_STREX in file Sh_def_kind.f90)
      MKM: p. 75, Section K.4.7,
           PTC, Function INTER_TKTF  in file Sh_def_kind.f90)
]]

local function strait_track (elem, m)

-- DKD: model 1, kick_track, drift_track
-- MKM: model 2, l_n = l/nstp;
    --  DK2=l/NST
    --   DK=DK2/2
    -- l_n = l/nstp
    -- pushtkt_track(elem, m, l)
    -- kickpath_track (elem, m, l_n/2)
    -- kicktkt_track(elem, m, l_n)
    -- kickpath_track (elem, m, l_n/2)
    -- pushtkt_track(elem, m, l)

  io.write('STRAIT_TRACK: for ', elem.name, ' (l=', elem.l,', nstep=', nst, ')\n')
  local l, angle, k0 in elem

  if abs(angle) >= minang then
    error("invalid strait element angle (too curved): " .. elem.name)
  end

	l_field = l*sinc(k0*l/2)
  integrate[method](elem, m, l_field, drift_track, kick_track)
  return l
end

M.__help['Track curved'] = [[
  [2] p.357, ch. 12.2
  [3] PTC, p. 76, Section K.4.9,Function INTER_TEAPOT in file Sh_def_kind.f90)
]]

local function curved_track (elem, m) -- e.g. sbend
  io.write('CURVED_TRACK: for ', elem.name, ' (l=', elem.l,', nstep=', nst, ')\n')
  local l in elem

  if l < minlen then
    error("invalid curved element length (too short): " .. elem.name)
  elseif abs(angle) < minang then
    error("invalid curved element angle (too strait): " .. elem.name)
  end

  integrate[method](elem, m, l, sdrift_track, skick_track)
  return l
end

-- load track maps into elements

element.element       :set_function { track = invalid_track }
element.thin_element  :set_function { track =    thin_track }
element.strait_element:set_function { track =  strait_track }
element.curved_element:set_function { track =  curved_track }

MAD.utility.defhelp(M) -- todo: per function help -> 'track'

-- end ------------------------------------------------------------------------o
return {
  __help = M.__help,
}

--[=[
--[[
M.__help['Track matrix-kick'] = [[
  [2] p.354, ch. 12.1.4 Matrix-Kick Split
  [3] p. 75, Section K.4.7, PTC, Function INTEP_TKTF in file Sh_def_kind.f90)
]]


--[[
M.__help['Track curved bend-kick'] = [[
  [2] p.360, ch. 12.2.3 Matrix(Bend)-Kick Split
  [3] p. 76, PTC, Function SPAR in file Sh_def_kind.f90)
]]


--[[

local function spar(elem, m, l)
model = 2 (matrix-kick-matrix)
local l_n = l/nstp
YL = DH = l/2/nstp
DL = DD = l/2/nstp
D = l
?????to check if DD and DH is the same!!!
    SPAR(elem, m, l_n/2)
    KICKEX (elem, m, l_n/2)
   SPAR(elem, m, l_n/2)

  --- SPARr(EL,YL,DL,X,k)
    local bv=direction*charge
      pz = sqrt(1 + 2 * pt*betai + pt^2-px^2 - py^2)

       XN(2)=px - l_N/2*DIR*bn1 --(EL%BN(1))
       ???BN(1) ---

       ptt = sqrt(1 + 2.0 * pt*betai+pt^2-py^2)

       pzs = sqrt(1 + 2 * pt*betai + pt^2 - XN(2)^2 - py^2)

       XN(1) = x + (pzs - pz) / dir / bn1

      ????  XN(3)=(arcsin(px) / ptt - arcsin(XN(2)) / ptt) / dir / b1

       XN(6)= t + XN(3) * (betai + pt ) -  l_n*betai

       XN(3)= y + px * XN(3)

       X(1)=XN(1)
       X(2)=XN(2)
       X(3)=XN(3)
       X(6)=XN(6)
end
]]
]=]
