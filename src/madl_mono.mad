--[=[
 o-----------------------------------------------------------------------------o
 |
 | Monomial module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provides full set of functions and operations on monomials.
  - Support monomials with parameters and inhomogeneous orders.

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- locals ---------------------------------------------------------------------o

local ffi = require 'ffi'
local istype in ffi
local min, max in math

local _C in MAD

local is_nil, is_integer, is_string, is_iterable, is_lengthable in MAD.typeid

local ord_sz = ffi.sizeof 'ord_t'

local type, assert, error, tostring, table, string =
      type, assert, error, tostring, table, string

-- types ----------------------------------------------------------------------o

ffi.cdef[[
struct monomial { const ssz_t n; ord_t _dat[?]; };
]]

local mono_ctor = ffi.typeof 'struct monomial'

local is_monomial = \x -> istype(mono_ctor, x)

-- ctors ----------------------------------------------------------------------o

--[=[
  monomial (len)
  monomial (len, num)
  monomial (len, str or itr)
  monomial (str or itr)
--]=]

local mono_alloc = \n -> mono_ctor(n,n)

local function monomial (len, ord)
  if is_nil(ord) and is_lengthable(len) then
    len, ord = #len, len -- right shift
  end
  assert(is_integer(len) and len > 0, "invalid monomial length (integer expected)")
  return mono_alloc(len):fill(ord)
end

-- same, copy -----------------------------------------------------------------o

function M.__same (a, n_)
  local n = n_ or a.n
  return mono_alloc(n)
end

function M.__copy (a, b_)
  local n
  if is_nil(b_) then
    n, b_ = a.n, mono_alloc(a.n)
  else
    assert(is_monomial(b_), "invalid argument #1 (monomial expected)")
    n = min(a.n,b_.n)
  end
  ffi.copy(b_._dat, a._dat, ord_sz*n)
  return b_
end

-- implementation -------------------------------------------------------------o

local code_0 = string.byte("0")
local code_A = string.byte("A")
local code_a = string.byte("a")

function M.fill (a, ord)
  ord = ord or 0
  if is_integer(ord) then
    ffi.fill(a._dat, ord_sz*a.n, ord)
  elseif is_string(ord) then
    for i=1,min(a.n,#ord) do
      local v = string.byte(ord,i)
      a._dat[i-1] = v - (v < code_A and code_0    or
                         v < code_a and code_A-10 or code_a-36)
    end
  elseif is_iterable(ord) then
    for i=1,min(a.n,#ord) do a._dat[i-1] = ord[i] end
  else
    error("invalid argument #2 (integer, string or iterable expected)")
  end
  return a
end

M.min   = \a    -> _C.mad_mono_min  (a.n, a._dat)
M.max   = \a    -> _C.mad_mono_max  (a.n, a._dat)
M.ord   = \a    -> _C.mad_mono_ord  (a.n, a._dat)
M.ordp  = \a, s -> _C.mad_mono_ordp (a.n, a._dat, s or 1)
M.ordpf = \a, s -> _C.mad_mono_ordpf(a.n, a._dat, s or 1)

function M.reverse (a, r_)
  local r = r_ or mono_alloc(a.n)
  assert(is_monomial(r), "invalid argument #2 (monomial expected)")
  assert(r.n == a.n, "incompatible monomial sizes")
  _C.mad_mono_rev(a.n, a._dat, r._dat)
  return r
end

--  io.write("== : a='", tostring(a), "', b='", tostring(b), "'\n")

M.__len = \a -> a.n

function M.__eq (a, b)
  assert(is_monomial(a), "invalid argument #1 (monomial expected)")
  assert(is_monomial(b), "invalid argument #2 (monomial expected)")
  if a.n == b.n then
    return _C.mad_mono_eq(a.n, a._dat, b._dat)
  end
  if a.n > b.n then a, b = b, a end -- swap to make b longer than a
  return _C.mad_mono_eq (a.n, a._dat, b._dat) and
         _C.mad_mono_ord(b.n-a.n, b._dat+a.n) == 0
end

function M.__lt (a, b)
  assert(is_monomial(a), "invalid argument #1 (monomial expected)")
  assert(is_monomial(b), "invalid argument #2 (monomial expected)")
  if a.n == b.n then
    return _C.mad_mono_lt(a.n, a._dat, b._dat)
  elseif a.n > b.n then
    return false
  else
    return _C.mad_mono_lt(a.n, a._dat, b._dat) and
           _C.mad_mono_min(b.n-a.n, b._dat+a.n) > 0
  end
end

function M.__le (a, b)
  assert(is_monomial(a), "invalid argument #1 (monomial expected)")
  assert(is_monomial(b), "invalid argument #2 (monomial expected)")
  if a.n == b.n then
    return _C.mad_mono_le(a.n, a._dat, b._dat)
  elseif a.n > b.n then
    return _C.mad_mono_le (b.n, a._dat, b._dat) and
           _C.mad_mono_ord(a.n-b.n, a._dat+b.n) == 0
  else
    return _C.mad_mono_le(a.n, a._dat, b._dat)
  end
end

function M.__add (a, b, r_)
  assert(is_monomial(a), "invalid argument #1 (monomial expected)")
  assert(is_monomial(b), "invalid argument #2 (monomial expected)")
  local n = max(a.n,b.n)
  local r = r_ or mono_alloc(n)
  assert(r.n == n, "incompatible monomial sizes")
  if a.n == b.n then
    _C.mad_mono_add(n, a._dat, b._dat, r._dat)
  elseif a.n > b.n then
    _C.mad_mono_add(b.n, a._dat, b._dat, r._dat)
    ffi.copy(r._dat+b.n, a._dat+b.n, ord_sz*(a.n-b.n))
  else
    _C.mad_mono_add(a.n, a._dat, b._dat, r._dat)
    ffi.copy(r._dat+a.n, b._dat+a.n, ord_sz*(b.n-a.n))
  end
  return r
end

function M.__sub (a, b, r_)
  assert(is_monomial(a), "invalid argument #1 (monomial expected)")
  assert(is_monomial(b), "invalid argument #2 (monomial expected)")
  local n = max(a.n,b.n)
  local r = r_ or mono_alloc(n)
  assert(r.n == n, "incompatible monomial sizes")
  if a.n == b.n then
    _C.mad_mono_sub(a.n, a._dat, b._dat, r._dat)
  elseif a.n > b.n then
    _C.mad_mono_sub(b.n, a._dat, b._dat, r._dat)
    ffi.copy(r._dat+b.n, a._dat+b.n, ord_sz*(a.n-b.n))
  else
    ffi.copy(r._dat, a._dat, ord_sz*a.n)
    _C.mad_mono_sub(b.n, r._dat, b._dat, r._dat)
  end
  return r
end

function M.__concat (a, b, r_)
  assert(is_monomial(a), "invalid argument #1 (monomial expected)")
  assert(is_monomial(b), "invalid argument #2 (monomial expected)")
  local n = a.n+b.n
  local r = r_ or mono_alloc(n)
  assert(r.n == a.n+b.n, "incompatible monomial sizes")
  _C.mad_mono_cat(a.n, a._dat, b.n, b._dat, r._dat)
  return r
end

function M.__totable (a)
  local r = table.new(a.n,0)
  for i=1,a.n do r[i] = a._dat[i-1] end
  return r
end

function M.__tostring (a, sep_)
  local r = table.new(a.n,0)
  for i=1,a.n do
    local v = a._dat[i-1]
    r[i] = string.char(v + (v < 10 and code_0    or
                            v < 36 and code_A-10 or code_a-36))
  end
  return table.concat(r, sep_ or '')
end

-- metamethods ----------------------------------------------------------------o

M.  add, M.  sub, M.length, M.  concat, M.  tostring, M.  totable =
M.__add, M.__sub, M.__len , M.__concat, M.__tostring, M.__totable

M.  same, M.  copy =
M.__same, M.__copy

local function iter (a, i)
  if i < a.n then return i+1, a._dat[i] end
end

M.__ipairs = \s -> (iter, s, 0)

function M.__index (a, k)
  if type(k) == 'number'
  then return k >= 1 and k <= a.n and a._dat[k-1] or nil
  else return M[k]
  end
end

function M.__newindex (a, k, v)
  if type(k) == 'number' then
    assert(k >= 1 and k <= a.n, "1-index out of bounds")
    a._dat[k-1] = v
  else
    error("invalid monomial member '"..tostring(k).."'")
  end
end

-- env ------------------------------------------------------------------------o

MAD.typeid.is_monomial = is_monomial

-- metatable ------------------------------------------------------------------o

M.__metatable = M

ffi.metatype(mono_ctor, M)

-- end ------------------------------------------------------------------------o
return { monomial = monomial }
