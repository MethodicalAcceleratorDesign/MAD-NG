local dat = require 'madl_plotdat'
local is_nil, is_number, is_table, is_string, is_sequence     in MAD.typeid
local Command                                                 in MAD
local strinterp                                               in MAD.utility

-- global default -------------------------------------------------------------o

local _dflt = {
  color     = 'red',
  style     = 'linespoints',
  dashtype  = 'solid',
  linewidth = 1,
  pointsize = 1,
  pointtype = 1,
  filename  = "plot",
  lmargin   = 0.1,
  rmargin   = 0.9,
  tmargin   = 0.1,
  bmargin   = 0.9,
}

-- used to position the layout (e.g. top, bottom, etc...)
local layout_pos = {
  top    = { bmargin = 0.75, origin = 0.85  },
  middle = {                 origin = 0.425 },
  bottom = { tmargin = 0.2,  origin = 0     },
}

-- gplot ----------------------------------------------------------------------o

local _gpd = {}

local function has_plotter(gp, id)
  return not not gp[_gpd][id]
end

local function gp_create(gp, id)
  local gnuplot = assert(io.popen('gnuplot', 'w'))
  gp[_gpd][id] = gnuplot
  return gnuplot
end

local function gp_get (gp, id)
  local dat = gp[_gpd]
  if is_nil( dat[id] ) then gp_create( gp, id ) end
  if id ~= '__cur_id'  then dat.__cur_id = id end
  return dat[id]
end

local gplot = setmetatable({ [_gpd] = {__cur_id=1} },  {
  __index = gp_get,
  __call  = \gp,... -> gp[gp[_gpd].__cur_id]:write(...)
})

-- layout ---------------------------------------------------------------------o

local setup_layout = [[
unset tmargin
unset bmargin
unset title
unset arrow
unset xtics
unset x2tics
unset xlabel
unset x2label
unset ytics
unset y2tics
unset ylabel
unset y2label
unset key
set xzeroaxis
set border 0
set yrange [-1:1]
plot '-' using 1:2 with lines linestyle 1 linecolor rgb 'black'
]]

local xadjust = \x,l,s -> x*l + s

-- return the shape of an element in x and y
local function eShap(elem)
  local shape = dat[elem.kind]
  local h     = elem[shape.str_k] or 1

  local sh
  if     shape.shape then sh = shape.shape
  elseif h > 0       then sh = shape.shape_f
  else                    sh = shape.shape_d
  end

  local x_sh, y_sh
  if is_table(sh.x[1]) then x_sh, y_sh = sh.x, sh.y
  else                      x_sh, y_sh = {sh.x}, {sh.y}
  end
  return x_sh, y_sh
end

-- stream layout data
local function layout_data(param)
  local plotter, sequence, seqrange in param
  for i,elem in sequence:iter(seqrange) do
    local s = sequence:spos(i)
    local l = elem.l
    param.min = param.min or s
    param.max = s
    local x_sh, y_sh = eShap(elem)
    for j=1,#x_sh do
      local xj, yj = x_sh[j], y_sh[j]
      for k=1,#xj do
        local xk = xadjust(xj[k], l, s)
        local yk = yj[k]
        plotter:write(xk, " ", yk, "\n")
      end
      plotter:write("\n")
    end
  end
  plotter:write("e\n")
end

-- main layout function
local function layout(param)
  local plotter in param
  plotter:write(setup_layout)
  layout_data(param)
end

-- plot -----------------------------------------------------------------------o

local margins = [[
set lmargin at screen $lmargin
set rmargin at screen $rmargin
set bmargin at screen $bmargin
set tmargin at screen $tmargin
]]

-- get vector from label
local function getv(data, tbl, label)
  if label then
    return data and data[label] or tbl[label],"tbl"  or error("invalid label")
  end
end

-- parse input axis and apply func to each label
local function parse_axis(param, func)
  local _axis = {'x1y1', 'x1y2', 'x2y1', 'x2y2'}
  for _,axis_name in ipairs(_axis) do
    local axis = param[axis_name]
    if is_string(axis) then                  -- e.g. x1y1 = 'y1'
      func(param, nil, axis, axis_name)
    elseif is_table(axis) and axis[1] then   -- e.g. x1y1 = {'y1', 'y2'}
      for i,y in ipairs(axis) do
        func(param, nil, y, axis_name)
      end
    elseif is_table(axis) then
      for x,y in pairs(axis) do
        if is_string(y) then                 -- e.g. x1y1 = { x1 = 'y1' }
          func(param, x, y, axis_name)
        elseif is_table(y) then              -- e.g. x1y1 = { x1 = {'y1', 'y2'}}
          for _,yi in pairs(y) do
            func(param, x, yi, axis_name)
          end
        end
      end
    end
  end
end

-- stream one plot data (used in parse_axis)
local function plot_data(param, xlbl, ylbl)
  local plotter, tablerange, data, table in param
  local x      = getv(data, table, xlbl)
  local y,tbl  = getv(data, table, ylbl)
  local min    = tbl and tablerange and tablerange[1] or 1
  local max    = tbl and tablerange and tablerange[2] or #y
  for i=min,max do
    local x = x and x[i] or i -- use index if x is nil
    plotter:write(x, " ", y[i], "\n")
  end
  plotter:write("e\n")
end

-- parse dashtypes and add '' if it is a pattern : e.g.: ".-- "
local function parse_dash(dashtypes, y)
  local dash = is_table(dashtypes) and
    (dashtypes[y] or _dflt.dashtype) or dashtypes
  if string.match(dash, "[.%-_ ]+") then return "'" .. dash .. "'" end
  return dash
end

-- stream the gnuplot 'plot' command (used in parse_axis)
local function plot_cmd(param, _, y, axis)
  local colors, styles, dashtypes, pointsizes,
    pointtypes, linewidths, legendnames in param
  local values = {
    color     = is_table(colors) and (colors[y] or _dflt.color) or colors,
    style     = is_table(styles) and (styles[y] or _dflt.style) or styles,
    dashtype  = parse_dash(dashtypes, y),
    pointsize = is_table(pointsizes)  and (pointsizes[y] or _dflt.pointsize) or pointsizes,
    pointtype = is_table(pointtypes)  and (pointtypes[y] or _dflt.pointtype) or pointtypes,
    linewidth = is_table(linewidths)  and (linewidths[y] or _dflt.linewidth) or linewidths,
    title     = is_table(legendnames) and legendnames[y] or y,
    axis      = axis,
  }
  local cmd = "$cmd using 1:2 with $style "
  if string.match(values.style, "lines") then
    cmd = cmd .. "dashtype $dashtype linewidth $linewidth "
  end
  if string.match(values.style, "points") then
    cmd = cmd .. "pointsize $pointsize pointtype $pointtype "
  end
  cmd = cmd .. "linecolor '$color' title '$title' axes $axis,\\\n"
  cmd = strinterp(cmd, values, false) % param
  param.cmd = "     '' "               -- only the first command need "plot '-'"
  param.plotter:write(cmd)
end

-- set the range command for all axis
local function set_ranges(param)
  local plotter in param
  local names = {'x2range', 'yrange', 'y2range'}
  for _,rname in ipairs(names) do
    local range = param[rname]
    if range then
      local min, max = range[1], range[2]
      local cmd = string.format("set %s [%f:%f]\n", rname, min, max)
      plotter:write(cmd)
    end
  end
  if not param.seqrange and param.xrange then
    local xrange in param
    local min, max = xrange[1], xrange[2]
    local cmd = string.format("set xrange [%f:%f]\n", min, max)
    plotter:write(cmd)
  end
end

-- set label command for each axis
local function set_label(param)
  local plotter in param
  local names = {'xlabel', 'x2label', 'ylabel', 'y2label'}
  for _,lname in ipairs(names) do
    local label = param[lname]
    if label then
      local cmd = string.format("set %s '%s'\n", lname, label)
      plotter:write(cmd)
    end
  end
end

-- set tics for each used axis
local function set_tics(param)
  local cmd = ""
  if param.x1y1 or param.x1y2 then cmd = cmd .. "set xtics nomirror \n"  end
  if param.x2y1 or param.x2y2 then cmd = cmd .. "set x2tics nomirror \n" end
  if param.x1y1 or param.x2y1 then cmd = cmd .. "set ytics nomirror \n"  end
  if param.x1y2 or param.x2y2 then cmd = cmd .. "set y2tics nomirror \n" end
  param.plotter:write(cmd)
end

-- set remaining parameters (miscellaneous)
local function set_misc(param)
  local grid, border, title, legendpos, plotter in param
  local wrt = \s,... => plotter:write(string.format(s,...) % param) end
  if grid      then wrt("set %s\n", grid)          end
  if border    then wrt("set border %s\n", border) end
  if title     then
    local font = param.titlefont or ""
    local size = param.titlesize or ""
    local cmd = "set title '%s' font '%s,%s'\n"
    wrt(cmd, title, font, size)
  end
  if legendpos     then
    local font = param.legendfont or ""
    local size = param.legendsize or ""
    local cmd = "set key %s font '%s,%s'\n"
    wrt(cmd, legendpos, font, size)
  end
end

-- main plot function
local function plot(param)
  local plotter in param
  set_ranges(param)
  set_label(param)
  set_tics(param)
  set_misc(param)
  param.cmd = "plot '-'" -- first plot command initialization
  parse_axis(param, plot_cmd)
  plotter:write("\n")
  parse_axis(param, plot_data)
end

-- command --------------------------------------------------------------------o

-- create a graph with both the layout and the plot part
local function multiplot(param)
  local plotter, multiplot, sequence, seqrange, seqpos in param
  if not multiplot then
    plotter:write("set multiplot\n")
    plotter:write("unset mouse\n")
  end
  local min, max = sequence:range_of(seqrange)
  min = sequence:spos(min)
  max = sequence:spos(max)
  plotter:write(string.format("set xrange [%s:%s]\n", min, max))
  -- select default margins or specific ones for layout position
  local margins = margins
  if is_string(seqpos) then
    margins = strinterp(margins, layout_pos[seqpos], false)
  end
  plotter:write(margins % _dflt)
  plotter:write("set origin 0,0.0\n")
  plotter:write("set size 1,0.85\n")
  plot(param)
  plotter:write("set size 1,0.15\n")
  -- change origin to place the layout on the plot (top, bottom etc...)
  local pos = is_string(seqpos) and layout_pos[seqpos] or { origin=seqpos }
  plotter:write("set origin 0,$origin\n" % pos)
  layout(param)

  if not multiplot then
    plotter:write("unset multiplot\n")
  end
end

-- setup the stream between the three possibilities : pdffile, windows, scrdump
local function set_stream(self)
  local filename, scrdump, windows in self
  if has_plotter(gplot, self.sid) and filename or not windows then
    return gplot[self.sid]
  end
  local plotter = gplot[self.sid]
  if filename then
    filename = is_string(filename) and filename or _dflt.filename
    plotter:write("set term pdfcairo\n")
    plotter:write("set out '" .. filename .. ".pdf'\n")
  elseif windows then
    plotter:write("set term $term $wid size $wsizex,$wsizey \z
      enhanced font \'$font,$fontsize\'\n" % self)
  end

  if scrdump then
    scrdump = is_string(scrdump) and scrdump or _dflt.filename
    local script = io.open(scrdump .. ".gp", "w")
    local p = {
      write = \s,... => plotter:write(...); script:write(...) end,
      flush = \s,... => plotter:flush(...); script:flush(...) end,
      close = \s,... => plotter:close(...); script:close(...) end,
    }
    return p
  end
  return plotter
end

local function exec(self)

  local param = {
    version = tostring(MAD.env.version),
    name    = self.name or is_table(self.table) and self.table.title or "",
    date    = self.date or is_table(self.table) and self.table.date  or "",
    time    = self.time or is_table(self.table) and self.table.time  or "",
    plotter = set_stream(self, plotter),
  }

  setmetatable(param, {__index=self})

  if self.sequence and (self.table or self.data) then
    multiplot(param)
  else
    param.plotter:write(margins % param)
    if is_sequence(self.sequence) then
      layout(param)
    end
    if self.table or self.data then
      plot(param)
    end
  end
  param.plotter:flush()
  -- param.plotter:close()
  return self
end

local plot = Command 'plot' {

  sid         = 1,       -- stream id

  multiplot   = false,   -- user sent multiplot cmd himself

  -- windows setup
  windows     = true,
  wid         = 1,
  term        = 'wxt',
  wsizex      = 800,
  wsizey      = 500,

  -- table or data input
  data        = false,   -- { x=tbl.x, y=vec } (precedence over table)
  table       = false,
  tablerange  = false,   -- { min, max }

  -- sequence input
  sequence    = false,
  seqrange    = {1,-1},  -- {'E.DS.L5.B1','S.DS.R5.B1'} or {1,10}
  seqpos      = "top",   -- top|bottom|middle|0<x<1

  -- decoration
  font        = "Times New Roman",
  fontsize    = 14,
  title       = "$name MAD $version, $date, $time",
  titlefont   = false,
  titlesize   = false,
  legendnames = false,   -- { y = 'distance' }
  legendfont  = false,
  legendsize  = false,
  legendpos   = "left top",
  grid        = 'grid',
  border      = 15,

  -- files
  filename    = false,   -- pdf name or true (filename.pdf or plot.pdf)
  scrdump     = false,   -- script name or true (scrdump.gp or plot.gp)

  -- axis selection (and names)
  x1y1        = false,   -- e.g. x1y1 = { x1 = {'y1', 'y2'}, x2 = {'y3', 'y4'}}
  x1y2        = false,   -- e.g. x1y1 = { x1 = {'y1', 'y2'}}
  x2y1        = false,   -- e.g. x1y1 = { x1 = 'y1'}
  x2y2        = false,   -- e.g. x1y1 = {'y1', 'y2'}
                         -- e.g. x1y1 = 'y1'
  -- axis labels
  xlabel      = false,   -- strings
  x2label     = false,
  ylabel      = false,
  y2label     = false,

  -- axis ranges
  xrange      = false,   -- { min, max }
  x2range     = false,
  yrange      = false,
  y2range     = false,

  -- plot style
  styles      = 'lines', -- { y = 'lines' }
  colors      = 'red',   -- { y = 'green' }
  dashtypes   = 'solid', -- { y = '..-- ' }
  linewidths  = 1,       -- { y = 2.3     }
  pointtypes  = 1,       -- { y = 2       }
  pointsizes  = 1,       -- { y = 2.3     }

  -- margins
  lmargin     = 0.1,
  rmargin     = 0.9,
  tmargin     = 0.1,
  bmargin     = 0.9,

  -- build the command (do not execute)
  exec = exec,
} :set_readonly()

-- end ------------------------------------------------------------------------o

return {
  nplot = plot,
  ngplot = gplot
}