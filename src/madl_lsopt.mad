--[=[
 o-----------------------------------------------------------------------------o
 |
 | Least Squares Optimizer module (loaded by match)
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local ffi = require 'ffi'
local _C, option, ivector, vector, matrix                        in MAD
local is_callable                                                in MAD.typeid
local assertf, errorf, printf                                    in MAD.utility
local eps, inf                                                   in MAD.constant
local abs, rand                                                  in MAD.gmath
local eq                                                         in MAD.gfunc

local min, max, sqrt in math

--[[
  Notes about strategies:
  -----------------------
  0: no variable reduction (constraints reduction still active)
  1: reduce system variables for bad slope and bbox at every step
  2: idem 1, but bad slopes reinit at x0 instead of cancelling the move
  3: idem 2, but strategy switches to 0 if jiter is reached (MAD-X compat.)

  Notes about info:
  -----------------
  0: no output
  1: final summary
  2: idem 1, plus intermediate summary
  3: idem 2, plus nlopt messages
  4: idem 3, plus even more nlopt messages
--]]

-- New algos ------------------------------------------------------------------o

ffi.cdef [[
enum {
 /* extra MAD algorithms */
  NLOPT_LD_LMDIF     = NLOPT_NUM_ALGORITHMS, /* start where NLOPT stops */
  NLOPT_LD_JACOBIAN,

  NLOPT_NUM_ALGOS, /* not an algorithm, just the number of them */
}
]]

-- helper ---------------------------------------------------------------------o

local function eval_fun (env)
  local var = env.__var
  local grdf in var
  var.grdf = false
  local ret = var.fun()   -- compute function (only)
  var.grdf = grdf
  return ret
end

local function eval_jac (env)
  local var = env.__var
  local funf in var
  var.funf = false
  local ret = var.fun()   -- compute jacobian (only)
  var.funf = funf
  return ret
end

local function save_adjrej (rej, ivc)
  local cur = rej.cur
  rej.n = rej.n+1
  table.clear(cur) ; cur.n = 1
  for i=1,ivc.n do
    local ii = ivc[i] ; rej[ii], cur[ii] = (rej[ii] or 0)+1, 1
  end
  return ivc
end

local function disp_adjrej (env, ivc, msg)
  if ivc.n > 0 and env.info >= 3 then
    printf("nlopt: %s no ", msg)
    for i=1,ivc.n do io.write(ivc[i], " ") end
    io.write("\n")
  end
  return ivc
end

-- Check/adjust variables to domain -------------------------------------------o

local function adjust_vars (env)
  local var, obj, trc = env.__var, env.objective, env.info >= 4
  local n, x, x0, h, xslp, xmin, xmax in var
  local iv, x0f = {n=0}, (obj.jstra or 1) >= 2

  -- adjust slope and bounding box
  for i=1,n do
    if h[i]*xslp[i] < 0 then
      if trc then printf("nlopt: adjusting variable (slope) no %d\n", i) end
      iv.n=iv.n+1 x[i], h[i], iv[iv.n] = x0f and x0[i] or x[i]-h[i], 0, i
    elseif x[i] < xmin[i] then
      if trc then printf("nlopt: adjusting variable (< min) no %d\n", i) end
      iv.n=iv.n+1 x[i], h[i], iv[iv.n] = xmin[i], xmin[i]-(x[i]-h[i]), i
    elseif x[i] > xmax[i] then
      if trc then printf("nlopt: adjusting variable (> max) no %d\n", i) end
      iv.n=iv.n+1 x[i], h[i], iv[iv.n] = xmax[i], xmax[i]-(x[i]-h[i]), i
    end
  end

  return iv
end

local function check_vars (env)
  local var, trc = env.__var, env.info >= 3
  local n, x, h, xslp, xmin, xmax in var
  local scl = 1

  -- compute scale factor to adjust h
  for i=1,n do
    if h[i] ~= 0 and h[i]*xslp[i] >= 0 then
      local s = 1
          if x[i] < xmin[i] then s = 1 + (xmin[i]-x[i])/h[i]
      elseif x[i] > xmax[i] then s = 1 + (xmax[i]-x[i])/h[i] end
      if s < scl then scl = s end
    end
  end

  -- adjust length if scale is within one order of magnitude
  if scl > 0.1 and scl < 1 then
    if trc then printf("nlopt: variables step h scaled by %-.6e.\n", scl) end
    x:sub(h,x) ; h:mul(scl,h) ; x:add(h,x)
  end

  return adjust_vars(env) -- final validation
end

-- Remove useless (or invalid) constraints and variables ----------------------o

local function reject_cons (env, A, b)
  local var, obj, trc = env.__var, env.objective, env.info >= 3
  local i, ic, tol = 1, {n=0}, (obj.jtol or eps)^2
  local fn = \t,x => if x <= tol then t.n=t.n+1 t[t.n]=i end i=i+1 return t end

  -- compute row norm, collect index of constraints to remove
  A:sumsqr'row' :foldl(fn, ic)

  if ic.n >= A.nrow then             -- too many constraints selected
    if trc then printf("nlopt: %d constraints can't be rejected\n", ic.n) end
    ic.n = -1
  elseif ic.n > 0 then               -- remove selected constraints
    if trc then printf("nlopt: total %d constraints are rejected\n", ic.n) end
    A:remrow(ic) ; b:remrow(ic)
  end

  return ic
end

local function reject_vars (env, A, rx, rdx, iv)
  local var, trc = env.__var, env.info >= 4
  local n, xslp, xmin, xmax in var
  local iiv, _iv = {n=0}, {n=0}

  -- keep system over determined
  if A.ncol <= A.nrow then return _iv end

  -- check slope and bounding box, collect index of variables to remove
  local j = 1
  for i=1,n do
    if i == iv[j] then               -- already rejected
      _iv.n=_iv.n+1 ; _iv[_iv.n], j = i, j+1
    else
      local ii, rj = i-j+1, true
      local xi = rx[ii]+rdx[ii]
      if rdx[ii]*xslp[i] < 0 then    -- bad slope
        if trc then printf("nlopt: rejecting variable (slope) no %d\n", i) end
      elseif xi < xmin[i] then       -- outside bounding box
        if trc then printf("nlopt: rejecting variable (< min) no %d\n", i) end
      elseif xi > xmax[i] then       -- outside bounding box
        if trc then printf("nlopt: rejecting variable (> max) no %d\n", i) end
      else rj = false end
      if rj then
        _iv.n=_iv.n+1 ; _iv[_iv.n] =  i
        iiv.n=iiv.n+1 ; iiv[iiv.n] = ii
      end
    end
  end

  local trc = env.info >= 3
  if iiv.n > A.ncol-A.nrow then      -- too many variables removed
    if trc then printf("nlopt: %d variables can't be rejected\n", _iv.n) end
    _iv.n = -1
  elseif iiv.n > 0 then              -- remove selected variables
    if trc then printf("nlopt: total %d variables are rejected\n", _iv.n) end
    A:remcol(iiv) ; rx:remvec(iiv) ; rdx:remvec(iiv)
  end

  return _iv
end

-- Bisection ------------------------------------------------------------------o

local function bisection (env, bisec)
  local var, trc = env.__var, env.info >= 3
  local x, h, fval, bak, backup in var
  local nbi, ret = 0

  backup(var, bak)

  for i=1,bisec do
    if trc then printf("nlopt: trying Bisection %d.\n", i) end
    h:div(2,h) ; x:sub(h,x) ; var.fval = fval         -- for proper var.fstp
    ret = eval_fun(env)                               -- call user cmd/fun
    if ret and var.fval < fval then                   -- better minimum found
      nbi, fval = i, var.fval ; backup(var, bak)      -- update backup
    elseif nbi > 0 then break end                     -- getting worst, stop
  end

  backup(bak, var)                                    -- restore best/init case

  if nbi > 0 then                                     -- new minimum found
    if trc then printf("nlopt: Bisection succeeded [%d].\n", nbi) end
    if var.chkstp(env) then return true end           -- check criteria
  elseif trc then printf("nlopt: Bisection failed [%d].\n", bisec) end

  return ret ~= nil and nbi or nil
end

-- Levenberg-Marquardt --------------------------------------------------------o

local function ld_lmdif (env)
  local var, obj = env.__var, env.objective
  local x, h, c, cjac, xadj, xrej, crej, backup in var
  local jstra, jiter, jtau, bisec in obj

  -- default setup
  jstra, jiter, jtau, bisec = jstra or 1, max(1, jiter or 10),
                            max(eps, jtau or 1e-3), bisec or obj.exec and 0 or 3

  if env.info >= 3 then
    printf("nlopt: jstra=%d, jiter=%d, jtau=%g, bisec=%d\n", jstra, jiter, jtau, bisec)
  end

  -- adjust variables (i.e. adjust x to fit bbox if any)
  disp_adjrej(env, save_adjrej(xadj, adjust_vars(env)), "adjusting variables")

  -- compute function (only)
  if eval_fun(env) == nil then return nil end

  -- check stopping criteria
  if var.chkstp(env) then return true end

  -- persistent variables
  local bak, nu0, mu = {}, 2, 0

  while true do
    -- compute jacobian
    if eval_jac(env) == nil then return nil end

    -- build system J*h = -b from copies for reduction
    local J, b = cjac:copy(), c:copy()

    -- reject constraints with insufficient row norm in Jacobian (see jtol)
    local ic = disp_adjrej(env, save_adjrej(crej, reject_cons(env, J, b)),
                                                        "rejecting constraints")
    if ic.n < 0 then -- Jacobian is empty (vs jtol)
      var.status = _C.NLOPT_ROUNDOFF_LIMITED ; return
    end

    -- build system (A + mu.diag(A))h = -g
    local nrm  = J:norm()*2 -- conditioning
    local A, g = J:tmul(J)/nrm, J:tmul(b)/nrm

    -- initialise damping terms
    local nu = nu0
    if mu == 0 then mu = jtau/nrm * A:max('diag') end

    -- debug info
    if env.debug >= 2 then
      printf("N-JAC =\n  % -.16e\n", nrm)
      A:print"A" ; g:print"g"
    end

    -- backup current state
    backup(var, bak)

  ::damping_loop::
    if nu > nu0 and env.info >= 4 then
      printf("nlopt: LMD rolling back, trying with mu=%-.6e, nu=%d\n", mu, nu)
    end

    -- compute A + mu.diag(A)
    local Amu = A + (mu * A:getdiag()):diag()
--  local Amu = A:copy():setdiag(A:getdiag()*(1+mu))             -- alt method
--  local Amu = A:copy():map(A:getdidx(), \x,ij -> x*(1+mu))     -- alt method
--  local Amu = A:map \x,ij -> eq(A:getij(ij)) and x*(1+mu) or x -- alt method
--  local Amu = A:map \x,i,j -> i == j and x*(1+mu) or x         -- old method

    if env.debug >= 2 then Amu:print"Amu" end

    -- solve (and reduce) damped system
    local itr, iv, rx, rdx, rk, sv = 1, {n=0}, x:copy()
    while itr <= jiter do
      -- one Gauss-Newton step using SVD to find min_h ||g - Ah||
      rdx, rk, sv = Amu:ssolve(g, obj.rcond)
      -- turn the solution into min_h ||Ah + g||
      rdx:unm(rdx)

      -- debug info
      if env.info >= 4 then
        printf("nlopt: Gauss-Newton step using SVD, \z
               rank=%d, rcond=%-.3e, scond=%-.3e\n",
               rk, obj.rcond or eps, sv[1]/(sv[rk] or 0))
      end
      if env.debug >= 2 then sv:print"LMDIF-SV" end

      -- no variable reduction
      if jstra == 0 then break end

      -- reject variables with wrong slope and bbox (see jstra)
      local _iv = reject_vars(env, Amu, rx, rdx, iv)
      if _iv.n <= 0 then break end -- none or too many variables rejected
      iv, itr = _iv, itr + 1
    end

    disp_adjrej(env, save_adjrej(xrej, iv), "rejecting variables")

    -- update variables, rejected variables don't move
    h:setvec(1..#rdx,rdx):insvec(iv,0) ; x:add(h,x)

    -- change strategy if jiter reached (madx-like)
    if itr > jiter and jstra >= 3 then
      if env.info >= 3 then
        printf("nlopt: max %d reduction attempted, strategy=0\n", itr)
      end
      jstra = 0
    end

    -- check variables (and adjust if needed)
    disp_adjrej(env, save_adjrej(xadj, check_vars(env)), "adjusting variables")

    -- compute function (only)
    if eval_fun(env) == nil then return nil end

    -- check stopping criteria
    if var.chkstp(env) then return true end

    -- try bisection if fval increases
    local nbi = 0
    if var.fstp > 0 and bisec >= 1 then
      nbi = bisection(env, bisec)
      if nbi == true or nbi == nil then return nbi end
    end

    -- check LM-step quality (vs linear model)
    local dF, dL = bak.c:sumsqr() - var.c:sumsqr(), h:dot(mu*h-g)
    local rho = dF/dL

    -- debug info
    if env.debug >= 2 then
      printf("LMDIF: mu=% -.5e, nu=%d, rho=% -.5e, dF=% -.5e, dL=% -.5e, nbi=% -.5e\n",
              mu, nu, rho, dF, dL, nbi)
    end

    if dL > 0 and dF > 0 then -- decrease damping term, reset nu (LM step)
      mu = mu*max(1/3, 1-(2*rho-1)^3)
    elseif nbi > 0 then       -- decrease damping term, reset nu (Bisec step)
      mu = mu/(nbi+1)
    elseif nu < 2^16 then     -- increase damping term, cancel step
      backup(bak, var)
      mu, nu = mu*nu, 2*nu
      goto damping_loop
    end
  end
end

-- Jacobian -------------------------------------------------------------------o

local function ld_jacobian (env)
  local var, obj = env.__var, env.objective
  local x, h, c, cjac, xadj, xrej, crej in var
  local jstra, jiter, bisec in obj

  -- default setup
  jstra, jiter, bisec = jstra or 1, max(1, jiter or 10),
                        bisec or obj.exec and 0 or 3

  if env.info >= 3 then
    printf("nlopt: jstra=%d, jiter=%d, bisec=%d\n", jstra, jiter, bisec)
  end

  -- adjust variables (i.e. adjust x to fit bbox if any)
  disp_adjrej(env, save_adjrej(xadj, adjust_vars(env)), "adjusting variables")

  -- compute function (only)
  if eval_fun(env) == nil then return nil end

  -- check stopping criteria
  if var.chkstp(env) then return true end

  while true do
    -- compute jacobian
    if eval_jac(env) == nil then return nil end

    -- build system J*h = -b from copies for reduction
    local J, b = cjac:copy(), c:copy()

    -- reject constraints with insufficient row norm in Jacobian (see jtol)
    local ic = disp_adjrej(env, save_adjrej(crej, reject_cons(env, J, b)),
                                                        "rejecting constraints")
    if ic.n < 0 then -- Jacobian is empty (vs jtol)
      var.status = _C.NLOPT_ROUNDOFF_LIMITED ; return
    end

    -- solve (and reduce) system
    local itr, iv, rx, rdx, rk, sv = 1, {n=0}, x:copy()
    while itr <= jiter do
      -- one Newton-Raphson step using SVD to find min_h ||b - Jh||
      rdx, rk, sv = J:ssolve(b, obj.rcond)
      -- turn the solution into min_h ||Jh + b||
      rdx:unm(rdx)

      -- debug info
      if env.info >= 4 then
        printf("nlopt: Newton-Raphson step using SVD, \z
               rank=%d, rcond=%-.3e, scond=%-.3e\n",
               rk, obj.rcond or eps, sv[1]/(sv[rk] or 0))
      end
      if env.debug >= 2 then sv:print"JACOBIAN-SV" end

      -- no variable reduction
      if jstra == 0 then break end

      -- reject variables with wrong slope and bbox (see jstra)
      local _iv = reject_vars(env, J, rx, rdx, iv)
      if _iv.n <= 0 then break end -- none or too many variables rejected
      iv, itr = _iv, itr + 1
    end

    disp_adjrej(env, save_adjrej(xrej, iv), "rejecting variables")

    -- update variables, rejected variables don't move
    h:setvec(1..#rdx,rdx):insvec(iv,0) ; x:add(h,x)

    -- change strategy if jiter reached (madx-like)
    if itr > jiter and jstra >= 3 then
      if env.info >= 3 then
        printf("nlopt: max %d reduction attempted, strategy=0\n", itr)
      end
      jstra = 0
    end

    -- check variables (and adjust if needed)
    disp_adjrej(env, save_adjrej(xadj, check_vars(env)), "adjusting variables")

    -- compute function (only)
    if eval_fun(env) == nil then return nil end

    -- check stopping criteria
    if var.chkstp(env) then return true end

    -- try bisection if fval increases
    if var.fstp > 0 and bisec >= 1 then
      local nbi = bisection(env, bisec)
      if nbi == true or nbi == nil then return nbi end
    end
  end
end

-- LSOPT lib ------------------------------------------------------------------o

local dispatch = {
  [_C.NLOPT_LD_LMDIF   ] = ld_lmdif,
  [_C.NLOPT_LD_JACOBIAN] = ld_jacobian,
}

local function lsoptrun (env)
  return dispatch[env.__var.method.id](env)
end

--  local var = env.__var
--  local fun = dispatch[var.method.id]()
--
--  -- optimizer (protected call)
--  return xpcall(fun, debug.traceback, env)

-- end ------------------------------------------------------------------------o
return lsoptrun
