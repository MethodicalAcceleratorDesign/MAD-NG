--[=[
 o-----------------------------------------------------------------------------o
 |
 | BeamBeam module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide beam beam physics for beambeam element

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- locals ---------------------------------------------------------------------o

local inf, twopi, sqrtpi, epsilon0  in MAD.constant
local abs, exp, sqrt, cplx, min     in MAD.gmath

local  twopi_eps0 = twopi*epsilon0
local _twopi_eps0 = 1/twopi_eps0

-- implementation -------------------------------------------------------------o

-- see http://inspirehep.net/record/316705/files/slac-pub-5582.pdf

local function ExEy_gauss_round (x, y, sig)
  local r2 = x^2 + y^2
  local t = _twopi_eps0

  if r2 < 1e-20 then
    t = t * sqrt(r2)/sig  -- linearised
  else
    t = t * (1 - exp(-0.5*r2*sig^-2))/r2
  end

  return t*x, t*y -- Ex, Ey
end

local function ExEy_gauss_ellip (x, y, sigx, sigy)
  -- guard for round beam
  if sigx == sigy then return ExEy_gauss_round(x,y,sigx) end

-- Always go to the first quadrant and then apply the signs a posteriori
-- numerically more stable.
  local abx, aby, swap = abs(x), abs(y), false

  if sigx < sigy then
    abx, aby, sigx, sigy, swap = aby, abx, sigy, sigx, true
  end

  local      S = sqrt(2*(sigx^2 - sigy^2))
  local zetaBE = cplx(abx, aby)/S
  local  etaBE = cplx(sigy/sigx*abx, sigx/sigy*aby)/S

  local w_zetaBE = zetaBE:wf() --:print("wzeta",0)
  local  w_etaBE =  etaBE:wf() --:print("weta" ,0)

  local factBE = 1/(2*epsilon0*sqrtpi*S)
  local  expBE = exp(-0.5*((abx/sigx)^2 + (aby/sigy)^2))
  local Ey, Ex = (factBE*(w_zetaBE - w_etaBE*expBE)):reim()

  if swap then Ex, Ey = Ey, Ex end

  if x < 0 then Ex = -Ex end
  if y < 0 then Ey = -Ey end

  return Ex, Ey
end

function M.ExEy_GxGy_gauss (x, y, sigx, sigy, sigdif, do_Gs)
  local mindif = sigdif or 1e-12
  local Ex, Ey, Gx, Gy

  if abs(sigx - sigy) < mindif then
    local sig = 0.5*(sigx + sigy)

    Ex, Ey = ExEy_gauss_round(x, y, sig)

    if do_Gs then
      if abs(x) + abs(y) < mindif then
        Gx, Gy = 0, 0
      else
        local x2, y2 = x^2, y^2
        local c0 = x2+y2
        local c1 = 0.5/c0
        local c2 = x*Ex - y*Ey
        local c3 = _twopi_eps0 * sig^-2 * exp(-0.5*c0*sig^-2)
        Gx = c1*(-c2 + x2*c3)
        Gy = c1*( c2 + y2*c3)
      end
    end
  else
    Ex, Ey = ExEy_gauss_ellip(x, y, sigx, sigy)

    if do_Gs then
      local c1 = 0.5/(sigx^2 - sigy^2)
      local c2 = x*Ex + y*Ey
      local c3 = exp(-0.5*((x/sigx)^2 + (y/sigy)^2))
      Gx = -c1*(c2 + _twopi_eps0 * (sigy/sigx * c3 - 1))
      Gy =  c1*(c2 + _twopi_eps0 * (sigx/sigy * c3 - 1))
    end
  end

--Ex:print("Ex",0) ; Ey:print("Ey",0)

  return Ex, Ey, Gx, Gy
end

-- end ------------------------------------------------------------------------o
return M
