--[=[
 o-----------------------------------------------------------------------------o
 |
 | Object module (help)
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o
]=]

local __help = {}

-- help -----------------------------------------------------------------------o

__help.object = [=[
NAME
  object -- manage object model

SYNOPSIS
  obj1 = Object {}               -- create a new empty object
  obj2 = Object { ... }          -- create a new object with values
  obj3 = Object 'name' { ... }   -- create a new object with name and values
  obj4 = obj3 'name' { ... }     -- create a new object from parent (class)

DESCRIPTION
  The object module implements the necessary machinery to support prototype-
  based programming with value semantic for functions and further extensions:
  - On read, the lookup of values and functions follows the inheritance down to
    Object. If the retrieved value is a function, it is called with self passed
    as argument #1 (can be ignored) and the result is returned (i.e. function
    with value semantic).
  - On write, the value is simply stored in the current object (no lookup)
    unless it is readonly. To override these behaviors, just (re)defined the
    __newindex metamethod using set_metamethod with overriding allowed (use with
    care!).
  - On build, the new instance is connected to its parent (inheritance). If the
    new instance has a defined __init metamethod (shared), it will be called on
    the new instance and non-nil result or the new instance will be returned.
  - To set:
    + variables, use set_variable.
    + functions n-arity or avoid value semantic, use set_function.
    + metamethods (shared), use set_metamethod.
    + set is an alias for set_variable.
  - To get:
    + variables (inherited), use get_variable.
    + the list of all variables keys, including inherited ones, use get_varkey.
    + get and getk are aliases for get_variable and get_varkey.
  - Root 'Object' defines the following variables:
    + 'name'   points to 'self' name unless overridden (alias)
    + 'parent' points to 'self' parent unless overridden (alias)
    + '__par'  points to 'self' parent unless overridden (alias)
    + '__var'  points to 'self' variables unless overridden (alias)
    + '__id'   holds 'self' name if provided (variable)

RETURN VALUE
  Object, the root constructor of objects. This module also extends the typeid
  with the helper functions is_object, is_class, is_instanceOf and is_readonly.

ERRORS
  Objects constructors trig an error if the argument #1 is not a string (name)
  or a raw table (variables). Using an object incompletely initialized (e.g.
  with a name but no value) trigs also an error.

EXAMPLES
  Point = MAD.Object {}          -- point is an instance of Object
  p1 = Point { x=2, y=2 }        -- p1 is an instance of Point
  p2 = p1 { x=3 }                -- p2 is an instance of p1 and inherits p1.y
  p1.x, p1.z = 1, 3              -- set p1.x, p1.z
  print(p1.x, p1.y, p1.z)        -- print 1 2 3
  print(p2.x, p2.y, p2.z)        -- print 3 1 3

SEE ALSO
  None.
]=]
__help.Object = __help.object

-- documentation --------------------------------------------------------------o

__help['object: model scheme'] = [=[

Schematic object-model representation:
--------------------------------------

  o0 = MAD.Object
  o1 = o0 'obj1' {*o1-var*}
  o2 = o1 'obj2' {*o2-var*}
  o3 = o1 'obj3' {*o3-var*}
                                               +-------------+
                             +---------------+>| *meta-tbl*  |<------------+
+---------+                  |   +---------+ | | metamethods | +---------+ |
|  *o2*   |                  |   |  *o1*   | | +-------------+ |  *o0*   | |
|  [meta] |------------------+   |  [meta] |-+                 |  [meta] |-+
| __index |------------------|-+ | __index |-----------------+ | __index |--->.
|   [flg] |  +-----------+   | | |   [flg] |  +-----------+  | |   [flg] |
|   [var] |->|  *o2-var* |   | | |   [var] |->| *o1-var*  |  | |   [var] |-+
+---------+  |    [meta] |-+ | | +---------+  |    [meta] |-+| +---------+ |
     ^       | variables | | | |      ^       | variables | ||             |
     |       +-----------+ | | |      |       +-----------+ ||        +----+
     +---------------------+ | |      |             ^       ||        v
+---------+                  | |      +-------------|-------+|  +-----------+
|  *o3*   |                  | |      |             |        |  | *o0-var*  |
|  [meta] |------------------+ |      |             |        +->|    [meta] |->.
| __index |--------------------+--------------------+           | variables |
|   [flg] |  +-----------+                                      +-----------+
|   [var] |->| *o3-var*  |
+---------+  |    [meta] |-+
     ^       | variables | |
     |       +-----------+ |
     +---------------------+
]=]

-- examples -------------------------------------------------------------------o

__help['object: model examples'] = [=[

Catching creation:
------------------
  Example how to count the number of objects created

  local count = 0
  local set_counter = \s s:set_metamethod { __init =\=> count=count+1 end }
  set_counter(MAD.Object) -- count children creation

Catching writes:
----------------
  Example how to set a notification-on-write with logging

  local function set_notification (self)
    local nwidx = getmetatable(self).__newindex
    local mm = \s,k,v =>
      trace(s,k,v) -- logging
      nwidx(s,k,v) -- forward, mandatory!
    end
    self:set_metamethod({__newindex = mm}, true) -- override!
  end
  set_notification(MAD.Object) -- notify writes to any children

Forwarding to parent:
---------------------
  Example how to forbid status change through set_readonly

  local ro_obj = Object {} :set_readonly(true) -- set status
  local parent = ro_obj.parent
  ro_obj:set_function {
    set_readonly = \s,f =>                     -- block any changes for ro_obj
      assert(s ~= ro_obj, "invalid argument #1 (forbidden access to 'ro_obj')")
      return parent.set_readonly(s,f)          -- forward to parent for children
    end
  }

Copying status to children:
---------------------------
  Example how to make children of ro_obj readonly by default (but modifiable)

  ro_obj:set_metamethod {__init = \s -> s:set_readonly(true) }
]=]

-- object methods

__help['typeid.is_object'] = [=[
NAME
  is_object, is_instanceOf,            -- identify object class
  is_class, is_readonly, set_readonly. -- check and set object status

SYNOPSIS
  is_class(obj)
  is_object(obj)
  is_readonly(obj)
  is_instanceOf(obj,class)

  obj:is_class()
  obj:is_readonly()
  obj:is_instanceOf(class)
  obj:set_readonly(boolean or nil)

DESCRIPTION
  The is_instanceOf method follows and check the objects hierarchy from obj down
  to class or Object if class is not in the hierarchy of obj. The is_object
  function is equivalent to is_instanceOf(obj, Object) but faster. The method
  set_readonly protects or unprotects against write access (weak protection).
  The functions is_class and is_readonly check the status of the object, where a
  class is an object already used as a constructor.

RETURN VALUES
  is_object and is_instanceOf return true if obj inherits from Object or class
  respectively. is_readonly and is_class return true if obj is read only or was
  already used as a constructor, respectively. set_readonly returns the object.

ERRORS
  is_instanceOf trigs an error if the argument #2 (class) is not a valid object.
  set_readonly trigs an error if the argument #2 is not a boolean or nil or if
  argument #1 is Object itself.

EXAMPLES
  local is_object, is_instanceOf, is_readonly, Object in MAD
  print( is_object 'yes' )                    -- false
  print( is_object(Object) )                  -- true
  print( is_object(Object {}) )               -- true
  print( is_class 'yes' )                     -- false
  print( is_class(Object) )                   -- true
  print( is_class(Object {}) )                -- false
  print( is_instanceOf('yes', Object) )       -- false
  print( is_instanceOf(Object, Object) )      -- true
  print( is_instanceOf(Object {}, Object) )   -- true

  print( is_readonly(Object) )                -- true
  Object.a = 2                                -- error
  Object {} :set_readonly(true).a = 2         -- error

SEE ALSO
  None.
]=]
__help['typeid.is_class'     ] = __help['typeid.is_object']
__help['typeid.is_readonly'  ] = __help['typeid.is_object']
__help['typeid.is_instanceOf'] = __help['typeid.is_object']
__help['typeid.set_readonly' ] = __help['typeid.is_object']

-- object methods

__help['object.iterator'] = [=[
NAME
  #, pairs, ipairs    -- length operator and iterators

SYNOPSIS
  #obj
  for k,v in  pairs(obj) do ... end
  for i,v in ipairs(obj) do ... end

DESCRIPTION
  The length operator is equivalent to the table length operator applied to the
  object variables. The pairs and ipairs functions return iteratators that run
  respectively over all the keys (and indexes) and over all the indexes of the
  object variables, but not over the inherited variables. The function value
  semantic is _not_ preserved to ease object copy.

RETURN VALUES
  The length operator returns the number of items in the list part of the
  object. The pairs and ipairs operators return the appropriate arguments for
  stateless iterators, that is the iterator function, the object and the
  pre-initial key.

EXAMPLES
  local p0 = MAD.Object 'p0' { 2, 3, 4, x=1, y=2, z=\s s.y*3 }
  local p1 = p0 'p1' { 7, 8, x=-1, y={} }

  for i=1,#p0           do print(i,    p0[i]) end
  for i=1,#p1           do print(i,    p1[i]) end
  for k,v in  pairs(p0) do print(k, v, p0[k]) end
  for k,v in  pairs(p1) do print(k, v, p1[k]) end
  for i,v in ipairs(p0) do print(i, v, p0[i]) end
  for i,v in ipairs(p1) do print(i, v, p1[i]) end

SEE ALSO
  None.
]=]
__help['object:#'     ] = __help['object.iterator']
__help['object.pairs' ] = __help['object.iterator']
__help['object.ipairs'] = __help['object.iterator']

__help['object:get'] = [=[
NAME
  get_variable, get_varkey, set_variable, set_function, set_metamethod,
  get, getk, set, clear_array, clear_variable.

SYNOPSIS
  obj:get_variable  ({...} [, eval])
  obj:set_variable  ({...} [, override])
  obj:set_function  ({...} [, override [, strict]])
  obj:set_metamethod({...} [, override [, strict]])
  obj:get_varkey    ([class])
  obj:clear_array   ()
  obj:clear_variable()

DESCRIPTION
  The get_variable method gets values from a list of strings used as keys,
  following the value semantic of functions unless eval is 'false'. The
  get_varkey method collects all the variables names of an object iterating
  through inheritance up to class (excluded). The set_variable method sets or
  updates values from a mappable. The clear_array and clear_variable remove all
  variables from the array part of the object and from the all object
  respectively, but it does not affect its parent link nor its metamethods. The
  set_function method sets or updates functions from a mappable in a special way
  that bypasses the value semantic of functions in the object model and enforces
  the call semantic. The set_metamethod method sets metamethods from a mappable
  that are shared by children (see the object model scheme). The methods get,
  getk, set are aliases for get_variable, get_varkey and set_variable
  respectively. The default value for override is 'true' for set_variable and
  set_function and 'false' for set_metamethod. The default value for eval and
  strict is 'true'. The default value for class is Object.

RETURN VALUES
  A table containing the key-value pairs for the specified keys for the method
  get_variable, a table containing all the variables names for the method
  get_varkey, and the object itself for other methods.

ERRORS
  All these methods trig an error if argument #1 is not a valid object and if
  argument #2 is not an iterable item for get_variable or a mappable item for
  others. The method set_function trig an error if values in the mappable item
  (argument #2) are not callable. All these methods except get_variable trig an
  error if keys in the mappable (argument #2) already exist and overriding is
  not allowed by argument #3. The components for set_function must be callable,
  unless strict is 'false'. The metamethod names for set_metamethod must be one
  of the supported metamethod name (i.e. is_metaname returns true) unless strict
  is 'false'.

EXAMPLES
  Point = MAD.Object {}                -- point is an instance of Object
  p1 = Point { x=2, y=2 }              -- p1 is an instance of Point
  p1:set { x=1, z=3 }                  -- update p1.x and set p1.z
  p1:set { z2=\s 2*s.z }               -- set p1.z2 = 2*p1.z
  p1.z3=\s 3*s.z                       -- set p1.z3 = 3*p1.z
  p1:set_function { zn=\s,n n*s.z }    -- set function p1:zn(n) = n*p1.z
  print(p1.x, p1.y, p1.z, p1.z2, p1.z3, p1:zn(4))
    1       2       3       6       9       12
  t = p1:get{'x','y','z','z2','z3'}    -- get variables values
  print(t.x, t.y, t.z, t.z2, t.z3)
    1       2       3       6       9
  t = p1:get(p1:getk(nil,'[^_]'))      -- get all variables values with keys not
                                       --  starting by an underscore
SEE ALSO
  None.
]=]
__help['object:getk'          ] = __help['object:get']
__help['object:get_varkey'    ] = __help['object:get']
__help['object:get_variable'  ] = __help['object:get']
__help['object:set'           ] = __help['object:get']
__help['object:set_variable'  ] = __help['object:get']
__help['object:set_function'  ] = __help['object:get']
__help['object:set_metamethod'] = __help['object:get']
__help['object:clear_array'   ] = __help['object:get']
__help['object:clear_variable'] = __help['object:get']

__help['object:rawget'] = [=[
NAME
  rawlen, rawget, rawset.

SYNOPSIS
  obj:rawlen()
  obj:rawget(key)
  obj:rawset(key, value)

DESCRIPTION
  The special rawlen, rawget and rawset methods respectively gets length, gets
  from and sets to the object the strict value of the key, bypassing
  inheritance, functions evaluation, readonly protection and functors
  encapsulation. These methods may be useful in some exceptionnal cases like
  retrieving variables as-is, or bybassing (overridden) metamethods __len,
  __index and __newindex. The rawset method is unsafe and can corrupt the
  object model, use with caution, for expert only!

RETURN VALUE
  Same as standard rawlen, rawget and rawset.

ERROR
  None.

SEE ALSO
  get_variable, set_variable.
]=]
__help['object:rawset'] = __help['object:rawget']
__help['object:rawlen'] = __help['object:rawget']

-- members

__help['object:name'] = [=[
NAME
  name, parent, variable    -- inherited variables

SYNOPSIS
  obj.name
  obj.parent.name
  obj.variable.name

DESCRIPTION
  The name, parent and variable variables are aliased inherited from Object that
  return respectively the name and the parent of the current object as well as
  its variable storage. Accessing variables explicitely by the intermediate of
  the variable member prevent the function-as-value semantic, but not
  inheritance, see rawget method to prevent also inheritance. In practice, these
  variables are defined as functions with value semantic and can be overridden
  and restored.

RETURN VALUES
  The name, parent and variable variables refer respectively to the name, the
  parent and the variable storage of the current object.

EXAMPLES
  local p0 = MAD.Object 'p0' {}
  local p1 = p0 'p1' {}
  print(p1.name, p1.parent.name)  -- 'p1'   'p0'
  print(p1.variable.name)         -- function: 0x020cdb70

SEE ALSO
  None.
]=]
__help['object:parent'  ] = __help['object:name']
__help['object:variable'] = __help['object:name']

-- end ------------------------------------------------------------------------o
return __help
