--[=[
 o-----------------------------------------------------------------------------o
 |
 | Matrix rotation module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Extends the matrix module with matrix of rotations.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local twopi                                        in math
local abs, max, round, sign, sin, cos, atan2, sqrt in MAD.gmath
local is_iterable                                  in MAD.concept

-- helpers --------------------------------------------------------------------o

local function chk2d(x)
  assert(x:nrow() == 2 and x:ncol() == 2,
         "invalid argument #1 (2D squared matrix expected)")
  return x
end

local function chk3d(x)
  assert(x:nrow() == 3 and x:ncol() == 3,
         "invalid argument #1 (3D squared matrix expected)")
  return x
end

local function chk3v(x)
  assert(x:nrow() == 3 and x:ncol() == 1,
         "invalid argument #5 (3D vector expected)")
  return x
end

local function rangle (a, ref_a)
  return a + twopi * round((ref_a - a) / twopi)
end

-- rotations ------------------------------------------------------------------o

-- 2D rotations

local function rot (x, a)
  local c, s = cos(a), sin(a)
  return chk2d(x):fill { c, -s,
                         s,  c }
end

-- 3D rotations (one axis)

local function rotx (x, ax) -- Rx
  local c, s = cos(ax), sin(ax)
  return chk3d(x):fill { 1, 0, 0,
                         0, c,-s,
                         0, s, c }
end

local function roty (x, ay) -- Ry
  local c, s = cos(ay), sin(ay)
  return chk3d(x):fill { c, 0, s,
                         0, 1, 0,
                        -s, 0, c }
end

local function rotz (x, az) -- Rz
  local c, s = cos(az), sin(az)
  return chk3d(x):fill { c,-s, 0,
                         s, c, 0,
                         0, 0, 1 }
end

-- 3D rotations (two axis)

local function rotxy (x, ax, ay) -- Ry.Rx
  local cx, sx = cos(ax), sin(ax)
  local cy, sy = cos(ay), sin(ay)
  return chk3d(x):fill { cy, sx*sy, cx*sy,
                          0,    cx,   -sx,
                        -sy, sx*cy, cx*cy }
end

local function rotxz (x, ax, az) -- Rz.Rx
  local cx, sx = cos(ax), sin(ax)
  local cz, sz = cos(az), sin(az)
  return chk3d(x):fill { cz,-cx*sz, sx*sz,
                         sz, cx*cz,-sx*cz,
                          0,    sx,    cx }
end

local function rotyz (x, ay, az) -- Rz.Ry
  local cy, sy = cos(ay), sin(ay)
  local cz, sz = cos(az), sin(az)
  return chk3d(x):fill { cy*cz,-sz, sy*cz,
                         cy*sz, cz, sy*sz,
                           -sy,  0,    cy }
end

local function rotyx (x, ay, ax) -- Rx.Ry
  local cx, sx = cos(ax), sin(ax)
  local cy, sy = cos(ay), sin(ay)
  return chk3d(x):fill {    cy,  0,    sy,
                         sx*sy, cx,-sx*cy,
                        -cx*sy, sx, cx*cy }
end

local function rotzx (x, az, ax) -- Rx.Rz
  local cx, sx = cos(ax), sin(ax)
  local cz, sz = cos(az), sin(az)
  return chk3d(x):fill {    cz,   -sz,  0,
                         cx*sz, cx*cz,-sx,
                         sx*sz, sx*cz, cx }
end

local function rotzy (x, az, ay) -- Rz.Ry
  local cy, sy = cos(ay), sin(ay)
  local cz, sz = cos(az), sin(az)
  return chk3d(x):fill { cy*cz,-cy*sz, sy,
                            sz,    cz,  0,
                        -sy*cz, sy*sz, cy }
end

-- 3D rotations (three axis)

local function rotxyz (x, ax, ay, az) -- Rz(az).Ry(ay).Rx(ax)
  local cx, sx = cos(ax), sin(ax)
  local cy, sy = cos(ay), sin(ay)
  local cz, sz = cos(az), sin(az)
  return chk3d(x):fill {
    cy*cz, sx*sy*cz - cx*sz, cx*sy*cz + sx*sz,
    cy*sz, sx*sy*sz + cx*cz, cx*sy*sz - sx*cz,
      -sy,            sx*cy,            cx*cy }
end

local function torotxyz (x) -- Rz(az).Ry(ay).Rx(ax)
  chk3d(x)
  local x11, x21      = x:_get(1,1), x:_get(2,1)
  local x31, x32, x33 = x:_get(3,1), x:_get(3,2), x:_get(3,3)
  ax = atan2( x32, x33 )
  ay = atan2(-x31, sqrt(x32^2 + x33^2) )
  az = atan2( x21, x11 )
  return ax, ay, az
end

local function rotzyx (x, ax, ay, az) -- Rx(ax).Ry(ay).Rz(az)
  local cx, sx = cos(ax), sin(ax)
  local cy, sy = cos(ay), sin(ay)
  local cz, sz = cos(az), sin(az)
  return chk3d(x):fill {
            cy*cz   ,        - cy*sz   ,  sy   ,
    cx*sz + sx*sy*cz,  cx*cz - sx*sy*sz, -sx*cy,
    sx*sz - cx*sy*cz,  sx*cz + cx*sy*sz,  cx*cy }
end

local function rotmad (x, th, phi, psi) -- Ry(th).Rx(-phi).Rz(psi)  (see survey)
  local cx, sx = cos(-phi), sin(-phi)  -- phi  : Elevation angle.
  local cy, sy = cos( th ), sin( th )  -- theta: Azimuthal angle.
  local cz, sz = cos( psi), sin( psi)  -- psi  : Roll      angle.
  return chk3d(x):fill {
    sx*sy*sz + cy*cz, sx*sy*cz - cy*sz, cx*sy,
               cx*sz,            cx*cz,   -sx,
    sx*cy*sz - sy*cz, sx*cy*cz + sy*sz, cx*cy }
end

local function torotmad (x, th, phi, psi) -- extract angles         (see survey)
  chk3d(x)
  local x21, x22      = x:_get(2,1), x:_get(2,2)
  local x13, x23, x33 = x:_get(1,3), x:_get(2,3), x:_get(3,3)
  th  = rangle( atan2( x13, x33 ), th  )
  phi =         atan2( x23, sqrt(x21^2 + x22^2) )
  psi = rangle( atan2( x21, x22 ), psi )
  return th, phi, psi
end

-- 3D rotations (vector)

local function rotv (x, v, a)
  assert(is_iterable(v), "invalid argument #2 (iterable expected)")
  local vx, vy, vz = v[1], v[2], v[3]
  local n = vx*vx + vy*vy + vz*vz
  if n == 0 then return chk3d(x):eye() end
  if n ~= 1 then
    n = 1/sqrt(n)
    vx, vy, vz = n*vx, n*vy, n*vz
  end
  local xx, yy, zz = vx*vx, vy*vy, vz*vz
  local xy, xz, yz = vx*vy, vx*vz, vy*vz
  local c, s = cos(a), sin(a)
  local C    = 1-c
  return chk3d(x):fill {
    xx*C +    c, xy*C - vz*s, xz*C + vy*s,
    xy*C + vz*s, yy*C +    c, yz*C - vx*s,
    xz*C - vy*s, yz*C + vx*s, zz*C +    c }
end

-- Rv(pi).(Rz(pi/6).Ry(pi/6) {0,0,1})
-- 1.00000e+00 1.66667e-01 1.66667e-01 1.00000e+00 1.00000e+00 1.42009e-02 -2.50000e-01  2.84018e-02
local function torotv (x, r_)
  chk3d(x)
  local r = r_ or {}
  assert(is_iterable(r), "invalid argument #2 (iterable expected)")
  local vx = x:_get(3,2) - x:_get(2,3)
  local vy = x:_get(1,3) - x:_get(3,1)
  local vz = x:_get(2,1) - x:_get(1,2)
  local n = sqrt(vx^2 + vy^2 + vz^2)
  local t = x:_get(1,1) + x:_get(2,2) + x:_get(3,3)
  local a = atan2(n, t-1)
  n = n ~= 0 and 1/n or 0
  r[1], r[2], r[3] = n*vx, n*vy, n*vz
  return r, a
end

-- 3D rotations (quaternion)

local function rotq (x, q)
  assert(is_iterable(q), "invalid argument #2 (iterable expected)")
  local qw, qx, qy, qz = q[1], q[2], q[3], q[4]
  local n = qw*qw + qx*qx + qy*qy + qz*qz
  local s = n ~= 0 and 2/n or 0
  local wx, wy, wz = s*qw*qx, s*qw*qy, s*qw*qz
  local xx, xy, xz = s*qx*qx, s*qx*qy, s*qx*qz
  local yy, yz, zz = s*qy*qy, s*qy*qz, s*qz*qz
  return chk3d(x):fill {
    1 - (yy + zz),      xy - wz ,      xz + wy,
         xy + wz , 1 - (xx + zz),      yz - wx,
         xz - wy ,      yz + wx , 1 - (xx + yy) }
end

local function torotq (x, r_)
  chk3d(x)
  local r = r_ or {}
  assert(is_iterable(r), "invalid argument #2 (iterable expected)")
  local xx, yy, zz = x:_get(1,1), x:_get(2,2), x:_get(3,3)
  local tt, rr, ss = xx + yy + zz
  if tt > -0.99999 then -- stable trace
    rr = sqrt(1+tt) ; ss = 0.5/rr
    r[1] = 0.5*rr
    r[2] = (x:_get(3,2) - x:_get(2,3)) * ss
    r[3] = (x:_get(1,3) - x:_get(3,1)) * ss
    r[4] = (x:_get(2,1) - x:_get(1,2)) * ss
    return r
  end
   -- look for more stable trace
  local m = max(xx, yy, zz)
  if m == xx then
    rr = sqrt(1+xx-yy-zz) ; ss = 0.5/rr
    r[1] = (x:_get(3,2) - x:_get(2,3)) * ss
    r[2] = 0.5*rr
    r[3] = (x:_get(1,3) + x:_get(3,1)) * ss
    r[4] = (x:_get(2,1) + x:_get(1,2)) * ss
  elseif m == yy then
    rr = sqrt(1+yy-xx-zz) ; ss = 0.5/rr
    r[1] = (x:_get(3,2) - x:_get(2,3)) * ss
    r[2] = (x:_get(1,3) - x:_get(3,1)) * ss
    r[3] = 0.5*rr
    r[4] = (x:_get(2,1) + x:_get(1,2)) * ss
  elseif m == zz then
    rr = sqrt(1+zz-xx-yy) ; ss = 0.5/rr
    r[1] = (x:_get(3,2) - x:_get(2,3)) * ss
    r[2] = (x:_get(1,3) - x:_get(3,1)) * ss
    r[3] = (x:_get(2,1) - x:_get(1,2)) * ss
    r[4] = 0.5*rr
  end
  return r
end

-- end ------------------------------------------------------------------------o
return {
  rot  = rot,

  rotx = rotx,
  roty = roty,
  rotz = rotz,

  rotxy = rotxy,
  rotxz = rotxz,
  rotyx = rotyx,
  rotyz = rotyz,
  rotzx = rotzx,
  rotzy = rotzy,

  rotxyz = rotxyz,
--  rotxzy = rotxzy, -- todo
--  rotyxz = rotyxz, -- todo
--  rotyzx = rotyzx, -- todo
--  rotzxy = rotzxy, -- todo
--  rotzyx = rotzyx, -- todo
  rotzyx = rotzyx,

  rotpitch = \x,a -> rotx(x, -a),
  rotyaw   = \x,a -> roty(x, -a),
  rotroll  = \x,a -> rotz(x, -a),

  rotv = rotv,          -- from vector
  rotq = rotq,          -- from quaternion
  rotmad = rotmad,      -- from MAD angles (survey)

  torotv = torotv,      -- to vector
  torotq = torotq,      -- to quaternion
  torotxyz = torotxyz,  -- to angles
  torotmad = torotmad,  -- to MAD angles (survey)
}
