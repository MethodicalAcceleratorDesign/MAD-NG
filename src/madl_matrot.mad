--[=[
 o-----------------------------------------------------------------------------o
 |
 | Matrix rotation module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Extends the matrix module with matrix of rotations.

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- locals ---------------------------------------------------------------------o

local _C                                           in MAD
local abs, max, sin, cos, sqrt                     in MAD.gmath
local is_nil, is_iterable                          in MAD.typeid

local ffi = require 'ffi'

local V = ffi.new 'num_t[4]'

local assert =
      assert

-- helpers --------------------------------------------------------------------o

local function chk2d(x)
  assert(x.nrow == 2 and x.ncol == 2,
         "invalid argument #1 (2D squared matrix expected)")
  return x
end

local function chk3d(x)
  assert(x.nrow == 3 and x.ncol == 3,
         "invalid argument #1 (3D squared matrix expected)")
  return x
end

local function chk3v(x)
  assert(x.nrow == 3 and x.ncol == 1,
         "invalid argument #5 (3D vector expected)")
  return x
end

-- rotations ------------------------------------------------------------------o

-- 2D rotations

function M.rot (x, a)
  chk2d(x)
  _C.mad_mat_rot(x._dat, a)
  return x
end

-- 3D rotations (one axis)

function M.rotx (x, ax) -- Rx
  chk3d(x)
  _C.mad_mat_rotx(x._dat, ax)
  return x
end

function M.roty (x, ay) -- Ry
  chk3d(x)
  _C.mad_mat_roty(x._dat, ay)
  return x
end

function M.rotz (x, az) -- Rz
  chk3d(x)
  _C.mad_mat_rotz(x._dat, az)
  return x
end

-- 3D rotations (two axis)

function M.rotxy (x, ax, ay, inv_) -- Ry.Rx
  chk3d(x)
  _C.mad_mat_rotxy(x._dat, ax, ay, not not inv_)
  return x
end

function M.rotxz (x, ax, az, inv_) -- Rz.Rx
  chk3d(x)
  _C.mad_mat_rotxz(x._dat, ax, az, not not inv_)
  return x
end

function M.rotyx (x, ax, ay, inv_) -- Rx.Ry
  chk3d(x)
  _C.mad_mat_rotxy(x._dat, -ax, -ay, not inv_)
  return x
end

function M.rotyz (x, ay, az, inv_) -- Rz.Ry
  chk3d(x)
  _C.mad_mat_rotyz(x._dat, ay, az, not not inv_)
  return x
end

function M.rotzx (x, ax, az, inv_) -- Rx.Rz
  chk3d(x)
  _C.mad_mat_rotxz(x._dat, -ax, -az, not inv_)
  return x
end

function M.rotzy (x, ay, az, inv_) -- Ry.Rz
  chk3d(x)
  _C.mad_mat_rotyz(x._dat, -ay, -az, not inv_)
  return x
end

-- 3D rotations (three axis)

-- ax = -phi   : elevation angle.
-- ay =  theta : azimuthal angle.
-- az =  psi   : roll/tilt angle.

function M.rotxyz (x, ax, ay, az, inv_) -- Rz.Ry.Rx
  chk3d(x)
  _C.mad_mat_rotxyz(x._dat, ax, ay, az, not not inv_)
  return x
end

function M.rotxzy (x, ax, ay, az, inv_) -- Ry.Rz.Rx
  chk3d(x)
  _C.mad_mat_rotxzy(x._dat, ax, ay, az, not not inv_)
  return x
end

function M.rotyxz (x, ax, ay, az, inv_) -- Rz.Rx.Ry
  chk3d(x)
  _C.mad_mat_rotyxz(x._dat, ax, ay, az, not not inv_)
  return x
end

function M.rotyzx (x, ax, ay, az, inv_) -- Rx.Rz.Ry
  chk3d(x)
  _C.mad_mat_rotxzy(x._dat, -ax, -ay, -az, not inv_)
  return x
end

function M.rotzxy (x, ax, ay, az, inv_) -- Ry.Rx.Rz
  chk3d(x)
  _C.mad_mat_rotyxz(x._dat, -ax, -ay, -az, not inv_)
  return x
end

function M.rotzyx (x, ax, ay, az, inv_) -- Rx.Ry.Rz
  chk3d(x)
  _C.mad_mat_rotxyz(x._dat, -ax, -ay, -az, not inv_)
  return x
end

-- 3D angles from rotations

function M.torotxyz (x, inv_) -- extract ax, ay, az from rotxyz
  chk3d(x)
  _C.mad_mat_torotxyz(x._dat, V, not not inv_)
  return V[0], V[1], V[2]
end

function M.torotxzy (x, inv_) -- extract ax, ay, az from rotxzy
  chk3d(x)
  _C.mad_mat_torotxzy(x._dat, V, not not inv_)
  return V[0], V[1], V[2]
end

function M.torotyxz (x, inv_) -- extract ax, ay, az from rotyxz
  chk3d(x)
  _C.mad_mat_torotyxz(x._dat, V, not not inv_)
  return V[0], V[1], V[2]
end

function M.torotyzx (x, inv_) -- extract ax, ay, az from rotyzx
  chk3d(x)
  _C.mad_mat_torotxzy(x._dat, V, not inv_)
  return -V[0], -V[1], -V[2]
end

function M.torotzxy (x, inv_) -- extract ax, ay, az from rotzxy
  chk3d(x)
  _C.mad_mat_torotyxz(x._dat, V, not inv_)
  return -V[0], -V[1], -V[2]
end

function M.torotzyx (x, inv_) -- extract ax, ay, az from rotzyx
  chk3d(x)
  _C.mad_mat_torotxyz(x._dat, V, not inv_)
  return -V[0], -V[1], -V[2]
end

-- 3D rotations (vector)

function M.rotv (x, v, av, inv_)
  chk3d(x)
  assert(is_iterable(v), "invalid argument #2 (iterable expected)")
  V[0], V[1], V[2] = v[1], v[2], v[3]
  _C.mad_mat_rotv(x._dat, V, av, not not inv_)
  return x
end

function M.torotv (x, v_, inv_)
  chk3d(x)
  assert(is_nil(v_) or is_iterable(v_), "invalid argument #2 (iterable expected)")
  local a = _C.mad_mat_torotv(x._dat, v_ and V, not not inv_)
  if v_ then v_[1], v_[2], v_[3] = V[0], V[1], V[2] end
  return a, v_
end

-- 3D rotations (quaternion)

function M.rotq (x, q, inv_)
  chk3d(x)
  assert(is_iterable(q), "invalid argument #2 (iterable expected)")
  V[0], V[1], V[2], V[3] = q[1], q[2], q[3], q[4]
  _C.mad_mat_rotq(x._dat, V, not not inv_)
  return x
end

function M.torotq (x, q_, inv_)
  chk3d(x)
  local q = q_ or {}
  assert(is_iterable(q), "invalid argument #2 (iterable expected)")
  _C.mad_mat_torotq(x._dat, V, not not inv_)
  q[1], q[2], q[3], q[4] = V[0], V[1], V[2], V[3]
  return q
end

-- end ------------------------------------------------------------------------o
return M
