--[=[
 o-----------------------------------------------------------------------------o
 |
 | MAD environment (help)
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o
]=]

local __help = {}

-- help -----------------------------------------------------------------------o

__help.MAD = [=[
NAME
  MAD -- Methodical Accelerator Design environment

SYNOPSIS
  local component_list in MAD

DESCRIPTION
  The MAD environement provides direct 1-level access to all embedded modules
  of the MAD application. This module also provides online help for modules and
  other components, and it allows to export/import modules, objects, functions
  etc. from/to the MAD environment. This is the recommended way to
  extract/extend the MAD environment with components not embedded in the
  application.

  The MAD environment is automatically loaded in the global environment (i.e.
  _G) when the MAD application is started, unless the -M option is used. Hence,
  all components of MAD can be accessed using table access on the MAD
  environment or retieved in local variables (recommended) using <local in
  table> syntax extension as in the example below.

RETURN VALUE
  None. The MAD environement is global and automatically loaded at startup.

ERRORS
  None.

EXAMPLES
  local Sequence, Drift, Multipole in MAD    -- local in table syntax
  local quad = MAD.Quadrupole                -- local assignment

  To clear the global environment from MAD, set it to nil:
  local mad = MAD  MAD = nil                 -- retain local and release global
  local Drift in mad                         -- retrieve Drift from local mad

  To clear MAD extensions from the global environment (backup in MAD),
  set them to nil (arg is a Lua feature, not an extension):
  arg, path, warn, trace, trace_setlevel, trace_setlocation = nil
  local argv, path, warn, trace, trace_setlevel, trace_setlocation in MAD

SEE ALSO
  None.
]=]

__help.import = [=[
NAME
  import -- import modules and components to MAD environment

SYNOPSIS
  import('module' [, override])
  import({...} [, override])

DESCRIPTION
  The import function imports modules, tables, functions, objects, etc. into the
  MAD environment. If the argument #1 is a string, it will be treated as the
  name of a module and replaced by the value returned by require before further
  processing. If the argument #1 or the value returned by require is a raw
  table, each key-value pairs of this table will be added individually to the
  MAD environment (i.e. flatten).

RETURN VALUE
  None.

ERRORS
  The import function trigs an error if argument #1 is not a string or a raw
  table, or if the module to load is not found, or if a key already exists in
  the MAD environment before insertion and overriding is not allowed by argument
  #2.

EXAMPLES
  local import in MAD
  import('module')             -- import module (load and flatten)
  import('module', true)       -- import module but allow override
  import({name=func})          -- import named function
  import({name=func}, true)    -- import function but allow override
  import({...})                -- import anonymous raw table (flatten)
  import({...}, true)          -- import raw table but allow override
  import({constants={}})       -- import raw table (flatten) with a named table

SEE ALSO
  MAD.export.
]=]

__help.export = [=[
NAME
  export -- export components from MAD environment

SYNOPSIS
  export(['pattern' [, context [, override]]])
  export({key_list} [, context [, override]]])

DESCRIPTION
  The export function exports tables, functions, objects, etc. from the MAD
  environment to the specified context or global context if none is specified.
  The argument #1 provides a matching pattern or a list of keys to select the
  components to export. The argument #2 specifies the destination context or _G
  if none is specified. The argument #3 override is 'false' by default.

RETURN VALUE
  The destination context.

ERRORS
  The export function trigs an error if the argument #1 is not a string pattern
  or a raw table of keys, or if the argument #2 is not indexable, or if a key
  already exists in the destination context and overriding is not allowed by
  argument #3.

EXAMPLES
  local export in MAD
  export()                       -- export all MAD components to _G
  export('.*')                   -- export all MAD components to _G
  export('.*',_G)                -- export all MAD components to _G
  export('help')                 -- export help function to _G
  export('^is_.*$')              -- export all is_* functions to _G
  context = export('^is_.*$',{}) -- export all is_* functions to table
  export 'sin'                   -- export all *sin* function to _G
  export '^sin$'                 -- export only sin function to _G (slow)
  export({'sin'},true)           -- export only sin function to _G (fast)
  export {'sin','cos','tan'}     -- export all these functions to _G (fast)

SEE ALSO
  MAD.import.
]=]

__help.help = [=[
NAME
  help -- display help for modules and functions

SYNOPSIS
  help('topic')

DESCRIPTION
  The help function looks for embedded helps for modules and components and
  tries to build a list of 'Related topics' automatically.

  If the help function is exported from the MAD environment, it can be used
  directly, as follow:
    MAD.export 'help'
    help 'topic'

RETURN VALUE
  None.

ERROR
  The help function trigs an error if argument #1 is not a string.

EXAMPLES
  local help in MAD
  help()        -- help on MAD
  help 'help'   -- help on help
  help 'Object' -- help on root object 'Object'
  help 'gmath'  -- help on gmath module

SEE ALSO
  MAD.export.
]=]

-- no help
__help._C = ''

-- end ------------------------------------------------------------------------o
return __help
