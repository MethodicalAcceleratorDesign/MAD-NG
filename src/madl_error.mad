--[=[
 o-----------------------------------------------------------------------------o
 |
 | Error module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Load field and alignment errors into elements and sequences.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local command, mtable, warn, tostring                           in MAD
local assertf, printf                                           in MAD.utility
local is_number, is_string, is_mtable, is_sequence              in MAD.typeid

local abs in math

local assert, error, table, tostring =
      assert, error, table, tostring

-- error command --------------------------------------------------------------o

local algn_col = {"dx", "dy", "ds", "dphi", "dtheta", "dpsi"}
local merr_col = {"mrex" , "mrey" , "mscalx", "mscaly",
                  "mredx", "mredy", "mrexs" , "mreys" }
local aper_col = {"arex", "arey"}
local knl_col  = {}
local ksl_col  = {}
for i=1,21 do knl_col[i], ksl_col[i] = "k"..(i-1).."l", "k"..(i-1).."sl" end

local dict = {mrex="mredx", mrey="mredy", mscalx="mrexs", mscaly="mreys",
              mredx="mredx", mredy="mredy", mrexs="mrexs", mreys="mreys"}

local function mtbl_errors (self, sequ, mtbl)
  local cn = mtbl:colnames()
  for i,v in ipairs(cn) do cn[v:lower()] = i end
  assert(cn.name, "invalid mtable of errors, missing column 'name'")

  mtbl:foreach(\r,ri =>
    local dknl, dksl, algn, merr, nn, ns, na, nm = {}, {}, {}, {}, 0, 0, 0, 0

    for i,v in ipairs(knl_col) do
      if cn[v] and r[cn[v]] ~= 0 then dknl[i], nn = r[cn[v]], i end
    end

    for i,v in ipairs(ksl_col) do
      if cn[v] and r[cn[v]] ~= 0 then dksl[i], ns = r[cn[v]], i end
    end

    for i,v in ipairs(algn_col) do
      if cn[v] and r[cn[v]] ~= 0 then algn[v], na = r[cn[v]], i end
    end

    for i,v in ipairs(merr_col) do
      if cn[v] and r[cn[v]] ~= 0 then merr[dict[v]], nm = r[cn[v]], i end
    end

    local elm = sequ[r[cn.name]]
    if not elm then
      if nn+ns+na+nm > 0 then
        warn("%s not found in sequence %s, errors ignored",r[cn.name],sequ.name)
      end
      return
    end

    if elm.is_monitor then
      elm.merr = merr
    else
      for i=1,nn do dknl[i] = dknl[i] or 0 end ; elm.dknl = dknl
      for i=1,ns do dksl[i] = dksl[i] or 0 end ; elm.dksl = dksl
    end

    sequ:misalign(algn, {elm})

  --printf("%s:\n  dknl=%s\n  dksl=%s\n  algn=%s\n  merr=%s\n", elm.name,
  --tostring(dknl), tostring(dksl), tostring(sequ:ealign(elm)), tostring(merr))
  end, self.range, self.selector)
end

local function exec (self)
  -- check sequence
  local sequ = assert(self.sequence, "missing sequence")
  assert(is_sequence(sequ), "invalid sequence")

  -- process from table
  local mtbl = self.table
  if is_string(mtbl) then mtbl = mtable:read(mtbl) end
  if mtbl then mtbl_errors(self, sequ, mtbl) end

  -- save errors to table, default name is seqnam_errors.tfs
  -- save_errors(self, sequ)
end

local errors = command 'errors' {
  sequence=nil,      -- sequence(s) (required)                            (errs)
  table=nil,         -- table of errors                                   (errs)
  range=nil,         -- table range                                       (errs)
  select=nil,        -- table selector                                    (errs)

  align=false,       -- alignment components assigned to selected elems.  (errs)
  fcomp=false,       -- field components assigned to selected elems.      (errs)

  save=false,        -- save all errors of selected elems in a mtable     (errs)

  info=nil,          -- information level (output on terminal)            (errs)
  debug=nil,         -- debugging information level (output on terminal)  (errs)

  exec=exec,         -- command to execute upon children creation

  __attr = {
    'sequence', 'table', 'range', 'align', 'fcomp'
  }
} :set_readonly()    -- reference errors command is readonly

-- end ------------------------------------------------------------------------o
return { errors = errors }
