--[=[
 o-----------------------------------------------------------------------------o
 |
 | Track element methods (loaded by track)
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

--[=[
Notes about directions and quantities:
  edir: element direction affects curvatures (edir = seq.dir).
  sdir: track direction s affects lengths    (sdir = cmd.dir).
  tdir: time direction t  affects angles     (tdir = edir x sdir).
  bdir: beam direction    affects strengths  (bdir = edir x sdir x chg).
--]=]

-- locals ---------------------------------------------------------------------o

local element, damap, symint, option, warn                      in MAD

local fnil, bind3rd                                             in MAD.gfunc
local fact, arc2cord, sqrt, sin, cos, atan2                     in MAD.gmath
local errorf                                                    in MAD.utility
local minlen, minang, minstr, clight, twopi, pi_2               in MAD.constant
local is_implicit                                               in element.drift

local type = type

local abs, max in math -- ensure that abs will not work on GTPSA.

-- redefine abs for this module (only!)
local abs = \a -> type(a) == "number" and abs(a) or abs(a:get0())

-- constants
local minvolt = 1e-6

local getanbnr in require("madl_curvmul")

-- integrator schemes ---------------------------------------------------------o

local thinonly, thickonly, driftonly, DKD, TKT, KMK                in MAD.symint

-- dynamic maps ---------------------------------------------------------------o

-- straight elements (DKD)
local strex_drift, strex_kick             , strex_fringe           in MAD.dynmap
local              strex_kickh  --[[ h ]]                          in MAD.dynmap
local              strex_kickhs --[[ h, ksi ]]                     in MAD.dynmap

-- curved elements (DKD)
local curex_drift, curex_kick             , curex_fringe           in MAD.dynmap

-- sbend (TKT)
local sbend_thick,  sbend_kick,
      sbend_thickf, sbend_kickf           , dipeg_fringe           in MAD.dynmap

-- rbend (TKT)
local rbend_thick,  rbend_kick, rbend_strex                        in MAD.dynmap

-- quadrupole (KMK)
local quad_thick,  quad_kick , quad_kick_ysh ,
      quad_thicks, quad_kicks, quad_kicks_ysh,
      quad_thickh, quad_kickh, quad_kickh_ysh                      in MAD.dynmap

-- solenoid (always KMK)
local solen_thick                         , solen_fringe           in MAD.dynmap

-- solenoid kick for multipole
local              solen_kick                                      in MAD.dynmap

-- electrostatic separator
local esept_thick                                                  in MAD.dynmap

-- non-linear elliptical lens
local nllens_kick                                                  in MAD.dynmap

-- rfcavity
local rfcav_kick, rfcav_kickn             , rfcav_fringe           in MAD.dynmap

-- beambeam
local bbeam_kick, bbeam_kick6D                                     in MAD.dynmap

-- generic damap
local genm_thick                                                   in MAD.dynmap

-- patches
local xrotation, yrotation, srotation, translate,
      changeref, changedir, changenrj, misalign                    in MAD.dynmap

-- strengths and phases -------------------------------------------------------o

local function adj_mult (m)
  local knl, ksl in m

  for i=m.nmul,1,-1 do
    if abs(knl[i]) + abs(ksl[i]) ~= 0 then
      m.nmul = i ; return
    end
  end
  m.nmul = 0
end

local function get_mult (elm, m, n)
  local knl, ksl, dknl, dksl in elm

  m.nmul = max(#knl, #ksl, #dknl, #dksl, n or 0)

  for i=1,m.nmul do
    m.knl[i] = ((knl[i] or 0) + (dknl[i] or 0)) / fact(i-1)
    m.ksl[i] = ((ksl[i] or 0) + (dksl[i] or 0)) / fact(i-1)
  end
end

local function get_multphas (elm, m, n)
  local knl, ksl, dknl, dksl in elm
  local pnl, psl, dpnl, dpsl in elm

  m.nmul = max(#knl, #ksl, #dknl, #dksl, n or 0)
  m.npha = m.nmul

  for i=1,m.nmul do
    m.knl[i] = ((knl[i] or 0) + (dknl[i] or 0)) / fact(i-1)
    m.ksl[i] = ((ksl[i] or 0) + (dksl[i] or 0)) / fact(i-1)
    m.pnl[i] =  (pnl[i] or 0) + (dpnl[i] or 0)
    m.psl[i] =  (psl[i] or 0) + (dpsl[i] or 0)
  end
end

-- misalignments --------------------------------------------------------------o

local function get_algn (e, m)
  local al = e.misalign or  m.sequ:align (m.eidx)
  local el = m.misalign and m.sequ:ealign(m.eidx) or nil

  if not (al or el) then return nil end

  local dx, dy, ds, dthe, dphi, dpsi = 0, 0, 0, 0, 0, 0

  if al then -- element abolute/permanent misalignments
    dx, dthe = dx+(al.dx or 0), dthe+(al.dtheta or 0) -- horizontal/azimutal
    dy, dphi = dy+(al.dy or 0), dphi+(al.dphi   or 0) -- vertical/elevation
    ds, dpsi = ds+(al.ds or 0), dpsi+(al.dpsi   or 0) -- longitudinal/roll
  end

  if el then -- element relative/error misalignments
    dx, dthe = dx+(el.dx or 0), dthe+(el.dtheta or 0) -- horizontal/azimutal
    dy, dphi = dy+(el.dy or 0), dphi+(el.dphi   or 0) -- vertical/elevation
    ds, dpsi = ds+(el.ds or 0), dpsi+(el.dpsi   or 0) -- longitudinal/roll
  end

  local trn = abs(dx  )+abs(dy  )+abs(ds  ) >= minlen
  local rot = abs(dthe)+abs(dphi)+abs(dpsi) >= minang

  if not (trn or rot) then return nil end

  return {trn=trn, rot=rot, dx=dx, dy=dy, ds=ds, dthe=dthe, dphi=dphi, dpsi=dpsi}
end

-- element tracking -----------------------------------------------------------o

local function trackone (elm, m, inter, thick, thin, fringe)
  local sdir, atentry, atexit in m

  atentry(elm, m,  sdir, -1)
  inter  (elm, m,    1 , thick, thin)
  atexit (elm, m, -sdir, -2)
end

local function trackelm (elm, m, inter, thick, thin, fringe)
  local sdir, atentry, atexit in m
  local algn = get_algn(elm, m)
  local tlt  = elm.tilt*m.tdir
  local mis  = algn and misalign or fnil
  local rot  = abs(tlt) >= minang and srotation or fnil
  local fng  = fringe or fnil
  m.tlt, m.algn = tlt, algn

  atentry(elm, m,  sdir, -1)
  mis    (elm, m,  sdir)
  rot    (tlt, m,  sdir)
  atentry(elm, m,  sdir, -3)
  fng    (elm, m,  sdir)
  inter  (elm, m,    1 , thick, thin)
  fng    (elm, m, -sdir)
  atexit (elm, m, -sdir, -4)
  rot    (tlt, m, -sdir)
  mis    (elm, m, -sdir)
  atexit (elm, m, -sdir, -2)

  m.tlt, m.algn = nil, nil
end

local function tracksub (elm, m, inter, thick, thin, fringe)
  local eidx, sdir, atentry, atexit, __sdat in m
  local algn = get_algn(elm, m)
  local tlt  = elm.tilt*m.tdir
  local mis  = algn and misalign or fnil
  local rot  = abs(tlt) >= minang and srotation or fnil
  local fng  = fringe or fnil
  m.tlt, m.algn, m.eidx = tlt, algn, nil

  if not eidx then
    errorf("invalid subelement track %s (contain subelements)", elm.name)
  end

  atentry(elm, m, sdir, -1)
  mis    (elm, m, sdir)
  rot    (tlt, m, sdir)
  atentry(elm, m, sdir, -3)
  fng    (elm, m, sdir)

  if sdir > 0 then
    local at, lw = 0
    for i=1,#elm do
      at, lw = elm[i].sat, elm[i].sat - at
      if abs(lw) >= minlen then -- body step
        inter(elm, m, lw, thick, thin)
      end
      __sdat.clw = at
      elm[i]:track(__sdat)
      at = at + elm[i].l/m.el
    end
    lw = 1 - at
    if abs(lw) >= minlen then  -- last body step
      inter(elm, m, lw, thick, thin)
    end

  else -- backtrack
    local at, lw = 1
    for i=#elm,1,-1 do
      at, lw = elm[i].sat, at - elm[i].sat
      if abs(lw) >= minlen then -- body step
        inter(elm, m, lw, thick, thin)
      end
      __sdat.clw = at
      elm[i]:track(__sdat)
      at = at + elm[i].l/m.el
    end
    lw = at
    if abs(lw) >= minlen then -- first body step
      inter(elm, m, lw, thick, thin)
    end
  end

  fng   (elm, m, -sdir)
  atexit(elm, m, -sdir, -4)
  rot   (tlt, m, -sdir)
  mis   (elm, m, -sdir)
  atexit(elm, m, -sdir, -2)

  m.tlt, m.algn, m.eidx = nil, nil, eidx
end

-- kinds ----------------------------------------------------------------------o

local function track_slink (elm, m)
  m.el, m.eh, m.nmul = 0, 0, 0

  local update = elm:var_get'update'
  if update then update(elm, m) end -- update damap

  if elm.sequence then
    m:change_si(elm.sequence, elm.range, elm.nturn, elm.dir)
    return "restart_si"
  end
end

local function track_marker (elm, m)
  m.el, m.eh, m.nmul = 0, 0, 0
  trackone(elm, m, thinonly, fnil, fnil)
end

local function track_drift (elm, m)
  m.el, m.eh, m.nmul = m.ds, 0, 0

  if is_implicit(elm) then
    local inter = m.implicit and thickonly or driftonly
    trackone(elm, m, inter, strex_drift)
  else
    local track = #elm == 0 and trackelm or tracksub
    local inter = abs(m.ds) >= minlen and thickonly or driftonly
    track(elm, m, inter, strex_drift, fnil)
  end
end

local function track_multipole (elm, m)
  get_mult(elm, m, 1) ; adj_mult(m)

  if m.nmul == 0 and abs(elm.ksi) < minstr then return track_marker(elm, m) end

  local angle, ksi, lrad in elm
  local knl, ksl in m

  m.lrad, m.ksi = lrad, ksi or 0

  local kick = strex_kick
  if abs(knl[1]) + abs(ksl[1]) + abs(m.ksi) >= minstr then
    kick = strex_kickhs
  end

  trackelm(elm, m, thinonly, fnil, kick)
  m.ksi, m.lrad = nil, nil
end

local function track_bbeam (elm, m)
  if not elm.enabled  then return track_marker(elm, m) end

  m.el, m.eh, m.nmul = 0, 0, 0

  local kick = elm.bb6D and bbeam_kick6D or bbeam_kick
  trackelm(elm, m, thinonly, fnil, kick)
end

local function track_nllens (elm, m)
  if not elm.enabled  then return track_marker(elm, m) end

  m.el, m.eh, m.nmul = 0, 0, 0

  trackelm(elm, m, thinonly, fnil, nllens_kick)
end

local function track_sbend (elm, m, e1_, e2_)
  get_mult(elm, m, 3)

  local ds, tdir, nmul, knl, ksl, bfx, bfy in m
  local angle, k0, k0s, k1, k1s, k2, k2s in elm
  local l = abs(ds)

  if l < minlen then
    errorf("invalid sbend '%s' length=%.4e [m] (>0 expected)", elm.name, l)
  end
  if abs(angle) < minang then
    errorf("invalid sbend '%s' angle=%.4e [rad] (~=0 expected)", elm.name, angle)
  end

  knl[1], ksl[1] = knl[1]+k0*l  , ksl[1]+k0s*l
  knl[2], ksl[2] = knl[2]+k1*l  , ksl[2]+k1s*l
  knl[3], ksl[3] = knl[3]+k2*l/2, ksl[3]+k2s*l/2
  m.el, m.eh = ds, angle*tdir/ds
  m.e1, m.e2 = (e1_ or elm.e1), (e2_ or elm.e2)
  m.ang      = angle*tdir

  local model  = elm.model   or m.model
  local method = elm.method  or m.method
  local snmul  = elm.secnmul or m.secnmul or -1
  local inter, thick, kick

  m.snm = snmul

  adj_mult(m) ; getanbnr(m)

  if model == 'DKD' then                          -- curved thin
    inter, thick, kick = DKD[method], curex_drift , curex_kick
  elseif m.nmul == 1 and ksl[1] == 0 and not m.ptcmodel then -- curved thick only
    inter, thick, kick = thickonly  , sbend_thick , fnil
  else -- if abs(knl[2]) < minstr then            -- curved thick
    inter, thick, kick = TKT[method], sbend_thick , sbend_kick
  end

  local track = #elm == 0 and trackelm or tracksub
  track(elm, m, inter, thick, kick, curex_fringe)
  m.snm, m.e1, m.e2, m.ang = nil, nil, nil, nil
end

local function track_rbend (elm, m)
  local angle, e1, e2, true_rbend, truerbend, ptcrbend in elm

  m.mang = 0
  if not (true_rbend or truerbend or ptcrbend) then                           -- checked
    return track_sbend(elm, m, e1+angle/2, e2+angle/2)
  end

  get_mult(elm, m, 3)                                                         -- unchecked

  local ds, tdir, nmul, knl, ksl, ptcmodel in m
  local k0, k0s, k1, k1s, k2, k2s in elm

  if abs(ds) < minlen then
    errorf("invalid rbend '%s' length=%.4e [m] (>0 expected)", elm.name, ds)
  end

  m.eld = ds
  m.elc = arc2cord(ds, angle)

  if not ptcmodel and e1 and e2 
     or  ptcmodel and (e1==0 and e2==0 or e1~=0 and e2~=0) then
    m.e1, m.e2 = e1+angle/2, e2+angle/2
    m.el = m.elc
  else                                                                        -- True parallel
    if not ptcmodel and e1 or ptcmodel and e2==0 then
      m.e1, m.e2, m.etp_dir = e1, angle - e1, -1
      m.el = m.elc * cos(angle/2 - e1)
    else            
      m.e1, m.e2, m.etp_dir = angle - e2, e2, ptcmodel and -1 or 1            -- dir -> patch side.
      m.el = m.elc * cos(angle/2 - e2)
    end
  end

  local l = abs(m.el)
  m.eh = angle/ds*tdir

  knl[1], ksl[1] = knl[1]+k0*l  , ksl[1]+k0s*l
  knl[2], ksl[2] = knl[2]+k1*l  , ksl[2]+k1s*l
  knl[3], ksl[3] = knl[3]+k2*l/2, ksl[3]+k2s*l/2

  adj_mult(m)

  local model  = elm.model  or m.model
  local method = elm.method or m.method
  local inter, thick, kick

  if model == 'DKD' then
    inter, thick, kick = DKD[method], strex_drift, strex_kick
  elseif m.nmul == 1 and ksl[1] == 0 and not ptcmodel then
    inter, thick, kick = thickonly  , rbend_thick , fnil
  else
    inter, thick, kick = TKT[method], rbend_thick, rbend_kick
  end

  local track = #elm == 0 and trackelm or tracksub
  track(elm, m, inter, thick, kick, strex_fringe)
  m.e1, m.e2, m.ang, m.eld, m.elc, m.etp_dir = nil, nil, nil, nil, nil, nil
end

local function track_quadrupole (elm, m)
  get_mult(elm, m, 2)

  local ds, edir, tdir, nmul, knl, ksl, ptcmodel in m
  local angle, k0, k0s, k1, k1s in elm
  local l = abs(ds)

  if l == 0 and abs(k1)+abs(k1s)+abs(k0)+abs(k0s) > 0 then
    warn("quadrupole '%s' defines strength with zero length", elm.name)
  end

  knl[1], ksl[1] = knl[1]+k0*l, ksl[1]+k0s*l
  knl[2], ksl[2] = knl[2]+k1*l, ksl[2]+k1s*l
  m.el = ds

  adj_mult(m)

  local model  = elm.model  or m.model
  local method = elm.method or m.method
  local no_k1  = abs(knl[2]) < minstr
  local no_k1s = abs(ksl[2]) < minstr 
  local no_ang = abs(angle)  < minang
  local no_tlt = ptcmodel and not no_k1s and (abs(knl[1]) > minstr or nmul > 2 or elm.fringe > 0)
  local inter  = ptcmodel and KMK[method] or TKT[method]
  local thick, kick

  if model == 'DKD' or no_k1 and no_k1s and no_ang then
    inter, thick, kick = DKD[method], strex_drift, strex_kick
  elseif no_k1s and no_ang or no_tlt then       -- normal thick
    m.k1 = knl[2]/ds*edir
    thick, kick = quad_thick, ptcmodel and quad_kick or quad_kick_ysh
  elseif no_ang then                            -- skew thick
    local a = -0.5*atan2(ksl[2], knl[2])
    m.k1, m.ca, m.sa = sqrt(knl[2]^2 + ksl[2]^2)/ds*edir, cos(a), sin(a)
    thick, kick = quad_thicks, ptcmodel and quad_kicks or quad_kicks_ysh
  else                                          -- combined thick            -- unchecked
    m.eh = angle/ds*tdir
    thick, kick = quad_thickh, ptcmodel and quad_kickh or quad_kickh_ysh
  end

  local track = #elm == 0 and trackelm or tracksub
  track(elm, m, inter, thick, kick, strex_fringe)
end

-- straigth magnets (-rbend -quad -solenoid)

local function track_strexgen (elm, m, ptc_, mth_)
  m.el, m.eh = m.ds, 0

  adj_mult(m)

  local model  = elm.model  or m.model
  local method = elm.method or mth_ or m.method
  local inter, thick, kick, fringe

  if abs(m.ds) < minlen then
    inter, thick, kick, fringe = thinonly, fnil, strex_kick, fnil
  elseif model == 'DKD' or not ptc_ then
    inter, thick, kick, fringe = DKD[method], strex_drift, strex_kick, strex_fringe
  else
    m.k1 = m.knl[2]/m.ds*m.edir
    inter, thick, kick, fringe = KMK[method], quad_thick, quad_kick, strex_fringe
  end

  local track = #elm == 0 and trackelm or tracksub
  track(elm, m, inter, thick, kick, fringe)
end

local function track_sextupole (elm, m)
  get_mult(elm, m, 3)

  local nmul, knl, ksl in m
  local k2, k2s in elm
  local l = abs(m.ds)

  if l == 0 and abs(k2)+abs(k2s) > 0 then
    warn("sextupole '%s' defines strength with zero length", elm.name)
  end

  knl[3] = knl[3]+k2 *l/2
  ksl[3] = ksl[3]+k2s*l/2

  track_strexgen (elm, m, m.ptcmodel)
end

local function track_octupole (elm, m)
  get_mult(elm, m, 4)

  local nmul, knl, ksl in m
  local k3, k3s in elm
  local l = abs(m.ds)

  if l == 0 and abs(k3)+abs(k3s) > 0 then
    warn("octupole '%s' defines strength with zero length", elm.name)
  end

  knl[4] = knl[4]+k3 *l/6
  ksl[4] = ksl[4]+k3s*l/6

  track_strexgen (elm, m, m.ptcmodel)
end

local function track_decapole (elm, m)
  get_mult(elm, m, 5)

  local nmul, knl, ksl in m
  local k4, k4s in elm
  local l = abs(m.ds)

  if l == 0 and abs(k4)+abs(k4s) > 0 then
    warn("decapole '%s' defines strength with zero length", elm.name)
  end

  knl[5] = knl[5]+k4 *l/24
  ksl[5] = ksl[5]+k4s*l/24

  track_strexgen (elm, m)
end

local function track_dodecapole (elm, m)
  get_mult(elm, m, 6)

  local nmul, knl, ksl in m
  local k5, k5s in elm
  local l = abs(m.ds)

  if l == 0 and abs(k5)+abs(k5s) > 0 then
    warn("dodecapole '%s' defines strength with zero length", elm.name)
  end

  knl[6] = knl[6]+k5 *l/120
  ksl[6] = ksl[6]+k5s*l/120

  track_strexgen (elm, m)
end

-- kickers (straigth magnets)

local function track_kickgen (elm, m, hk, vk)
  get_mult(elm, m, 2)

  local nmul, knl, ksl, ptcmodel in m
  local method = not ptcmodel and 2 or nil

  knl[1] = knl[1] - hk
  ksl[1] = ksl[1] + vk

  track_strexgen (elm, m, ptcmodel, method)
end

local function track_tkicker (elm, m, hk_, vk_)
  track_kickgen(elm, m, elm.hkick, elm.vkick)
end

local function track_kicker (elm, m)
  track_kickgen(elm, m, elm.hkick+elm.chkick, elm.vkick+elm.cvkick)
end

local function track_hkicker (elm, m)
  track_kickgen(elm, m, elm.kick+elm.chkick, 0)
end

local function track_vkicker (elm, m)
  track_kickgen(elm, m, 0, elm.kick+elm.cvkick)
end

-- solenoid

local function track_solenoid (elm, m)
  get_mult(elm, m) ; adj_mult(m)

  local ds, tdir, edir in m
  local ks, ksi, lrad in elm
  local l = abs(ds)
  local model  = elm.model or m.model

  if l == 0 and abs(ks) > 0 then
    warn("solenoid '%s' defines strength with zero length", elm.name)
  end

  if l < minlen then
    if model == "DKD" and lrad > minlen then
      return track_multipole(elm, m)
    end
    errorf("invalid solenoid '%s' length=%.4e [m] (>0 expected)", elm.name, l)
  end

  m.el, m.eh = ds, 0

  local ksi = ksi + ks*l
  local no_ksi = abs(ksi) < minstr
  local method = elm.method or m.method
  local thick, kick, fringe

  if model == 'DKD' and no_ksi then
    thick, kick, fringe = strex_drift, strex_kick , strex_fringe
--  elseif model == 'DKD' then -- invalid use of drift in solenoid
--    m.ksi, m.lrad = ksi, lrad
--    thick, kick, fringe = strex_drift, strex_kickhs, strex_fringe
  else
    m.ks = ksi/l*edir
    thick, kick, fringe = solen_thick, strex_kick, elm.new_fringe and solen_fringe or strex_fringe
  end

  local track  = #elm == 0 and trackelm or tracksub
  track(elm, m, DKD[method], thick, kick, fringe)
  m.ks, m.ksi, m.lrad = nil, nil, nil
end

-- eseptum

local function track_eseptum (elm, m)
  get_mult(elm, m) ; adj_mult(m)

  local ds, edir, tdir in m
  local ex, ey, exl, eyl in elm
  local l = abs(ds)

  if l == 0 and abs(ex)+abs(ey) > 0 then
    warn("eseptum '%s' defines strength with zero length", elm.name)
  end

  m.el, m.eh = ds, 0

  local exl = exl + ex*l
  local eyl = eyl + ey*l
  local volt = sqrt(exl^2 + eyl^2)/ds*edir
  local thick

  if abs(volt) < minvolt then
    thick = strex_drift
  else
    local a = -atan2(eyl, exl)
    m.volt, m.ca, m.sa = volt*1e-3, cos(a), sin(a)
    thick = esept_thick
  end

  local inter = m.nmul == 0 and thickonly or KMK[elm.method or m.method]
  local track = #elm == 0 and trackelm or tracksub
  track(elm, m, inter, thick, strex_kick, strex_fringe)
end

-- rf cavities

local function track_rfcavgen (elm, m, crab)
  local ds in m
  local volt in elm
  local l = abs(ds)

  m.el, m.eh = ds, 0

  adj_mult(m)

  m.volt, m.lag = crab and 0 or volt*1e-3, elm.lag*twopi - (crab and pi_2 or 0)
  m.freq, m.nbsl= elm.freq*1e6, elm.n_bessel
  if m.freq == 0 then
    m.freq = elm.harmon*clight*m.beam.beta/m.sequ.l
  end
  if m.freq <= 0 then
    errorf("invalid rfcavity '%s' frequency =%.4e [MHz] (>0 or harmon expected)",
            elm.name, m.freq)
  end
  local inter  = l < minlen and thinonly or DKD[elm.method or m.method]
  local kick   = m.nmul+m.nbsl == 0 and rfcav_kick or rfcav_kickn

  local fringe = l < minlen and fnil     or rfcav_fringe
  local track  = #elm == 0  and trackelm or tracksub
  track(elm, m, inter, strex_drift, kick, fringe)
  m.volt, m.lag = nil, nil
end

local function track_rfcavity (elm, m)
  get_mult      (elm, m)
  track_rfcavgen(elm, m)
end

local function track_rfmcavity (elm, m)
  get_multphas  (elm, m)
  track_rfcavgen(elm, m)
  m.npha = nil
end

local function track_crabcavity (elm, m)
  get_multphas  (elm, m, 1)
  m.knl[1] = m.knl[1] + elm.volt*1e-3*abs(m.ds)
  track_rfcavgen(elm, m, true)
  m.npha = nil
end

-- genmap element

local function track_genmap (elm, m)
  get_mult(elm, m) ; adj_mult(m)

  local ds, tdir in m
  local angle in elm
  local l = abs(ds)

  m.el, m.eh = ds, angle/ds*tdir

  local method = elm.method or m.method
  local inter  = l < minlen  and thinonly or m.nmul == 0 and thickonly or DKD[method]
  local kick   = m.nmul == 0 and fnil or abs(angle) < minang and strex_kick   or curex_kick
  local fringe = l < minlen  and fnil or abs(angle) < minang and strex_fringe or curex_fringe

  local track  = #elm == 0 and trackelm or tracksub
  track(elm, m, inter, genm_thick, kick, fringe)
end

-- load maps into elements ----------------------------------------------------o

local _nyi = \e ->
  errorf("tracking element %s of kind %s with length %s not yet implemented",
          e.name, e.kind, e.l)

local E = element

-- warning: set_methods overides must be consistent with survey and element.

-- element kinds
E.drift_element :set_methods {track = track_drift}

-- special elements
E.marker     :set_methods {track = track_marker}     -- cloned in sequence
E.slink      :set_methods {track = track_slink }

-- thick elements
E.sbend      :set_methods {track = track_sbend     } -- curved  , k0!, k0s, k1, k1s, k2, k2s
E.rbend      :set_methods {track = track_rbend     } -- straight, k0!, k0s, k1, k1s, k2, k2s
E.quadrupole :set_methods {track = track_quadrupole} -- straight, k0, k1!, k0s, k1s, k2, k2s
E.sextupole  :set_methods {track = track_sextupole } -- straight, k2, k2s
E.octupole   :set_methods {track = track_octupole  } -- straight, k3, k3s
E.decapole   :set_methods {track = track_decapole  } -- straight, k4, k4s
E.dodecapole :set_methods {track = track_dodecapole} -- straight, k5, k5s
E.solenoid   :set_methods {track = track_solenoid  } -- straight, ks, ksi
E.rfcavity   :set_methods {track = track_rfcavity  } -- straight, volt, freq!, lag, harmon
E.rfmultipole:set_methods {track = track_rfmcavity } -- straight, volt, freq!, lag, harmon, mult, phas
E.crabcavity :set_methods {track = track_crabcavity} -- straight, volt, freq!, lag, harmon, mult, phas

E.wiggler    :set_methods {track = _nyi         }    -- straight
E.elseparator:set_methods {track = track_eseptum}    -- straight

E.tkicker    :set_methods {track = track_tkicker}    -- straight, hkick, vkick
E.kicker     :set_methods {track = track_kicker }    -- straight, hkick, vkick
E.hkicker    :set_methods {track = track_hkicker}    -- straight,  kick
E.vkicker    :set_methods {track = track_vkicker}    -- straight,  kick

-- thin elements
E.multipole  :set_methods {track = track_multipole}  -- thin
E.beambeam   :set_methods {track = track_bbeam    }  -- thin
E.nllens     :set_methods {track = track_nllens   }  -- thin
E.genmap     :set_methods {track = track_genmap   }  -- straight or curved, damap, update

-- patches
E.xrotation  :set_methods {track = bind3rd(trackone, xrotation)}
E.yrotation  :set_methods {track = bind3rd(trackone, yrotation)}
E.srotation  :set_methods {track = bind3rd(trackone, srotation)}
E.translate  :set_methods {track = bind3rd(trackone, translate)}
E.changeref  :set_methods {track = bind3rd(trackone, changeref)}
E.changedir  :set_methods {track = bind3rd(trackone, changedir)}
E.changenrj  :set_methods {track = bind3rd(trackone, changenrj)}

-- end ------------------------------------------------------------------------o
