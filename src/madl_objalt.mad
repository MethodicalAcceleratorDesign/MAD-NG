--[=[
 o-----------------------------------------------------------------------------o
 |
 | Alternate object module (object model)
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide an object model to support prototype-based programming with value
    semantic for functions stored in variables and further extensions.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local is_nil, is_boolean, is_number, is_string, is_table, is_rawtable,
      is_function, is_functor, is_metaname, is_callable, is_iterable,
      is_mappable                                               in MAD.typeid
local bsearch, lsearch, kpairs, openfile, assertf, errorf       in MAD.utility
local fbit, fnot, fset, fcut, fclr, ftst, opstr, functor        in MAD.gfunc
local gfunc                                                     in MAD

local type, assert, error, getmetatable, setmetatable =
      type, assert, error, getmetatable, setmetatable

local rawget, rawset, rawequal, rawlen, ipairs, pairs, tostring =
      rawget, rawset, rawequal, rawlen, ipairs, pairs, tostring

local string, table =
      string, table

-- implementation -------------------------------------------------------------o

-- Root of all objects, forward declaration
local object

-- object kind
local _id = {} -- unique identifier

-- metamethods
local MT = {__obj=_id}

-- methods
local MF = {}

-- object flags (protected)
local oflg = {
  class    = fbit(31),
  final    = fbit(30),
  readonly = fbit(29),
  protect  = fnot(fset(fbit(29),fbit(30),fbit(31))),
}

-- instance and metatable of 'incomplete objects' proxy
local var0 = setmetatable({}, {
  __index    := error("forbidden read access to incomplete object." , 2),
  __newindex := error("forbidden write access to incomplete object.", 2),
  __metatable = false,
})

-- helpers --------------------------------------------------------------------o

local function init (a)
  local init = getmetatable(a).__init
  if init then return init(a) end
  return a
end

local function parent (a)
  return a.__par
end

local function name (a)
  local par = parent(a)
  return par and a.__id == par.__id and ('? <: '..a.__id) or a.__id
end

local function ffinal (a)
  return ftst(a.__flg, oflg.final)
end

local function fclass (a)
  return ftst(a.__flg, oflg.class)
end

local function freadonly (a)
  return ftst(a.__flg, oflg.readonly)
end

local function set_fclass (a)
  a.__flg = fset(a.__flg, oflg.class)
end

local function is_object (a) -- exported
  local mt = getmetatable(a)
  return mt ~= nil and mt.__obj == _id
end

local function copy_methods (a, m)
  local c = table.new(0,32)
  for k,v in pairs(m) do c[k] = v end
  a.__index = c -- set new methods
  return c
end

local function copy_metamethods (a, m)
  local c = table.new(0,8)
  for k,v in pairs(m) do c[k] = v end
  m.__metatable = nil -- unprotect change
  setmetatable(a, c) -- set new metamethods
  m.__metatable, c.__metatable = m, c -- restore/set protection(s)
  return c
end

-- metamethods ----------------------------------------------------------------o

-- object model (and variants):
-- objects are proxies controlling variables access and inheritance

local function tblmrg (a, b)
  local r = {}
  for k,v in pairs(a) do r[k]=v end
  for k,v in pairs(b) do r[k]=v end
  return r
end

function MT:__call (a, b)  -- object constructor (define the object-model)
  if type(a) == 'string' or type(a) == 'nil' then       -- [un]named object
    a = a or self.__id
    if type(b) == 'nil' then
      local obj = {__id=a, __flg=0, __var=var0, __par=self, __index=self.__index}
      return setmetatable(obj, getmetatable(self))      -- incomplete object
    elseif is_rawtable(b) then
      local var = tblmrg(self.__var, b)
      local obj = {__id=a, __flg=0, __var=var, __par=self, __index=self.__index}
      setmetatable(var, obj) ; set_fclass(self)         -- set method lookup
      return init(setmetatable(obj, getmetatable(self)))-- complete object
    end
  elseif is_rawtable(a) then
    if self.__var == var0 then                          -- finalize named object
      local par = parent(self)
      local var = tblmrg(par.__var, a)
      self.__var = setmetatable(var, self)              -- set method lookup
      set_fclass(par)
      return init(self)
    else                                                -- unnamed object
      local var = tblmrg(self.__var, a)
      local obj = {__id=self.__id, __flg=0, __var=var, __par=self, __index=self.__index}
      setmetatable(var, obj) ; set_fclass(self)         -- set method lookup
      return init(setmetatable(obj, getmetatable(self)))-- complete object
    end
  end
  error(is_nil(b) and "invalid argument #1 (string or raw table expected)"
                  or  "invalid argument #2 (raw table expected)", 2)
end

-- variables (attributes) have precedence over methods.

function MF:var_get (k)
  return self.__var[k]
end

function MF:var_val (k, v) -- evaluate string key with function as value
  if type(v) == 'function' then return v(self) else return v end
end

function MT:__index (k)
  local v = self.__var[k]
  if type(v) == 'function' then return v(self) else return v end
end

function MT:__newindex (k, v)
  local var = self.__var
  if freadonly(self) or type(k) == 'string' and string.sub(k,1,2) == '__' and
                        type(rawget(var,k)) ~= 'nil' then
    error("forbidden write access to '" .. name(self) .. "." .. tostring(k)
          .. "' (readonly object, method or variable)", 2)
  end
  var[k] = v      -- note: must use [k] for var0
end

function MT:__len ()
  return rawlen(self.__var)
end

local function iter (var, key) -- scan only numbers and strings
  local k, v = next(var, key)
  while type(k) ~= 'string' and type(k) ~= 'number' and k do
    k, v = next(var, k)
  end
  return k, v
end

local function pairs_iter (self)
  return iter, self.__var, nil
end

local function ipairs_iter (self)
  return ipairs(self.__var)
end

MT.__pairs  =  pairs_iter
MT.__ipairs = ipairs_iter

function MT:__tostring()
  return string.format("object: '%s' %p", name(self), self)
end

-- methods (member functions) -------------------------------------------------o

function MF:raw_len ()
  return rawlen(self.__var)           -- same as __len
end

function MF:raw_get (k)
  return rawget(self.__var,k)         -- no method nor function evaluation
end

function MF:raw_set (k, v)
  rawset(self.__var,k,v)              -- no guards
end

function MF:is_class ()
  assert(is_object(self), "invalid argument #1 (object expected)")
  return fclass(self)
end

function MF:is_final ()
  assert(is_object(self), "invalid argument #1 (object expected)")
  return ffinal(self)
end

function MF:is_readonly ()
  assert(is_object(self), "invalid argument #1 (object expected)")
  return freadonly(self)
end

function MF:is_instanceOf (c)
  assert(is_object(self), "invalid argument #1 (object expected)")
  if is_object(c) and fclass(c) then
    repeat self = parent(self) until not self or rawequal(self,c)
    return not not self
  end
  return false
end

function MF:set_readonly (st_)
  assert(is_object(self), "invalid argument #1 (object expected)")
  if st_ ~= false
  then self.__flg = fset(self.__flg, oflg.readonly)
  else self.__flg = fclr(self.__flg, oflg.readonly)
  end
  return self
end

local function efinal (self)
  error("invalid object creation ('"..name(self).."' is final)", 2)
end

function MF:set_final (st_)
  assert(is_object(self), "invalid argument #1 (object expected)")
  if st_ ~= false then
    if fclass(self) then
      errorf("cannot set final to '%s' (unexpected class)", name(self))
    end
    self:set_metamethods {__call=efinal}
    self.__flg = fset(self.__flg, oflg.final)
  else
    self.__flg = fclr(self.__flg, oflg.final)
  end
  return self
end

function MF:get_varkeys ()
  assert(is_object(self), "invalid argument #1 (object expected)")
  local lst, key = table.new(8,0), table.new(0,8)
  for k,v in kpairs(self) do
    if not (key[k] or is_functor(v)) and is_string(k) and string.sub(k,1,2) ~= '__'
    then lst[#lst+1], key[k] = k, k end
  end
  return lst, key
end

function MF:get_variables (lst, set_, noeval_)
  assert(is_object(self) , "invalid argument #1 (object expected)")
  assert(is_iterable(lst), "invalid argument #2 (iterable expected)")
  if is_boolean(set_) and is_nil(noeval_) then
    noeval_, set_ = set_                   -- right shift
  end
  local n   = #lst
  local res = set_ or table.new(0,n)
  local var = self.__var
  local val = MF.var_val
  if noeval_ == true
  then for i=1,n do res[lst[i]] =                   rawget(var, lst[i])  end
  else for i=1,n do res[lst[i]] = val(self, lst[i], rawget(var, lst[i])) end
  end
  return res -- key -> val
end

function MF:set_variables (set, ovrd_)
  assert(is_object(self) , "invalid argument #1 (object expected)")
  assert(is_mappable(set), "invalid argument #2 (mappable expected)")
  if freadonly(self) then
    errorf("forbidden write access to readonly object '%s'", name(self))
  end
  local var, ovrd = self.__var, ovrd_ == true
  for k,v in pairs(set) do
    assertf(ovrd or type(k) ~= 'string' or string.sub(k,1,2) ~= '__' or
            is_nil(var[k]), "cannot override variable '%s'",k)
    var[k] = v
  end
  return self
end

function MF:copy_variables (set, lst_, ovrd_)
  assert(is_object (self), "invalid argument #1 (object expected)")
  assert(is_mappable(set), "invalid argument #2 (mappable expected)")
  if is_boolean(lst_) and is_nil(ovrd_) then
    ovrd_, lst_ = lst_                        -- right shift
  end
  if freadonly(self) then
    errorf("forbidden write access to readonly object '%s'", name(self))
  end
  local var, ovrd = self.__var, ovrd_ == true
  local svar, lst = set.__var, lst_ or self.__attr
  assert(is_iterable(lst), "invalid list of attributes (iterable expected)")
  for _,k in ipairs(lst) do
    assertf(ovrd or type(k) ~= 'string' or string.sub(k,1,2) ~= '__' or
            is_nil(var[k]), "cannot override variable '%s'",k)
    var[k] = rawget(svar, k)
  end
  local nvl = lst.noeval -- to remove if noeval is suppressed...
  if nvl then
    assert(is_iterable(nvl), "invalid list of noeval attributes (iterable expected)")
    for _,k in ipairs(nvl) do
      assertf(ovrd or type(k) ~= 'string' or string.sub(k,1,2) ~= '__' or
              is_nil(var[k]), "cannot override variable '%s'",k)
      var[k] = rawget(svar, k) -- idem first loop, for compatibilty with object
    end
  end
  return self
end

function MF:wrap_variables (set, ovrd_)
  assert(is_object(self) , "invalid argument #1 (object expected)")
  assert(is_mappable(set), "invalid argument #2 (mappable expected)")
  if freadonly(self) then
    errorf("forbidden write access to readonly object '%s'", name(self))
  end
  local var, ovrd = self.__var, ovrd_ == true
  for k,f in pairs(set) do
    local v, newv = rawget(var, k)
    assert(not is_nil(v) , "invalid variable (nil value)")
    assert(is_callable(f), "invalid wrapper (callable expected)")
    assertf(ovrd or type(k) ~= 'string' or string.sub(k,1,2) ~= '__',
            "cannot override variable '%s'",k)
    if is_callable(v) then newv = f(v) else newv = f(\ v) end -- simplify user's side.
    if is_functor(v) and not is_functor(newv) then
      newv = functor(newv)                   -- newv must maintain v's semantic.
    end
    var[k] = newv
  end
  return self
end

function MF:clear_array ()
  assert(is_object(self)    , "invalid argument #1 (object expected)")
  if freadonly(self) then
    errorf("forbidden write access to readonly object '%s'", name(self))
  end
  local var = self.__var
  for i=1,rawlen(var) do var[i]=nil end
  return self
end

function MF:clear_variables ()
  assert(is_object(self)    , "invalid argument #1 (object expected)")
  if freadonly(self) then
    errorf("forbidden write access to readonly object '%s'", name(self))
  end
  local var = self.__var
  for k in kpairs(self) do
    if type(k) ~= 'string' or string.sub(k,1,2) ~= '__' then
      var[k]=nil
    end
  end
  return self
end

function MF:clear_all ()
  assert(is_object(self)    , "invalid argument #1 (object expected)")
  if freadonly(self) then
    errorf("forbidden write access to readonly object '%s'", name(self))
  end
  local var = self.__var
  for k in pairs_iter(self) do -- table.clear destroys all keys
    if type(k) ~= 'string' or string.sub(k,1,2) ~= '__' then
      var[k]=nil
    end
  end
  return self
end

function MF:set_methods (set, ovrd_)
  assert(is_object(self) , "invalid argument #1 (object expected)")
  assert(is_mappable(set), "invalid argument #2 (mappable expected)")
  if freadonly(self) then
    errorf("forbidden write access to readonly object '%s'", name(self))
  end
  if fclass(self) then
    errorf("cannot set methods to class '%s' (already cloned)", name(self))
  end
  local par, ovrd = parent(self), ovrd_ ~= false
  if par and self.__index == par.__index then
    self.__index = copy_methods(self, par.__index)
  end
  local mth = self.__index
  for k,m in pairs(set) do
    assertf(is_string(k)  , "invalid key '%s' (string expected)", k)
    assertf(is_callable(m), "invalid value for key '%s' (callable expected)", k)
    assertf(ovrd or string.sub(k,1,2) ~= '__' or is_nil(sm[k]),
            "cannot override method '%s'",k)
    mth[k] = is_function(m) and functor(m) or m
  end
  return self
end

function MF:set_metamethods (set, ovrd_)
  assert(is_object(self) , "invalid argument #1 (object expected)")
  assert(is_mappable(set), "invalid argument #2 (mappable expected)")
  if freadonly(self) then
    errorf("forbidden write access to readonly object '%s'", name(self))
  end
  if fclass(self) then
    errorf("cannot set metamethods to class '%s' (already cloned)", name(self))
  end
  local ovrd = ovrd_ ~= false
  local sm, pm = getmetatable(self), getmetatable(parent(self))
  if sm == pm then sm = copy_metamethods(self, pm) end
  for k,m in pairs(set) do
    assertf(type(k) == 'string' and string.sub(k,1,2) == '__',
            "invalid key '%s' (string starting with __ expected)", tostring(k))
    assertf(ovrd or is_nil(sm[k]), "cannot override metamethod '%s'",k)
    sm[k] = m
  end
  return self
end

function MF:insert (idx_, val)
  assert(is_object(self)    , "invalid argument #1 (object expected)")
  if freadonly(self) then
    errorf("forbidden write access to readonly object '%s'", name(self))
  end
  table.insert(self.__var, idx_, val)
  return self
end

function MF:remove (idx_)
  assert(is_object(self)    , "invalid argument #1 (object expected)")
  if freadonly(self) then
    errorf("forbidden write access to readonly object '%s'", name(self))
  end
  return table.remove(self.__var, idx_)
end

function MF:move (idx1, idx2, idxto, dest_)
  dest_ = dest_ or self
  assert(is_object(self)     , "invalid argument #1 (object expected)")
  assert(is_object(dest_)    , "invalid argument #2 (object expected)")
  if not freadonly(dest_) then
    errorf("forbidden write access to readonly object '%s'", name(dest_))
  end
  table.move(self.__var, idx1, idx2, idxto, dest_.__var)
  return dest_
end

function MF:sort (cmp_)
  assert(is_object(self)    , "invalid argument #1 (object expected)")
  if freadonly(self) then
    errorf("forbidden write access to readonly object '%s'", name(self))
  end
  local cmp = is_string(cmp_) and opstr[cmp_] or cmp_ or gfunc.lt
  assert(is_callable(cmp), "invalid argument #2 (callable expected)")
  table.sort(self.__var, cmp)
  return self
end

function MF:bsearch (val, cmp_, low_, high_)
  assert(is_object(self), "invalid argument #1 (object expected)")
  return bsearch(self.__var, val, cmp_, low_, high_)
end

function MF:lsearch (val, cmp_, low_, high_)
  assert(is_object(self), "invalid argument #1 (object expected)")
  return lsearch(self.__var, val, cmp_, low_, high_)
end

-- copy

function MF:same (name_)
  assert(is_object(self)                  ,"invalid argument #1 (object expected)")
  assert(is_nil(name_) or is_string(name_),"invalid argument #2 (string expected)")
  -- same shares the same parent
  local par = parent(self)
  local sam = par(name_ or self.__id, {})
  -- metamethods
  local sm, pm = getmetatable(self), getmetatable(par)
  if sm ~= pm then copy_metamethods(sam, sm) end
  -- methods
  local sm, pm = self.__index, par.__index
  if sm ~= pm then copy_methods(sam, sm) end
  return sam
end

function MF:copy (name_)
  assert(is_object(self)                  ,"invalid argument #1 (object expected)")
  assert(is_nil(name_) or is_string(name_),"invalid argument #2 (string expected)")
  local cpy = MF.same(self, name_)
  local var, cvar = self.__var, cpy.__var
  for k,v in pairs_iter(self) do
    if type(k) ~= 'string' or string.sub(k,1,2) ~= '__' then
      cvar[k] = v
    end
  end
  return cpy
end

MT.__same = MF.same
MT.__copy = MF.copy

-- flags

function MF:get_flags ()
  assert(is_object(self), "invalid argument #1 (object expected)")
  return fcut(self.__flg, oflg.protect)
end

function MF:set_flags (flgs)
  assert(is_object(self), "invalid argument #1 (object expected)")
  assert(is_number(flgs), "invalid argument #2 (number expected)")
  self.__flg = fset(self.__flg, fcut(flgs, oflg.protect))
  return self
end

function MF:clear_flags (flgs)
  assert(is_object(self), "invalid argument #1 (object expected)")
  assert(is_number(flgs), "invalid argument #2 (number expected)")
  self.__flg = fclr(self.__flg, fcut(flgs, oflg.protect))
  return self
end

function MF:test_flags (flgs)
  assert(is_object(self), "invalid argument #1 (object expected)")
  assert(is_number(flgs), "invalid argument #2 (number expected)")
  return ftst(self.__flg, fcut(flgs, oflg.protect))
end

-- environments

function MF:is_open_env ()
  assert(is_object(self), "invalid argument #1 (object expected)")
  return not is_nil(rawget(self,'__env'))
end

function MF:open_env (ctx_)
  local ctx = ctx_ or 1
  assert(is_object(self), "invalid argument #1 (object expected)")
  assert(is_function(ctx) or is_number(ctx) and ctx >= 1,
                   "invalid argument #2 (function or number >= 1 expected)")
  if is_number(ctx) then ctx = ctx+1 end
  assert(is_nil(rawget(self,'__env')), "invalid environment (already open)")
  rawset(self, '__env', { ctx=ctx, env=getfenv(ctx) })
  rawset(self, self.__id, self) -- self reference
  setfenv(ctx, self)
  return self
end

function MF:close_env () -- if an error occurs while in the environment
  assert(is_object(self), "invalid argument #1 (object expected)")
  local env = rawget(self,'__env')
  if env then
    setfenv(env.ctx, env.env)
    rawset(self, '__env', nil)
    rawset(self, self.__id, nil) -- clear self reference
  end
  return self
end

function MF:load_env (loader)
  assert(is_object(self), "invalid argument #1 (object expected)")
  if is_string(loader) then loader = assert(loadfile(loader)) end
  assert(is_callable(loader), "invalid argument #2 (filename or callable expected)")
  self:open_env(loader)
  local st, err = xpcall(loader, debug.traceback)
  self:close_env()
  assert(st, err)
  return self
end

function MF:dump_env () -- for debug
  assert(is_object(self), "invalid argument #1 (object expected)")
  for k,v in pairs(self.__var) do
    if is_rawtable(v) then
      for k,v in pairs(v) do
        print(k,'=',v)
      end
    elseif is_object(v) then
      print(k,'=',name(v))
    else
      print(k,'=',v)
    end
  end
end

-- I/O ------------------------------------------------------------------------o

-- dump obj members (including controlled inheritance)
function MF:dumpobj (filnam_, class_, pattern_, noeval_)
  if is_object(filnam_) and is_nil(noeval_) then -- right shift
    filnam_, class_, pattern_, noeval_ = nil, filnam_, class_, pattern_
  end
  if is_string(class_) and is_nil(noeval_) then -- right shift
    class_, pattern_, noeval_ = nil, class_, pattern_
  end
  if is_boolean(pattern_) and is_nil(noeval_) then -- right shift
    pattern_, noeval_ = nil, pattern_
  end

  local cls, patt, nval = class_ or self, pattern_ or '', noeval_ or false
  assert(is_object(self), "invalid argument #1 (object expected)")
  assert(is_object(cls) , "invalid argument #3 (object expected)")
  assert(is_string(patt), "invalid argument #4 (string expected)")
  assert(is_boolean(nval),"invalid argument #5 (boolean expected)")

  local tostring in MAD
  local n, cnt, res, lst, spc, str = 0, {}, {}, {}, ""
  repeat
    local var = self.__var
    -- header
    n, str = n+1, " '" .. self.__id .. "'"
    res[n] = spc .. "+ " .. tostring(self)
    spc = spc .. "   "
    -- variables
    local nv = 0
    table.clear(lst)
    for k,v in kpairs(self) do  -- collect valid names
      if is_string(k) and string.sub(k,1,2) ~= '__' and string.find(k,patt) then
        lst[nv+1], nv = k, nv+1
      end
    end
    table.sort(lst)             -- make output deterministic...
    for i=1,nv do               -- collect values, build output
      local k, v = lst[i], rawget(var, lst[i])
      str = spc .. tostring(k)
      if is_string(v) then
        str = str .. " : '" .. v:sub(1,25) .. "'"
      elseif not nval and is_function(v) then
        str = str .. " := " .. tostring(v(self))
      else
        str = str .. " :  " .. tostring(v)
      end
      if cnt[k]
      then str = str .. " (" .. string.rep('*', cnt[k]) .. ")" -- mark overrides
      else cnt[k] = 0
      end
      cnt[k], n = cnt[k]+1, n+1
      res[n] = str
    end
    if rawequal(self, cls) then break end
    self = parent(self)
  until is_nil(self)
  assert(rawequal(self, cls), "invalid argument #2 (parent of argument #1 expected)")

  -- return result as a string
  if filnam_ == '-' then return table.concat(res, '\n') end

  -- dump to file
  local file = assert(openfile(filnam_, 'w', '.dat'),
                      "unable to open ObjDump file in write mode")
  for _,s in ipairs(res) do file:write(s,'\n') end
  if is_string(filnam_) then file:close() else file:flush() end

  return self
end

-- debug ----------------------------------------------------------------------o

function MF:rawdump()
  local par = parent(self) or {}
  print(self.__id.." variables:", self.__var, "par:", par.__var)
  for k,v in pairs(self.__var) do print('',k,v) end
  print(self.__id.." methods:", self.__index, "par:", par.__index)
  for k,v in pairs(self.__index) do print('',k,v) end
  print(self.__id.." metamethods:", getmetatable(self), "par:", getmetatable(par))
  for k,v in pairs(getmetatable(self)) do print('',k,v) end
end

-- variables ------------------------------------------------------------------o

local MV = {}

-- aliases
MV.name   = \s -> s.__id
MV.parent = \s -> s.__par
MF.setvar = MF.set_variables
MF.getvar = MF.get_variables
MF.cpyvar = MF.copy_variables

-- env ------------------------------------------------------------------------o

MAD.typeid.is_object = is_object

-- object ---------------------------------------------------------------------o

-- add variables, methods and metamethods, set readonly
object = MF.set_methods(
  setmetatable({__id='object', __flg=0, __var=MV, __par=nil, __index={}}, MT),
    MF)

-- activate methods lookup as part of variables lookup
setmetatable(MV, object)

-- make readonly
object:set_readonly()

-- protect against changing metatable
MT.__metatable = MT

-- end ------------------------------------------------------------------------o
return { object = object }
