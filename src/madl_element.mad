--[=[
 o-----------------------------------------------------------------------------o
 |
 | Elements module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide the hierarchy (taxonomy) of the lattice elements

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- locals ---------------------------------------------------------------------o

local object, gfunc                                              in MAD
local errorf                                                     in MAD.utility
local is_nil, is_number, is_string, is_table, is_object,
      is_callable                                                in MAD.typeid
local set_flags, clear_flags, test_flags                         in MAD.object
local fbit, tobit, opstr                                         in MAD.gfunc

local _nyi

-- root object ----------------------------------------------------------------o

M.element = object 'element' { kind='element',
  l=0, lrad=\s -> s.l, angle=0, tilt=0, -- TBR: l, lrad, lfld, lmag, lint, lmech
  model=false, method=false, nslice=false, misalign=false,
  aperture={kind='circle', 1}, apertype=\s -> s.aperture.kind or 'circle',
}

-- identity -------------------------------------------------------------------o

local _id = {}

local function is_element (a)
  local mt = getmetatable(a)
  return mt ~= nil and mt.__elem == _id
end

-- flags ----------------------------------------------------------------------o

M.flags = {
  -- no flags
  none     = tobit(0),

  -- selection: all
  selected = fbit(0),

  -- disabling: all (e.g. monitors & kickers for orbit correction)
  disabled = fbit(1),

  -- observation: all (e.g. survey, track, twiss)
  observed = fbit(2),

  -- implicit elements (e.g. implicit drifts)
  implicit = fbit(3),

  -- plot layout (e.g. use angle in top layout)
  playout  = fbit(4),

  -- bits  5..26 are free
  -- bist 29..31 are used

  -- fringe fields flags
  fringe = MAD.dynmap.fringe,
}

-- members --------------------------------------------------------------------o

local selected, disabled, observed, implicit, fringe in M.flags

M.element :set_methods {
  select      = \s,f ->   set_flags(s, f or selected),
  deselect    = \s,f -> clear_flags(s, f or selected),
  is_selected = \s,f ->  test_flags(s, f or selected),
  is_disabled = \s   ->  test_flags(s, disabled),
  is_observed = \s   ->  test_flags(s, observed),
  is_implicit = \s   ->  test_flags(s, implicit),

} :set_metamethods {
  -- identity
  __elem = _id,
  -- concatenation
  __add = \a,b -> M.bline { a, b },
  -- repetition
  __mul = \a,b => if is_number(b) then a,b = b,a
                  else assert(is_number(a), "number expected")
                  end
                  return M.bline { __rep=a, b } end,
  -- reflection
  __unm = \a -> M.bline { __rep=-1, a },
  -- dump
  __tostring = \s -> string.format("%s: '%s' %p", s.kind, s.name, s),

} :set_readonly()

-- methods --------------------------------------------------------------------o

local function index_sat (self, sat, cmp_)
  assert(is_element(self), "invalid argument #1 (element expected)")
  assert(is_number(sat)  , "invalid argument #2 (number expected)")

  local cmp = is_string(cmp_) and opstr[cmp_] or cmp_ or gfunc.eq
  assert(is_callable(cmp), "invalid argument #3 (callable expected)")

  local n = #self
  for i=1,n do
    if cmp(sat, self[i].sat) then return i end
  end
  return n+1
end

local function insert_sat (self, elm, cmp_)
  assert(is_element(self), "invalid argument #1 (element expected)")
  assert(is_element(elm) , "invalid argument #2 (element expected)")
--  assert(elm.l == 0      , "invalid sub-element, zero-length required")

  local cmp = is_string(cmp_) and opstr[cmp_] or cmp_ or gfunc.lt
  assert(is_callable(cmp), "invalid argument #3 (callable expected)")

  return self:insert(index_sat(self, elm.sat, cmp), elm)
end

local function replace_sat (self, elm)
  assert(is_element(self), "invalid argument #1 (element expected)")
  assert(is_element(elm) , "invalid argument #2 (element expected)")
--  assert(elm.l == 0      , "invalid sub-element, zero-length required")

  local idx, old = index_sat(self, elm.sat)
  if idx <= #self then self[idx], old = elm, self[idx] end
  return old
end

local function remove_sat (self, sat)
  assert(is_element(self), "invalid argument #1 (element expected)")
  return self:remove(index_sat(self, sat))
end

-- taxonomy -------------------------------------------------------------------o

local invalid = \e ->
  errorf("invalid track element %s of kind %s with length %s",
          e.name, e.kind, e.l)

-- warning: set_methods must be consistent with survey and track.

local defmth = {survey=invalid, track=invalid}
local satmth = {  index_sat =   index_sat,
                 insert_sat =  insert_sat,
                 remove_sat =  remove_sat,
                replace_sat = replace_sat }

-- element kinds
M. thin_element = M.element  'thin_element' { is_thin =true,
  knl={}, ksl={}, dknl={}, dksl={} }                            :set_methods(defmth)
M.drift_element = M.element 'drift_element' { is_drift=true }   :set_methods(defmth):set_methods(satmth)
M.thick_element = M.element 'thick_element' { is_thick=true,
  knl={}, ksl={}, dknl={}, dksl={}, fringe=0,
  e1=0, e2=0, h1=0, h2=0, hgap=0, fint=0, fintx=false,
  fringemax=2, kill_ent_fringe=false, kill_exi_fringe=false }   :set_methods(defmth):set_methods(satmth)
M.patch_element = M.element 'patch_element' { is_patch  =true } :set_methods(defmth)
M.extrn_element = M.element 'extrn_element' { is_extern =true } :set_methods(defmth)
M.specl_element = M.element 'specl_element' { is_special=true } :set_methods(defmth)

-- assembler elements
M.sequence    = M.extrn_element 'sequence'     { }
M.assembly    = M.extrn_element 'assembly'     { }
M.bline       = M.extrn_element 'bline'        { }

-- special elements
M.marker      = M.specl_element 'marker'       { is_marker=true }
M.slink       = M.specl_element 'slink'        { is_slink=true, update=false }

-- drift elements
M.drift       = M.drift_element 'drift'        { }
M.collimator  = M.drift_element 'collimator'   { }
M.instrument  = M.drift_element 'instrument'   { }
M.placeholder = M.drift_element 'placeholder'  { }

-- thick elements
M.sbend       = M.thick_element 'sbend'        { k0=\s->s.angle/s.l, k0s=0, k1=0, k1s=0, k2=0, k2s=0, fringe=fringe.bend, }
M.rbend       = M.thick_element 'rbend'        { k0=\s->s.angle/s.l, k0s=0, k1=0, k1s=0, k2=0, k2s=0, fringe=fringe.bend, true_rbend=false }
M.quadrupole  = M.thick_element 'quadrupole'   { k0=0, k0s=0, k1=0, k1s=0, k2=0, k2s=0, f1=0, f2=0 }
M.sextupole   = M.thick_element 'sextupole'    { k2=0, k2s=0 }
M.octupole    = M.thick_element 'octupole'     { k3=0, k3s=0 }
M.decapole    = M.thick_element 'decapole'     { k4=0, k4s=0 }
M.dodecapole  = M.thick_element 'dodecapole'   { k5=0, k5s=0 }
M.solenoid    = M.thick_element 'solenoid'     { ks=0, ksi=0 }
M.tkicker     = M.thick_element 'tkicker'      { hkick=0, vkick=0 }
M.wiggler     = M.thick_element 'wiggler'      { _nyi }
M.elseparator = M.thick_element 'elseparator'  { ex=0, ey=0, exl=0, eyl=0 }
M.rfcavity    = M.thick_element 'rfcavity'     { volt=0, freq=0, lag=0, harmon=0, n_bessel=0, totalpath=true }
M.genmap      = M.thick_element 'genmap'       { damap=nil, nslice=1, update=false }

-- thin elements
M.multipole   = M.thin_element  'multipole'    { knl={}, ksl={}, dknl={}, dksl={}, ksi=0 }
M.beambeam    = M.thin_element  'beambeam'     { xma=0, yma=0, dir=0, bbeam=false, enabled=false }
M.nllens      = M.thin_element  'nllens'       { knll=0, cnll=0, enabled=false }

-- patch elements
M.xrotation   = M.patch_element 'xrotation'    { }
M.yrotation   = M.patch_element 'yrotation'    { }
M.srotation   = M.patch_element 'srotation'    { }
M.translate   = M.patch_element 'translate'    { dx=0, dy=0, ds=0 }
M.changeref   = M.patch_element 'changeref'    { dx=0, dy=0, ds=0, dtheta=0, dphi=0, dpsi=0 }
M.changedir   = M.patch_element 'changedir'    { }
M.changenrj   = M.patch_element 'changenrj'    { dnrj=0 }

-- specializations
M.rfmultipole = M.rfcavity      'rfmultipole'  { pnl={}, psl={}, dpnl={}, dpsl={} }
M.crabcavity  = M.rfmultipole   'crabcavity'   { } -- needed?

M.monitor     = M.instrument     'monitor'     { mredx=0, mredy=0, mresx=0, mresy=0 }
M.hmonitor    = M.monitor       'hmonitor'     { }
M.vmonitor    = M.monitor       'vmonitor'     { }

M.kicker      = M.tkicker        'kicker'      { chkick=0, cvkick=0 }
M.hkicker     = M. kicker       'hkicker'      { kick=0, hkick = \s->s.kick }
M.vkicker     = M. kicker       'vkicker'      { kick=0, vkick = \s->s.kick }

-- build kind and is_xxx keys of elements -------------------------------------o

local skip = { element=true }

for k,e in pairs(M) do
  if is_object(e) and not skip[k] then
    assert(is_element(e), "non-element '"..e.name.."' detected in element module")
    if k ~= string.lower(e.name) then
      error("inconsistent element kind '"..k.."' detected in '".. e.name .."'")
    end
    if e:is_readonly() then e:rawdump() end
    e:setvar{ kind=k }
  end
end

-- env ------------------------------------------------------------------------o

MAD.typeid.is_element = is_element

-- end ------------------------------------------------------------------------o
return { element = M }
