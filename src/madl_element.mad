--[=[
 o-----------------------------------------------------------------------------o
 |
 | Elements module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide the hierarchy (taxonomy) of the lattice elements

 o-----------------------------------------------------------------------------o
]=]

local M = { __help = {} }

-- help -----------------------------------------------------------------------o

M.__help.self = [=[
NAME
  element -- define MAD elements

SYNOPSIS

DESCRIPTION
  The module element is a front-end to the factory of all MAD elements.

RETURN VALUES

EXAMPLES
  local quadrupole in MAD.elements
  mq = quadrupole 'mq' {}
  qf = mq { k1  =  0.1   } -- focusing quadrupole
  qd = mq { k1 := -qf.k1 } -- defocusing quadrupole

SEE ALSO
  sequence, line, beam, object
]=]

-- locals ---------------------------------------------------------------------o

local Object    in MAD
local is_number in MAD.typeid

-- functions ------------------------------------------------------------------o

--[[ To move in Object or element:set_function(...) ?
local function show_inheritance(self, depth, sep)
  show_list(self, element_fields, sep)
  if depth > 0 and not rawget(self:class(), 'kind') then
    show_inheritance(self:class(), depth-1)
  end
end

local function show_properties(self, disp, sep)
  local show = type(disp) == 'number' and show_inheritance or show_list
  show(self, disp, sep)
end

function MT:show(disp)
  io.write('  ', string.format('%-25s',self:class().name.." '"..self.name.."' "), '{ at= ', self.s_pos, ', ')
  show_properties(self, disp)
  io.write(' },\n')
end

function MT:show_madx(disp)
  io.write('  ', string.format('%-25s',self.name..': '..self:class().name..', '), 'at= ', self.s_pos, ', ')
  show_properties(self, disp, {'= ', ', '})
  io.write(';\n')
end
]]

-- taxonomy -------------------------------------------------------------------o

local E = {}

-- Root

E.Element = Object 'Element' { kind='element', is_element=true }

E.Element :set_metamethod {
  -- concatenation
  __add = \a,b -> E.__bline { a, b },
  -- repetition
  __mul = \a,b => if is_number(b) then a,b = b,a end
                  return E.__bline { _rep=a, b } end,
  -- reflection
  __unm = \a -> E.__bline { _rep=-1, a },

}

-- frames

E.  thin_element = E.Element 'thin_element'   { is_thin  =true, l=0, angle=0, tilt=0 }
E. drift_element = E.Element 'drift_element'  { is_drift =true, l=0, angle=0, tilt=0 }
E.strait_element = E.Element 'strait_element' { is_strait=true, l=0, angle=0, tilt=0 }
E.curved_element = E.Element 'curved_element' { is_curved=true, l=0, angle=0, tilt=0 }

-- special elements

E.assembly    = E.Element 'assembly' { kind='assembly', is_assembly=true }
E.__bline     = E.Element '__bline'  { kind='__bline' , is_bline   =true }


-- special frames

E.marker      = E.thin_element 'marker' { kind='marker', is_marker=true }
E.patch       = E.thin_element 'patch'  { kind='patch' , is_patch =true }
E.slink       = E.thin_element 'slink'  { kind='slink' , is_slink =true }
E.spause      = E.thin_element 'spause' { kind='spause', is_spause=true }

-- factory

E.drift       = E.drift_element  'drift'       { kind='drift'       }
E.sbend       = E.curved_element 'sbend'       { kind='sbend'       }
E.rbend       = E.strait_element 'rbend'       { kind='rbend'       }
E.quadrupole  = E.strait_element 'quadrupole'  { kind='quadrupole'  }
E.sextupole   = E.strait_element 'sextupole'   { kind='sextupole'   }
E.octupole    = E.strait_element 'octupole'    { kind='octupole'    }
E.decapole    = E.strait_element 'decapole'    { kind='decapole'    }
E.dodecapole  = E.strait_element 'dodecapole'  { kind='dodecapole'  }
E.multipole   = E.  thin_element 'multipole'   { kind='multipole'   }
E.kicker      = E.strait_element 'kicker'      { kind='kicker'      }
E.solenoid    = E.strait_element 'solenoid'    { kind='solenoid'    }
E.wiggler     = E.strait_element 'wiggler'     { kind='wiggler'     }
E.elseparator = E.strait_element 'elseparator' { kind='elseparator' }
E.rfcavity    = E.strait_element 'rfcavity'    { kind='rfcavity'    }
E.rfmultipole = E.strait_element 'rfmultipole' { kind='rfmultipole' }
E.collimator  = E.drift_element  'collimator'  { kind='collimator'  }
E.instrument  = E.drift_element  'instrument'  { kind='instrument'  }
E.placeholder = E.drift_element  'placeholder' { kind='placeholder' }
E.monitor     = E.drift_element  'monitor'     { kind='monitor'     }

-- specializations

E.srotation   = E.patch          'srotation'   { kind='srotation'   }
E.xrotation   = E.patch          'xrotation'   { kind='xrotation'   }
E.yrotation   = E.patch          'yrotation'   { kind='yrotation'   }
E.translate   = E.patch          'translate'   { kind='translate'   }

E.twcavity    = E.rfcavity       'twcavity'    { kind='twcavity'    }
E.crabcavity  = E.rfmultipole    'crabcavity'  { kind='crabcavity'  }

E.hkicker     = E.kicker         'hkicker'     { kind='hkicker'     }
E.vkicker     = E.kicker         'vkicker'     { kind='vkicker'     }

E.hmonitor    = E.monitor        'hmonitor'    { kind='hmonitor'    }
E.vmonitor    = E.monitor        'vmonitor'    { kind='vmonitor'    }

E.bpm         = E.monitor        'bpm'         { kind='bpm'         }
E.blm         = E.monitor        'blm'         { kind='blm'         }

-- members --------------------------------------------------------------------o

E.Element:set_function {
  is_selected = \s -> s: test_flag(3) == false,
  select      = \s -> s:clear_flag(3),
  deselect    = \s -> s:  set_flag(3),
}

-- hook
M.element = E

-- end ------------------------------------------------------------------------o
return M
