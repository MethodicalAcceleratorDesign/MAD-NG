--[=[
 o-----------------------------------------------------------------------------o
 |
 | MAD environment (sandbox)
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Load in order all the modules of the MAD application and flatten them into
    the MAD environment for direct 1-level access using local 'in' table syntax.

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- modules --------------------------------------------------------------------o

-- list of modules to import in MAD, order matters!
local modules = {
  'regex', 'utest', 'lfun', -- from LPEG, LuaUnit and LuaFun
  'gutil', 'gfunc', 'gmath', 'range', 'complex', 'matrix', -- 'tpsa',
  'object', 'constant', 'mtable', 'element', 'sequence', 'beam', -- 'mflow',
  'command', 'survey', 'track',
  'madx', -- 'plot',
}

-- locals ---------------------------------------------------------------------o

local _C    = require 'madl_cmad'
local gutil = require 'madl_gutil'

local is_nil, is_boolean, is_number, is_string, is_table in gutil.typeid
local is_mappable, is_indexable, get_metamethod          in gutil.concept

require 'table.new'   -- load new   in table (side effect)
require 'table.clear' -- load clear in table (side effect)

-- globals --------------------------------------------------------------------o

-- uncomment to check invalid use of globals
--local _G_mt = getmetatable(_G)
--setmetatable(_G, {
--  __index    = \_,n error("attempt to read undeclared global variable " .. n, 2),
--  __newindex = \_,n error("attempt to write to undeclared global variable " .. n, 2),
--})

-- implementation -------------------------------------------------------------o

local _hlp, _chk = {}, {} -- hidden keys

-- special MAD environment
M._C        = _C              -- C symbol access
M.env       = _M              -- M preloaded environment
M.env.arg   = arg             -- backup of arg
M[_hlp]     = {}              -- backup for help
M[_chk]     = {}              -- backup for check
_M          = nil

-- warning, info, trace
local ctrace = trace

trace      = \l,s -> _C.mad_trace_level >= l and ctrace(l,s)
tracelevel = \l   -> _C.mad_trace_level >= l
infolevel  = \l   -> _C.mad_info_level  >= l
warncount  = \    -> _C.mad_warn_count

info_setlevel     = \l => local lvl = _C.mad_info_level
                                      _C.mad_info_level     = l return lvl end
trace_setlevel    = \l => local lvl = _C.mad_trace_level
                                      _C.mad_trace_level    = l return lvl end
trace_setlocation = \l => local lvl = _C.mad_trace_location
                                      _C.mad_trace_location = l return lvl end

-- import

function M.import (to, from, override)
  if to ~= MAD and is_nil(override) then -- right shift
    to, from, override = MAD, to, from
  end
  override = override or false
  assert(to == MAD           , "invalid argument #1 (MAD expected)")
  assert(is_indexable(from)  , "invalid argument #2 (indexable expected)")
  assert(is_boolean(override), "invalid argument #3 (boolean expected)")

  -- collect and check first (make a copy in case of error)
  local obj = {}
  for k,v in pairs(from) do
    if is_string(k) and string.sub(k,1,2) ~= '__' then
      if tracelevel(3) then
        trace(3, string.format('import: %-25s %-25s',k,v) )
      end
      assert(is_nil(MAD[k]) or MAD[k] == v or override == true,
             "cannot override definition for " .. tostring(k))
      obj[k] = v
    end
  end
  if is_mappable(from.__help ) then M[_hlp][from.__help ] = from.__help  end
  if is_mappable(from.__check) then M[_chk][from.__check] = from.__check end

  -- finalize the import
  for k,v in pairs(obj) do M[k] = v end
  return MAD
end

-- export

function M.export (from, what, to, override)
  if from ~= MAD and is_nil(override) then -- right shift
    from, what, to, override = MAD, from, what, to
  end
  if (is_nil(what) or is_boolean(what)) and is_nil(override) then -- right shift
    what, override = MAD, what
  end
  if (is_nil(to) or is_boolean(to)) and is_nil(override) then -- right shift
    to, override = _G, to
  end
  what     = is_string(what) and {what} or what or MAD
  to       = to       or _G
  override = override or false
  assert(from == MAD         , "invalid argument #1 (MAD expected)")
  assert(is_indexable(what)  , "invalid argument #2 (indexable expected)")
  assert(is_indexable(to)    , "invalid argument #3 (indexable expected)")
  assert(is_boolean(override), "invalid argument #4 (boolean expected)")

  -- collect and check first (make a copy in case of error)
  local obj = {}
  for k,v in pairs(what) do
    if is_number(k) and is_string(v) then
      k, v = v, MAD[v]
    end
    if is_string(k) and string.sub(k,1,2) ~= '__' then
      if tracelevel(2) then
        trace(3, string.format('export: %-25s %-25s',k,v) )
      end
      assert(is_nil(to[k]) or to[k] == v or override == true,
             "cannot override definition for " .. tostring(k))
      obj[k] = v
    end
  end

  -- finalize the export
  for k,v in pairs(obj) do to[k] = v end
  return MAD
end

-- help

local function collect(tt)
  local lst = {}
  for _,t in pairs(tt) do
    for k,v in pairs(t) do
      assert(is_nil(lst[k]), "unexpected duplicated data for "..k)
      lst[k] = v
    end
  end
  return lst
end

local function format(tt, n)
  local len = 2 -- tab
  for i,v in ipairs(tt) do
    len = len + #v + 2 -- sep
    if len > n then tt[i] = '\n  '..v ; len = #v + 2 end
  end
  return table.concat(tt, ', ')
end

local function checkhelp(hlp, sel, key)
  io.write(string.format("Checking help consistency for '%s'...\n", key or ''))
  local chk = collect(MAD[_chk])
  table.sort(sel)
  for _,k in ipairs(sel) do
    io.write(string.format("+ %-25s", k))
    local ctx = MAD
    for w, d, r in string.gmatch(k, "([%w_]+)([:.])([%g]+)") do
      io.write(string.format("w=%s, d=%s, r=%s ", w, d, r))
      if ctx[w] then
--        print(ctx[w])
        k, ctx = r, ctx[w]
      end
--      if w and ctx[w] then
--        print(w, d, ctx[w])
--        ctx = ctx[w]
--      end
    end
    io.write("\n")
  end
end

function M.help (from, pattern, _chk)
  if from ~= MAD and (is_nil(pattern) or is_boolean(pattern) and is_nil(_chk)) then -- right shift
    from, pattern, _chk = MAD, from, pattern
  end
  pattern = pattern or "^([%w_]+)$"
  assert(from == MAD       , "invalid argument #1 (MAD expected)")
  assert(is_string(pattern), "invalid argument #2 (string expected)")

  local hlp, sel, key = collect(MAD[_hlp]), {}, nil
  for k,v in pairs(hlp) do
    assert(is_string(v), "invalid data for "..k.." (string expected)")
    if k == pattern then
      key = k
    elseif string.match(k, pattern) then
      sel[#sel+1] = k
    end
  end

  if _chk == true then
    checkhelp(hlp, sel, key) return
  end

  if #sel == 0 and is_nil(key) then
    io.write("  No help found for '" .. pattern .. "'.")
  elseif key ~= nil then
    io.write(hlp[key])
  end

  table.sort(sel)
  local str = format(sel, 80)
  if str ~= '' then
    io.write("\nRelated topics:\n  ", str, ".\n")
  end
  io.write("\n")
end

-- environment ----------------------------------------------------------------o

-- useful as globals
help   = M.help
import = M.import
export = M.export

-- protect MAD environment (foolproof protection, no more)
MAD = setmetatable({},{
    __index     = M,
    __newindex := error "MAD is readonly",
    __len      := #M,
    __pairs    := pairs(M),
    __ipairs   := ipairs(M),
    __metatable = false,
  })

-- import MAD as a self reference and build help
MAD:import {
  MAD    = MAD,
  __help = require 'madh_main',
}

-- load MAD modules
for _,m in ipairs(modules) do
  MAD:import( require('madl_'..m) )
end

-- end ------------------------------------------------------------------------o
