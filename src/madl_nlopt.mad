--[=[
 o-----------------------------------------------------------------------------o
 |
 | Non Linear Optimizer module (loaded by match)
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local ffi = require 'ffi'
local _C in MAD

local abs in math

-- types ----------------------------------------------------------------------o

ffi.cdef [[
// NLopt return codes (see nlopt.h)

typedef enum {
  NLOPT_FAILURE = -1, /* generic failure code */
  NLOPT_INVALID_ARGS = -2,
  NLOPT_OUT_OF_MEMORY = -3,
  NLOPT_ROUNDOFF_LIMITED = -4,
  NLOPT_FORCED_STOP = -5,
  NLOPT_NUM_FAILURES = -6, /* not a result, just the number of possible failures */

  NLOPT_SUCCESS = 1, /* generic success code */
  NLOPT_STOPVAL_REACHED = 2,
  NLOPT_FTOL_REACHED = 3,
  NLOPT_XTOL_REACHED = 4,
  NLOPT_MAXEVAL_REACHED = 5,
  NLOPT_MAXTIME_REACHED = 6,
  NLOPT_NUM_RESULTS /* not a result, just the number of possible successes */
} nlopt_result;
]]

ffi.cdef [[
// NLopt supported algorithms (see nlopt.h)
// see https://nlopt.readthedocs.io/en/latest/NLopt_Algorithms/ for details

typedef enum {
/* Naming conventions:
  NLOPT_{G/L}{D/N}_* = global/local derivative/no-derivative optimization
  *_RAND algorithms involve some randomization.
  *_NOSCAL algorithms are *not* scaled to a unit hypercube
           (i.e. they are sensitive to the units of x)
*/
  NLOPT_GN_DIRECT = 0,
  NLOPT_GN_DIRECT_L,
  NLOPT_GN_DIRECT_L_RAND,
  NLOPT_GN_DIRECT_NOSCAL,
  NLOPT_GN_DIRECT_L_NOSCAL,
  NLOPT_GN_DIRECT_L_RAND_NOSCAL,

  NLOPT_GN_ORIG_DIRECT,
  NLOPT_GN_ORIG_DIRECT_L,

  NLOPT_GD_STOGO,
  NLOPT_GD_STOGO_RAND,

  NLOPT_LD_LBFGS_NOCEDAL,

  NLOPT_LD_LBFGS,

  NLOPT_LN_PRAXIS,

  NLOPT_LD_VAR1,
  NLOPT_LD_VAR2,

  NLOPT_LD_TNEWTON,
  NLOPT_LD_TNEWTON_RESTART,
  NLOPT_LD_TNEWTON_PRECOND,
  NLOPT_LD_TNEWTON_PRECOND_RESTART,

  NLOPT_GN_CRS2_LM,

  NLOPT_GN_MLSL,
  NLOPT_GD_MLSL,
  NLOPT_GN_MLSL_LDS,
  NLOPT_GD_MLSL_LDS,

  NLOPT_LD_MMA,

  NLOPT_LN_COBYLA,

  NLOPT_LN_NEWUOA,
  NLOPT_LN_NEWUOA_BOUND,

  NLOPT_LN_NELDERMEAD,
  NLOPT_LN_SBPLX,

  NLOPT_LN_AUGLAG,
  NLOPT_LD_AUGLAG,
  NLOPT_LN_AUGLAG_EQ,
  NLOPT_LD_AUGLAG_EQ,

  NLOPT_LN_BOBYQA,

  NLOPT_GN_ISRES,

/* new variants */
  NLOPT_AUGLAG,     // require local_optimizer to be set
  NLOPT_AUGLAG_EQ,  // require local_optimizer to be set
  NLOPT_G_MLSL,     // require local_optimizer to be set
  NLOPT_G_MLSL_LDS, // require local_optimizer to be set

  NLOPT_LD_SLSQP,

  NLOPT_LD_CCSAQ,

  NLOPT_GN_ESCH,

  NLOPT_GN_AGS,

  NLOPT_NUM_ALGORITHMS /* not an algorithm, just the number of them */
} nlopt_algorithm;
]]

ffi.cdef[[
// NLopt MAD C interface (see mad_nlopt.h)

typedef struct nlopt_args nlopt_args_t; /* MAD wrapper structure */
typedef struct nlopt_opt_s *nlopt_opt; /* internal opaque structure */

typedef num_t (nlopt_obj_t)(u32_t n, const num_t *x, num_t *grad, void *data);
typedef void  (nlopt_cts_t)(u32_t m, num_t *res,
                            u32_t n, const num_t* x, num_t* grad, void* data);

void mad_nlopt (nlopt_args_t *args);
void mad_nlopt_srand (u64_t seed);
void mad_nlopt_srand_time (void);

struct nlopt_args {
  // algorithm
        int    algo;
        str_t  algonam;

  // local algorithm (if provided)
        int    subalgo;
        str_t  subalgonam;

  // objective function (required)
  nlopt_obj_t *fun;
        num_t  fval;  // current minimum value
        num_t  fmin;  // minimum value required (target)
        num_t  ftol;  // minimum value change required (target)
        num_t  frtol; // minimum relative value change required (target)
         void *fdat;

  // state variables [n] (required)
        ssz_t  n;
        num_t *x;
  const num_t *xstp;
  const num_t *xmin;
  const num_t *xmax;
  const num_t *xtol;
        num_t  xrtol;

  // equality constraints [p]
        ssz_t  p;
  nlopt_cts_t *efun;
  const num_t *etol;
         void *edat;

  // inequality constraints [q]
        ssz_t  q;
  nlopt_cts_t *lfun;
  const num_t *ltol;
         void *ldat;

  // stop criteria (if >0)
        int    maxcall;
        num_t  maxtime;

  // debug level
        int    debug;

  // returned values
        int    status;

  // pointer to nlop opaque structure
  nlopt_opt    opt;
};

/* NLOPT API - to check after nlopt upgrade */
nlopt_result nlopt_force_stop (nlopt_opt, int val);
]]

-- NLOPT lib wrapper ----------------------------------------------------------o

local function nlopt_final (env)
  local var = env.__var
  if env.info >= 3 then io.write("nlopt: forced to stop\n") end
  _C.nlopt_force_stop(var.__arg[0].opt, var.status)
end

local function nlopt_fwrap (env)
  local var = env.__var
  local printf in MAD.utility
  local n, p, q, x, h, fun, fgrd, efun, lfun, c, cjac, grdf in var

  local funw = fun and -- objective function
  function (n_, x_, df_)
    assert(n_ == n  , "invalid number of variables (unexpected)")
    assert(x_ ~= nil, "missing vector of variables (unexpected)")

    if env.debug >= 2 then
      printf("objective (%s)\n", df_ ~= nil and 'D' or 'N')
      for i=1,n do printf("x[%d]=%.16e\n", i, x_[i-1]) end
    end

    for i=1,n do x[i], h[i] = x_[i-1], x_[i-1]-x[i] end

    var.grdf = df_ ~= nil
    local fval = fun()
    var.grdf = grdf
    if df_ ~= nil then for i=1,n do df_[i-1] = fgrd[i] end end
    if env.stop then nlopt_final(env) end
    return fval
  end or nil

  local efunw = efun and -- equalities
  function(p_, r_, n_, x_, jac_)
    assert(n_ == n  , "invalid number of variables (unexpected)")
    assert(p_ == p  , "invalid number of equalities (unexpected)")
    assert(x_ ~= nil, "missing vector of variables (unexpected)")
    assert(r_ ~= nil, "missing vector of equalities (unexpected)")

    if env.debug >= 2 then
      printf("equalities (%s)\n", jac_ ~= nil and 'D' or 'N')
      for i=1,n do printf("x[%d]=%.16e\n", i, x_[i-1]) end
    end

    efun()

    for i=1,p do r_[i-1] = c[i] end
    if jac_ ~= nil then for i=1,n*p do jac_[i-1] = cjac[i] end end
  end or nil

  local lfunw = lfun and -- inequalities
  function(q_, r_, n_, x_, jac_)
    assert(n_ == n  , "invalid number of variables (unexpected)")
    assert(q_ == q  , "invalid number of inequalities (unexpected)")
    assert(x_ ~= nil, "missing vector of variables (unexpected)")
    assert(r_ ~= nil, "missing vector of inequalities (unexpected)")

    if env.debug >= 2 then
      printf("inequalities (%s)\n", jac_ ~= nil and 'D' or 'N')
      for i=1,n do printf("x[%d]=%.16e\n", i, x_[i-1]) end
    end

    lfun()

    for i=1,q do r_[i-1] = c[p+i] end
    if jac_ ~= nil then for i=1,n*q do jac_[i-1] = cjac[n*p+i] end end
  end or nil

  return funw, efunw, lfunw -- objective, equalities and inequalities functions
end

local function nloptrun (env)
  local var = env.__var
  local arg = ffi.new 'nlopt_args_t[1]'

  -- nlopt C -> MAD callbacks and wrappers
  local fun,    efun,    lfun    = nlopt_fwrap(env)
  local fun_cb, efun_cb, lfun_cb -- callback
  if  fun then  fun_cb = ffi.cast('nlopt_obj_t*',  fun) end
  if efun then efun_cb = ffi.cast('nlopt_cts_t*', efun) end
  if lfun then lfun_cb = ffi.cast('nlopt_cts_t*', lfun) end

  -- nlopt use x to keep the best solution found so far, make a copy.
  local x = var.x:copy()
  local n, p, q in var

  arg[0].algo    = var.method.id
  arg[0].subalgo = var.submthd and var.submthd.id or -1

  arg[0].fun     = fun_cb
  arg[0].fval    = var.fval
  arg[0].fmin    = var.fmin
  arg[0].ftol    = var.ftol
  arg[0].frtol   = var.frtol

  arg[0].n       = n
  arg[0].x       = x._dat
  arg[0].xstp    = var.xstp._dat
  arg[0].xmin    = var.xmin._dat
  arg[0].xmax    = var.xmax._dat
  arg[0].xtol    = var.xtol._dat
  arg[0].xrtol   = var.xrtol

  arg[0].p       = var.p
  arg[0].efun    = efun_cb
  arg[0].etol    = p>0 and var.ctol._dat or nil
  arg[0].edat    = nil

  arg[0].q       = var.q
  arg[0].lfun    = lfun_cb
  arg[0].ltol    = q>0 and var.ctol._dat+p or nil
  arg[0].ldat    = nil

  arg[0].maxcall = var.maxcall
  arg[0].maxtime = var.maxtime

  arg[0].debug   = env.debug
  arg[0].status  = var.status

  -- nlopt uses _C API, i.e. JIT must be flushed after updating local/upvalues.
  var.jitf = true

  -- attach arg to var
  var.__arg = arg

  -- optimizer (protected call to C API)
  local status, errmsg = xpcall(_C.mad_nlopt, debug.traceback, arg)

  -- release callback (note: callbacks are never collected)
  if  fun then  fun_cb:free() end
  if efun then efun_cb:free() end
  if lfun then lfun_cb:free() end

  -- not a forced stop, copy status back
  if arg[0].status ~= _C.NLOPT_FORCED_STOP then
    var.status = arg[0].status
  end

  -- detach arg from var
  var.__arg = nil

  return status, errmsg
end

-- end ------------------------------------------------------------------------o
return nloptrun
