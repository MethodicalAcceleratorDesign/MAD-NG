--[=[
 o-----------------------------------------------------------------------------o
 |
 | Plot module
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: F.R. Leiro
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provides ploting

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- help -----------------------------------------------------------------------o

local __help = {}

-- locals ---------------------------------------------------------------------o
local dat = require 'madl_plotdat'
local range, nrange, vector in MAD
local min, max              in MAD.gmath

local GP = {
  gp_output      = 'test.eps'      ,
  plot_data      = "datatoplot.dat",
  script         = "plotter.gp"    ,
  terminal_type  = "postscript eps",
  font_type      = "Times-Roman"   ,
  font_size      = 22              ,
  xsize          = 27              ,
  ysize          = 17              ,
}
--plot default values
local PD = {
  min_x   = 0  ,
  max_x   = 10 ,
  min_y   = 0  ,
  max_y   = 10 ,
  label_x = "x",
  label_y = "y",
  gtitle  = "no-title",
}

-- implementation -------------------------------------------------------------o

local function plotter_gen(data_src, output, keys)
  for i=1,#data_src[keys[1]] do
    for j,k in ipairs(keys) do
      output:write(data_src[k][i]," ")
    end
    output:write("\n")
  end
    output:close()
end

-- PD
local function scale(data_src, keys)
  local s = #keys
  local vmin, vmax = vector(s), vector(s)
  for i,key in ipairs(keys) do
    local min = data_src[key]:min()
    local max = data_src[key]:max()
    vmin:seti(i, min)
    vmax:seti(i, max)
  end
  return vmin:min(), vmax:max()
end

local function axis_titles(inp_k, out_k)
  local label_x ,label_y = "",""
  for _,key in pairs(inp_k) do label_x = label_x..key.." " end
  for _,key in pairs(out_k) do label_y = label_y..key.." " end
  return label_x ,label_y
end

-- template operations
local function temp_fill(temp, src)
  for key,v in pairs(src) do
    local key = tostring(key)
    for i,tline in ipairs(temp) do -- regular loop might be better
      if tline:find(key)then
        temp[i] = tline:gsub( key, src[key] )
      end
    end
  end
  --return temp
end

local function temp_multiplot(temp, keys)
  local s, lnr = #keys
  for i,tline in ipairs(temp) do
    if tline:find('count') then lnr = i end
  end
  if lnr then
    for i=0,s-1 do temp[lnr+i]=temp[lnr] end
    for i=0,s-1 do temp[lnr+i]=temp[lnr+i]:gsub('count' ,tostring(i+2)) end
    for i=0,s-1 do temp[lnr+i]=temp[lnr+i]:gsub('ytitle',keys[i+1]    ) end
  end
end

local function temp_print(temp, printer)
  for i =1,#temp do printer:write(temp[i]) end
  printer:close()
end

local template = {
    -- general settings
    "reset\n",
    "set terminal terminal_type size xsize cm, ysize cm color font 'font_type, font_size'\n",
    "set output 'gp_output'\n",
    -- plot data setting
    "set grid \n",
    "set title 'gtitle' \n",
    "set xlabel 'label_x' \n",
    "set ylabel 'label_y' \n",

    "set xrange [min_x:max_x] \n",
    "set yrange [min_y:max_y] \n",
    -- plot data
    "plot ",
    "'plot_data' using 1:count every 1::0 w lines lc count title 'ytitle',\\\n"
}

-- plotting funtion -----------------------------------------------------------o

function M.plot(data_src, inp_k, out_k, rng)
  local printer = io.open(GP.script   , "w")
  local gp_file = io.open(GP.plot_data, "w")
  local tofill  = {GP, PD}

  local keys = {}
  for i,k in ipairs(inp_k) do keys[i] = k          end
  for i,k in ipairs(out_k) do keys[i + #inp_k] = k end

  print("ploting file: "..GP.gp_output.."\n")
  local d_src = {}

  local lenght = #data_src[keys[1]]
  local start, stop = 1, lenght
  if rng and rng:size() <= lenght then start, stop = rng.start, rng.stop end
  for j,k in ipairs(keys) do
    d_src[k]= data_src[k]:getv(start..stop)
  end

  PD.min_x  , PD.max_x   = scale( d_src, inp_k )
  PD.min_y  , PD.max_y   = scale( d_src, out_k )
  PD.label_x, PD.label_y = axis_titles( inp_k, out_k )
  plotter_gen( d_src, gp_file, keys )

  temp_fill     ( template, GP      )
  temp_fill     ( template, PD      )
  temp_multiplot( template, out_k   )
  temp_print    ( template, printer )
  os.execute("gnuplot "..GP.script)
end

-- end ------------------------------------------------------------------------o
return M