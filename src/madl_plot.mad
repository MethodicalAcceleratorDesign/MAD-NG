--[=[
 o-----------------------------------------------------------------------------o
 |
 | Plot module
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A.Z. Teska, aleksandra.teska at cern.ch
 |          F.R. Leiro
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provides ploting

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- help -----------------------------------------------------------------------o

local __help = {}

-- locals ---------------------------------------------------------------------o

local dat = require 'madl_plotdat' -- data with shapes of elements

local GP = {
  output    = 'test.eps'     ,
  plot_data = "datatoplot.dat",
  script    = "plotter.gp"    ,

  terminal_type  = "postscript eps",
  font      = "Times-Roman"      ,
  fontsize  = 22,
  xsize     = 27,
  ysize     = 17,
}
local PD = { --plot default values
  min_x = 0 ,
  max_x = 10,
  min_y = 0 ,
  max_y = 20,
}
-- implementation -------------------------------------------------------------o

function plotter_gen(data_table, gplot_data)
  for i=1,#data_table.x do
    gplot_data:write(data_table.x[i]," ",data_table.y[i]," \n")
  end
  gplot_data:close()
end

local template = {
    -- general settings
    "reset\n",
    "set terminal "..GP.terminal_type.." size "..GP.xsize.." cm,"..GP.ysize.." cm color font '"..GP.font..", "..GP.fontsize.."'\n",
    "set output '"..GP.output.."'\n",
    -- plot data setting
    "set grid \n",
    "set xrange ["..PD.min_x..":"..PD.max_x.."] \n",
    "set yrange ["..PD.min_y..":"..PD.max_y.."] \n",
    -- plot data
    "plot '"..GP.plot_data.."' w lines".."\n",
}

-- plotting funtion -----------------------------------------------------------o

function M.plot(table)
  print("ploting file: "..GP.output.."\n")
  printer = io.open(GP.script,"w")
  gp_file = io.open(GP.plot_data,"w")

  plotter_gen(table, gp_file)

  for i =1,#template do printer:write(template[i]) end
  printer:close()
  os.execute("gnuplot "..GP.script)
end

-- end ------------------------------------------------------------------------o
return M