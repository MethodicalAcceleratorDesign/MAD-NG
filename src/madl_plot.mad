--[=[
 o-----------------------------------------------------------------------------o
 |
 | Plot module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A. Bloch , aurelien.bloch at cern.ch
 | Contrib: F.R. Leiro, A.Z. Teska
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provides plotting facilities

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local ffi = require "ffi"
local dat = require "madl_plotdat"

local object, command, fun, vector, matrix, survey, filesys      in MAD
local sign, tan, sin, cos, min, max, abs, sqrt                   in MAD.gmath
local ftrue                                                      in MAD.gfunc
local inf, pi                                                    in MAD.constant
local fset                                                       in MAD.gfunc
local kpairs, strinterp, setkeys, tblcpy, runonce, fileexists,
      pause, atexit                                              in MAD.utility
local is_nil, is_number, is_table, is_mtable, is_string,
      is_sequence, is_rawtable                                   in MAD.typeid

-- global default -------------------------------------------------------------o

local _dflt = {
  originx      = 0,
  originy      = 0,
  psizex       = 1,
  psizey       = 1,
  laysize      = 0.15,
  multisize    = 0.05,
  maxew        = 1.2,   -- maximum size of an element (in plotdat)
  elemwidth    = 0.07,
  elemwidth_in = 0.02,
  padding      = 0.025,
  middle       = 0.5,
  layonly      = 1,
  ocolor       = "white",
  ostyle       = "solid 1.0",
  olstyle      = "black",
  border       = 15,
  grid         = "",
}

local tmpname   = "TMP_MAD_PLOT"
local tmpfolder = tmpname .. "/"
local tmplock   = tmpname .. ".lock"

-- tmp files ------------------------------------------------------------------o

local _handlepool, max_tmp_file = {}, 25
local _filepool, lock

-- change the name of the tmp folder (for testing)
local function set_tmp(self, name)
  assert(is_string(name), "invalid argument #2 (string expected)")
  tmpname   = name
  tmpfolder = tmpname .. "/"
  tmplock   = tmpname .. ".lock"
end

-- lock for atomic operation (blocking)
local function plot_lock (folder)
  lock = assert(io.open(tmplock, "w"))
  while not filesys.lock(lock, "w") do pause(100) end
  if not fileexists(tmpfolder) and folder ~= false then
    local status, msg = filesys.mkdir(tmpfolder)
    if not status then
      error("couldn't create " .. tmpname .. " : " .. msg)
    end
  end
end

-- unlock for atomic operation
local function plot_unlock (folder)
  if fileexists(tmpfolder) and folder == true then
    local status, msg = filesys.rmdir(tmpfolder)
    if not status then
      error("couldn't delete " .. tmpname .. " : " .. msg)
    end
  end
  os.remove(tmplock)
  filesys.unlock(lock)
  lock:close()
end

-- clear the list of handle of non-existing file
local function clear_handle (sid_)
  plot_lock(false)
  if not fileexists(tmpfolder) then
    _handlepool = {}
    plot_unlock()
    return false
  end
  local isbusy = false
  for fname,v in pairs(_handlepool) do
    if not fileexists(fname) then
      _handlepool[fname] = nil
    elseif sid_ == v[1] then
      isbusy = true
    end
  end
  plot_unlock()
  return isbusy
end

-- remove unused tmp file
local function clean_tmp ()
  if not fileexists(tmpfolder) then return end
  plot_lock(false)
  if not fileexists(tmpfolder) then plot_unlock() return end
  local delfolder = true
  for name in filesys.dir(tmpfolder) do
    if string.find(name, "madplot%-%d+") then
      local fname = tmpfolder .. name
      local file  = io.open(fname)
      if file and filesys.lock(file, "r") and not _handlepool[fname] then
        os.remove(fname)
      else
        delfolder = false
      end
      if file then file:close() end
    end
  end
  _filepool = nil
  plot_unlock(delfolder)
  clear_handle()
end

-- initialize the list of available tmp file
local function setup_files()
  clean_tmp()
  local entry = 1
  local tmpfile = tmpfolder .. "madplot-"
  _filepool     = {}
  for i=max_tmp_file,1,-1 do
    local file = tmpfile .. i
    if not fileexists(file) then
      _filepool[entry] = file
      entry = entry + 1
    end
  end
end

local plot_atexit = \ atexit(clean_tmp)
-- return an available tmp file and its name (blocking)
local function get_tmpfile(sid)
  runonce(plot_atexit)
  if not is_rawtable(_filepool) then setup_files() end
  local fname = false
  while true do
    plot_lock()
    fname = table.remove(_filepool)
    if fname and not fileexists(fname) then break end
    plot_unlock();
    pause(100);
    setup_files()
  end
  local file = assert(io.open(fname, "w"))
  _handlepool[fname] = {sid, file}
  filesys.lock(file, "w")
  plot_unlock()
  return file, fname
end

-- gplot ----------------------------------------------------------------------o

-- gnuplot list, hidden key for sid
local _gplist, _sid = { max = 25 }, {}

-- get gnuplot from id and create it if necessary
local function get_gp (sid)
  local gnuplot = _gplist[sid]
  if not gnuplot then
    gnuplot = assert(io.popen("gnuplot -p", "w"))
    gnuplot:setvbuf("line")
    _gplist[sid] = gnuplot
  end
  return gnuplot
end

-- write command to gnuplot
local function gp_write (gplot, ...)
  get_gp(gplot[_sid]):write(..., "\n")
end

-- printf command to gnuplot
local function gp_printf (gplot, str, ...)
  get_gp(gplot[_sid]):write(string.format(str, ...), "\n")
end

-- set the sid of a gplot
local function gp_setsid (gplot, sid)
  assert(is_number(sid), "invalid argument #1 (number expected)")
  if sid < 1 or _gplist.max < sid then
    error("invalid argument #1 (number should be comprise between 1 and "
      .. _gplist.max .. ")")
  end
  gplot[_sid] = sid
end

-- test if tmp files exist for this sid
local function gp_isBusy (gplot)
 return clear_handle(gplot[_sid])
end

local _gplot = object 'Gplot' {
  sid           = \gplot -> gplot[_sid],
  tmpname       = \ tmpname,
  [_sid]        = 1,
} :set_methods {
  write         = gp_write,
  printf        = gp_printf,
  set_sid       = gp_setsid,
  is_busy       = gp_isBusy,
  clean_tmpfile = clean_tmp,
  set_tmpname_  = set_tmp,   -- unsafe ?
} :set_readonly()

local gplot = _gplot {}

-- initialization -------------------------------------------------------------o

local init_cmd = [[
#== initialization =============================================================
if (!exist("MAD_MIN")) {
  MAD_MIN      = ${objshft};
  MAD_MAX      = -1;
  MAD_WID      = -1;
  MAD_TERM     = "";
  MAD_OLD_WID  = -1;
  MAD_OLD_TERM = "";
}
MAD_INC_WID      = "MAD_WID = MAD_WID + 1"
MAD_RESET_OBJECT = "unset for [i=MAD_MIN:MAD_MAX] object i"
MAD_RESET_LABEL  = "unset for [i=MAD_MIN:MAD_MAX] label i"
MAD_SET_TERM     = " \
  if (!((MAD_OLD_TERM eq MAD_TERM) && \
        (MAD_OLD_WID  == MAD_WID ))) { \
    @MAD_TERM; \
    MAD_OLD_TERM = MAD_TERM; \
    MAD_OLD_WID  = MAD_WID; \
  } \
"
#===============================================================================

]]

-- dump header and set terminal to script file
local function setup_cmd (self)
  local output, scrdump in self
  local file, fname = get_tmpfile(self.sid)
  gplot:set_sid(self.sid)
  file:write(init_cmd % self)

  self.font     = self.font     or ""
  self.fontsize = self.fontsize or ""

  if is_nil(output) then
    file:write("@MAD_INC_WID\n")
    file:write("MAD_TERM = \"set term ${term} MAD_WID size ${wsizex},\z
      ${wsizey} enhanced font '${font},${fontsize}'\"\n" % self)
  elseif is_number(output) then
    file:write("MAD_TERM = \"set term ${term} ${output} size ${wsizex},\z
      ${wsizey} enhanced font '${font},${fontsize}'\"\n" % self)
  elseif is_string(output) then
    file:write("MAD_TERM = \"set term pdfcairo enhanced font \z
      '${font},${fontsize}'; set out '${output}'\"\n" % self)
  end

  file:write("@MAD_SET_TERM\n")
  return file, fname
end

local function gnuplot_rm(fname)
  if jit.os == "Windows"
  then gplot:printf("system 'del %s >nul 2>&1'", fname)
  else gplot:printf("system '\\rm -f %s'"      , fname)
  end
end

local function gnuplot_mv(fname, uname)
  if jit.os == "Windows"
  then gplot:printf("system 'move /Y %s %s'", fname, uname)
  else gplot:printf("system '\\mv %s %s'"   , fname, uname)
  end
end

local function teardown_cmd (self, file, fname)
  local scrdump, output in self
  file:close()
  if output ~= false then
    gplot:printf("load('%s')", fname)
    if is_string(scrdump)
    then gnuplot_mv(fname, scrdump)
    else gnuplot_rm(fname)
    end
  else
    if is_string(scrdump) then
      os.rename(fname, scrdump)
    else
      os.remove(fname)
      print("MAD Plot Warning : no scrdump nor output provided - Nothing done")
    end
  end
end

-- layout ---------------------------------------------------------------------o

-- element flag for layout
local flayout = MAD.element.flags.playout

--  adjust "out of plot" layout coordinate
local adjust = \size  -> \xs,ys,shift,l =>
  local shape  = vector(3):fill{xs, ys, 0}
  local factor = vector(3):fill{l, size, 0}
  return factor:emul(shape) + shift
end

--  adjust "in plot" layout coordinate
local adjust_in = \size -> \xs,ys,data,l =>
  local rot, shift = data[1], data[2]
  local shapcoord  = matrix(3):fill{ 0, 1, 0,
                                    -1, 0, 0,
                                     0, 0, 0, }
  local shapshift  = vector(3):fill{1, 0, 0}
  local shape      = vector(3):fill{xs,ys,0}
  local factor     = vector(3):fill{l, size, 0}
  return rot*shapcoord*(factor:emul(shape+shapshift))+shift
end

-- return the shape of an element in x and y
local function eShap (param, elem, dir)
  local kindcolor in param
  local shape = dat[elem.kind]
  if not shape then
    error("element of kind: '" .. elem.kind
          .. "' doesn't have a corresponding shape")
  end
  local el, dash, sh = shape.ellipse, shape.dashtype, shape.shape
  local color, style, linecolor

  if is_table(kindcolor) and kindcolor[elem.kind] then
    local cs = kindcolor[elem.kind]
    color     = is_table(cs) and cs.fillcolor or is_string(cs) and cs or shape.fillcolor
    style     = is_table(cs) and cs.fillstyle or shape.fillstyle
    linecolor = is_table(cs) and cs.linecolor or shape.linecolor
    dash      = is_table(cs) and cs.dashtype  or dash
  elseif kindcolor then
    color, style, linecolor = shape.fillcolor, shape.fillstyle, shape.linecolor
  else
    color, style, linecolor = _dflt.ocolor, _dflt.ostyle, _dflt.olstyle
  end

  local eStyle = {
    color     = color,
    style     = style,
    linecolor = linecolor,
    dash      = dash,
  }

  sh = sh and elem.l == 0 and elem.kind ~= "marker" and dat.default.shape or sh
  -- if only a ellipse
  if not is_table(sh) then return el, eStyle end

  local ysym, yscl, func = shape.ysym, (shape.yscl or 1), nil
  local yshft = elem[shape.yshft] and sign(elem[shape.yshft]) or 0
  yshft = yshft * (shape.yfact or 1)
  if is_number(ysym) then -- for symmetric shapes
    func = {
      \y -> yscl*(yshft + y),
      \y -> yscl*(yshft - y),
    }
  else
    local fv = sign(elem[ysym] or 1)
    ysym = (ysym == "angle") and fv*dir or fv
    func = {\y -> yscl*(yshft + ysym*y)}
  end
  return el, eStyle, sh.x, sh.y, func
end

-- stream polygon data
local function layout_poly (param, len, data, x_sh, y_sh, eStyle, func)
  local fpwrite, adjust, ref in param
  for i=1,#func do
    for j=1,#x_sh do
      local xj, yj = x_sh[j], y_sh[j]
      local dashtype = eStyle.dash and "dashtype '" .. eStyle.dash .. "'" or ""
      fpwrite("set object %d polygon front fc rgb '%s' fs %s \z
        border rgb '%s' %s \\\n",
        param.oid, eStyle.color, eStyle.style, eStyle.linecolor, dashtype)
      local cmd = "from"

      for k=1,#xj do
        local xk, yk = xj[k], func[i](yj[k])
        local pts  = adjust(xk, yk, data, len)
        local next = (k == #xj) and "" or " \\"
        fpwrite("  %s %.5e, %s %.5e%s\n", cmd, pts[1], ref, pts[2], next)
        cmd = "to"
      end
      param.oid = param.oid + 1
    end
  end
  fpwrite("\n")
end

-- stream ellipse data
local function layout_ellipse (param, len, el, data, eStyle, size)
  local fpwrite, adjust, ref in param
  local pts = adjust(0, 0, data, len)
  local sx, sy = len, el*size
  local dashtype = eStyle.dash and "dashtype '" .. eStyle.dash .. "'" or ""
  fpwrite("set object %d ellipse front at %.5e, %s %.5e \\\n\z
    size %.5e, %s %.5e front fc rgb '%s' fs %s border rgb '%s' %s \n",
    param.oid, pts[1], ref, pts[2], sx, ref, sy,
    eStyle.color, eStyle.style, eStyle.linecolor, dashtype)
  param.oid = param.oid + 1
end

-- stream element label data
local function layout_label(param, name, kind, len, data)
  local fpwrite, oid, ref, adjust in param
  local pts  = adjust(0, 0, data, len/2)
  local label = name .. " [" .. kind .. "]"
  fpwrite("set label %d back at %.5e, %s %.5e '%s' hypertext \z
    point pt 4 ps 1 lc 'white'\n", oid, pts[1], ref, pts[2], label)
end

-- stream beam line data
local function layout_bline (param, bline)
  local fpwrite, ref in param
  local fstx, fsty = bline.x[1], bline.y[1]
  local size = #bline.y
  fpwrite("set object %d polygon front dashtype solid \\\n  \z
    from %.5e, %s %.5e \\\n", param.oid, fstx, ref, fsty)
  for i=2,size do
    local xi, yi = bline.x[i], bline.y[i]
    fpwrite("  to %.5e, %s %.5e \\\n", xi, ref, yi)
  end
  for i=size-1,1,-1 do
    local xi, yi = bline.x[i], bline.y[i]
    local next   = (i == 1) and "" or " \\"
    fpwrite("  to %.5e, %s %.5e%s\n", xi, ref, yi, next)
  end
  param.oid = param.oid + 1
end

-- process data for "out of plot" layout
local function layout_process(param, pseq)
  local layshift, nturn, layangle                         in param
  local range, seq, disty, distx, xmin, xmax, ymin, ymax  in pseq
  local size     = seq:length_of(range, nturn)
  local data     = table.new(size, 0)
  local bline    = { x={}, y={} }
  local deltaY   = disty
  local prevs_sh, angle, j, dir = 0, 0, 1, seq.dir
  local fstx, l2, s_sh, xs, ys
  for i, elem, s in seq:iter(range, nturn) do
    l2           = elem.l/2
    s_sh         = s + l2
    deltaY       = deltaY - tan(dir*angle)*(s_sh-prevs_sh)
    xs, ys       = s_sh + distx + layshift, deltaY
    data[j]      = vector(3):fill{ xs, ys, 0 }
    prevs_sh     = s_sh
    fstx         = fstx or xs - l2
    xmin, xmax   = min(xmin, xs), max(xmax, xs)
    ymin, ymax   = min(ymin, ys), max(ymax, ys)
    if elem:test_flags(flayout) and layangle then
      angle = angle + elem.angle
      table.insert(bline.x, xs); table.insert(bline.y, ys)
    end
    j = j + 1
  end
  local lstx, lsty = xs + l2, deltaY - tan(dir*angle)*l2
  local fsty = data[1][2]
  table.insert(bline.x, 1, fstx); table.insert(bline.y, 1, fsty)
  table.insert(bline.x, lstx   ); table.insert(bline.y, lsty    )
  pseq.xmin, pseq.xmax  = min(xmin, fstx, lstx), max(xmax, fstx, lstx)
  pseq.ymin, pseq.ymax  = min(ymin, fsty, lsty), max(ymax, fsty, lsty)
  pseq.data, pseq.bline = data, bline
end

local ssel = \e -> not e:is_implicit()

-- process data "in plot" layout (see help for formula)
local function layout_process_in(param, pseq)
  local nturn                           in param
  local range, seq, s0, X0, A0, W0, mis in pseq
  local srv   = survey { sequence=seq, range=range, nturn=nturn, savesel=ssel,
                         s0=s0, X0=X0, A0=A0, W0=W0, misalign=mis }
  local data  = table.new(#srv, 0)
  local bline = { x=table.new(#srv, 0), y=table.new(#srv, 0) }

  local v0, xz2xy = vector(3), matrix(3):fill{ 1, 0, 0 ; 0, 0, 1 ; 0, 0, 0 }
  local shift

  for i, line in srv:iter() do
    local srvTranslat = vector(3):fill{line.x, line.y, line.z}
    local rot = matrix(3):rotz(-line.theta - 0.5*line.angle)
    shift = xz2xy*srvTranslat

    data[i]              = {rot, shift}
    pseq.xmin, pseq.xmax = min(pseq.xmin, shift[1]), max(pseq.xmax, shift[1])
    pseq.ymin, pseq.ymax = min(pseq.ymin, shift[2]), max(pseq.ymax, shift[2])
    table.insert(bline.x, shift[1]); table.insert(bline.y, shift[2])
  end
  local fst, lst = xz2xy*v0:fill(X0), shift
  table.insert(bline.x, 1, fst[1]); table.insert(bline.y, 1, fst[2])
  table.insert(bline.x,    lst[1]); table.insert(bline.y,    lst[2])
  pseq.xmin, pseq.xmax  = min(pseq.xmin, fst[1], shift[1]), max(pseq.xmax, fst[1], lst[1])
  pseq.ymin, pseq.ymax  = min(pseq.ymin, fst[2], lst[2]  ), max(pseq.ymax, fst[2], lst[2])
  pseq.data, pseq.bline = data, bline
end

-- stream a single layout
local function layout (param, pseq)
  local elemsel, elemwidth, elemname, nturn, kindcolor in param
  local seq, range, data, bline                        in pseq
  local dir, j  = seq.dir, 1

  layout_bline(param, bline)
  for i, elem, s in seq:iter(range, nturn) do
    local len, ekind   = elem.l, elem.kind
    local is_flagged   = elem:test_flags(flayout)
    local dj = data[j]

    if is_flagged or elemsel(elem) then
      local sh_l = len / 2
      local el, eStyle, x_sh, y_sh, func = eShap(param, elem, dir)

      if elemname  then layout_label(param, elem.name, ekind, len, dj) end

      if not is_nil(el) and len ~= 0 then
        layout_ellipse(param, len, el, dj, eStyle, elemwidth)
      end

      if not is_nil(x_sh) then
        layout_poly(param, sh_l, dj, x_sh, y_sh, eStyle, func)
      end
    end
    j = j + 1
  end
end

-- compute bounding box and scale data accordingly
-- post processing for "out of plot" layout
local function layout_post(param, pseqs, xmin, xmax, ymin, ymax)
  local sequence, laypos, layonly, elemwidth, elemscale in param
  local padding, multisize, maxew, middle               in _dflt
  param.laysize  = param.laysize
    or (layonly and _dflt.layonly)
    or (is_rawtable(sequence) and _dflt.laysize + multisize*#sequence)
    or _dflt.laysize
  elemwidth     = (elemwidth or _dflt.elemwidth) * elemscale
  local ybbox   = abs(ymax - ymin) + 2*maxew*elemwidth + 2*padding
  local yfactor = param.laysize / ybbox
  if laypos=="top"    then laypos=1-( ymax+maxew*elemwidth+padding)*yfactor end
  if laypos=="bottom" then laypos=  (-ymin+maxew*elemwidth+padding)*yfactor end
  if laypos=="middle" then laypos=middle                                    end
  param.elemwidth = elemwidth * yfactor
  for i=1,#pseqs do
    local pseq = pseqs[i]
    local data, bline in pseq
    fun.foreach(\v => v[2]=v[2]*yfactor + laypos end, data)
    pseq.bline.y = fun.map(\y -> y*yfactor + laypos, bline.y):totable()
  end
  param.xrng = { xmin, xmax }
end

-- post processing for "in plot" layout
local function layout_post_in(param, xmin, xmax, ymin, ymax)
  local elemwidth, elemscale         in param
  local maxew, elemwidth_in, padding in _dflt
  local diag = sqrt((xmax-xmin)^2 + (ymax-ymin)^2)
  elemwidth = elemwidth and elemscale*elemwidth or
              elemscale*diag*elemwidth_in/maxew
  param.xrng      = { xmin - maxew*elemwidth - padding*diag,
                      xmax + maxew*elemwidth + padding*diag, }
  param.yrng      = { ymin - maxew*elemwidth - padding*diag,
                      ymax + maxew*elemwidth + padding*diag }
  param.elemwidth = elemwidth
end

-- main layout function
local function multi_layout (param)
  local sequence, s0, X0, A0, W0, fpwrite, range, misalign, laydistx,
        laydisty, elemwidth, laypos in param
  local is_in = (laypos == "in")
  param.ref = is_in and "" or "screen"
  local xmin, xmax, ymin, ymax = inf, -inf, inf, -inf
  local pseqs = { }
  local seqs = is_rawtable(sequence) and sequence or
               is_sequence(sequence) and {sequence} or
               error("Invalid sequence input")

  for i=1,#seqs do
    local s0    = is_table(s0) and                     s0[i] or s0 -- scalar
    local X0    = is_table(X0) and is_table(X0[1]) and X0[i] or X0 -- triplet
    local A0    = is_table(A0) and is_table(A0[1]) and A0[i] or A0 -- triplet
    local W0    = is_table(W0) and                     W0[i] or W0 -- scalar
    local distx = (i~=1) and (is_table(laydistx) and laydistx[i-1] or laydistx) or 0
    local disty = (i~=1) and (is_table(laydisty) and laydisty[i-1] or laydisty) or 0
    local rg    = (#seqs > 1) and is_table(range) and range[i] or range or nil
    local pseq  = {
      xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, range = rg,
      seq = seqs[i], s0=s0, X0 = X0, A0 = A0, W0 = W0, mis = misalign,
      distx = distx, disty = disty,
    }
    if is_in
    then layout_process_in(param, pseq)
    else layout_process(param, pseq)
    end
    xmin, xmax = min(xmin, pseq.xmin), max(xmax, pseq.xmax)
    ymin, ymax = min(ymin, pseq.ymin), max(ymax, pseq.ymax)
    pseqs[i]   = pseq
  end

  if is_in
  then layout_post_in(param, xmin, xmax, ymin, ymax)
  else layout_post(param, pseqs, xmin, xmax, ymin, ymax)
  end
  param.adjust = is_in and adjust_in(param.elemwidth) or adjust(param.elemwidth)

  for i=1,#pseqs do
    local pseq = pseqs[i]
    layout(param, pseq)
  end

  fpwrite("MAD_MAX = %d\n", param.oid)
  local xrange, yrange, xrng, yrng in param
  if not xrange           then fpwrite("set xrange [%.5e:%.5e]\n", xrng[1], xrng[2]) end
  if not yrange and is_in then fpwrite("set yrange [%.5e:%.5e]\n", yrng[1], yrng[2]) end
end

-- plot -----------------------------------------------------------------------o

-- parse input axis
local function parse_axis (param)
  local selaxis in param
  local di = 1
  local _axis = {"x1y1", "x1y2", "x2y1", "x2y2"}
  for _, axis_name in ipairs(_axis) do
    local axis = param[axis_name]
    if is_string(axis) then                  -- e.g. x1y1 = "y1"
      selaxis[di] = {axis_name, nil, {axis}}
      di = di + 1
    elseif is_table(axis) then
      if #axis ~= 0 then
        selaxis[di] = {axis_name, nil, axis} -- e.g. x1y1 = {"y1", "y2"}
        di = di + 1
      end
      local keys, ki = {}, 1
      for k in kpairs(axis) do keys[ki], ki = k, ki+1 end
      table.sort(keys)
      for _, x in ipairs(keys) do
        local ys = axis[x]
        if is_string(ys) then                -- e.g. x1y1 = { x1 = "y1" }
          selaxis[di] = {axis_name, x, {ys}}
        elseif is_table(ys) then             -- e.g. x1y1 = { x1 = {"y1", "y2"}}
          selaxis[di] = {axis_name, x, ys}
        end
        di = di + 1
      end
    end
  end
  param.selaxis = selaxis
end

-- stream one plot data
local function plot_data (param, xlbl, ylbl)
  local fpwrite, tablerange, data, table in param
  local datai, iter, tbl, key = 1

  if table
  then iter, tbl, key = table:iter(tablerange)
  else iter, tbl, key = ipairs(data[ylbl[1]])
  end

  local get_data = \lbl, row ->
    data  and data[lbl] and data[lbl][datai] or
    table and row       and row[lbl]

  fpwrite("# %-9s ", xlbl or "index")
  for j, lbl in ipairs(ylbl) do
    fpwrite("%-11s ", lbl)
  end
  fpwrite("\n")

  for i, row in iter, tbl, key do
    fpwrite("%.5e ", get_data(xlbl, row) or datai)
    for j, lbl in ipairs(ylbl) do
      local val = get_data(lbl, row)
      if not is_number(val) then error("MAD Plot : invalid data") end
      fpwrite("%.5e ", val)
    end
    fpwrite("\n")
    datai = datai + 1
  end
  fpwrite("\n\n")
end

-- parse dashtypes and add '' if it is a pattern : e.g.: ".-- "
local function parse_dash (dashtypes, datastyle, y)
  local dash = datastyle and datastyle.dashtype

  if not dash then
    if is_table(dashtypes)
    then dash = dashtypes[y]
    else dash = dashtypes
    end
  end

  if dash and string.match(dash, "[.%-_ ]+") then return "'" .. dash .. "'" end
  return dash
end

-- get style with proper precedence
local function getstyle (param, y, stys, sty)
  local style = param.datastyles[y] and param.datastyles[y][sty]

  if not style then
    if is_table(param[stys])
    then style = param[stys][y]
    else style = param[stys]
    end
  end

  return style
end

-- Create interpolation variable for the plot command
local function plot_cmd (param, axis, ys)
  local dashtypes, legend, datastyles, intpol in param
  local values
  local add2 = \k,v => values[k]            = values[k] and v%values or "" end
  local add  = \k,v => intpol[k..intpol.id] = v                            end

  for i, y in ipairs(ys) do
    values = {
      color     = getstyle(param, y, 'colors'    , 'color'    ),
      style     = getstyle(param, y, 'styles'    , 'style'    ),
      pointsize = getstyle(param, y, 'pointsizes', 'pointsize'),
      pointtype = getstyle(param, y, 'pointtypes', 'pointtype'),
      linewidth = getstyle(param, y, 'linewidths', 'linewidth'),
      smooth    = getstyle(param, y, 'smooths'   , 'smooth'   ),
      dashtype  = parse_dash(dashtypes, datastyles[y], y),
      title     = legend    == false and "" or is_table(legend) and
                 (legend[y] == false and "" or legend[y]) or y,
      axis      = axis,
      col       = i + 1,
    }

    if intpol.id == 1
    then add("cmd", "plot "); add("data", "'$MAD_DATA' ")
    else add("cmd", "     "); add("data", "''          ")
    end

    add("index", "index ${databi} " % param)
    add("using", "using 1:${col} "  % values)

    if values.style
    then add("style", "${style} " % values)
    else add("style", "linespoints ")
    end

    add2("dashtype" , "dashtype ${dashtype} "  )
    add2("linewidth", "linewidth ${linewidth} ")
    add2("pointsize", "pointsize ${pointsize} ")
    add2("pointtype", "pointtype ${pointtype} ")

    add("lines" , "${dashtype}${linewidth}"  % values)
    add("points", "${pointsize}${pointtype}" % values)
    add("title" , "title '${title}' "        % values)
    add("axes"  , "axes ${axis} "            % values)

    add("smooth", values.smooth and "smooth ${smooth} "     % values or "")
    add("color" , values.color  and "linecolor '${color}' " % values or "")
    intpol.id = intpol.id + 1
  end
  param.databi = param.databi + 1
end

-- Create the plot command or used the user provided one and interpolate
local function cmd_interpolate (param)
  local pwrite, intpol, plotcmd, plotvar in param
  local cmd = ""
  if is_string(plotcmd) then
    cmd = plotcmd
  else
    local cmdi = "${cmd${id}}${data${id}}${index${id}}${using${id}}\z
                  with ${style${id}}${lines${id}}${points${id}}\z
                  ${color${id}}${title${id}}${axes${id}}${smooth${id}},\\\n"
    for i=1,intpol.id-1 do
      cmd = cmd .. strinterp(cmdi, { id = i }, '=')
    end
  end
  if is_table(plotvar) then intpol:setvar(plotvar) end
  pwrite(cmd % intpol)
end

-- set the range command for all axis
local function set_ranges (param)
  local fpwrite in param
  local names = {"xrange", "x2range", "yrange", "y2range"}
  for _,rname in ipairs(names) do
    local range = param[rname]
    if range then fpwrite("set %s [%.5e:%.5e]\n", rname, range[1], range[2]) end
  end
end

-- set label command for each axis
local function set_label (param)
  local fpwrite in param
  local names = {"xlabel", "x2label", "ylabel", "y2label"}
  for _,lname in ipairs(names) do
    local label = param[lname]
    if label then fpwrite("set %s '%s'\n", lname, label) end
  end
end

-- set tics for each used axis
local function set_tics (param)
  local x2y1, x2y2, x1y2, x2y2, pwrite in param
  if x2y1 or x2y2 then pwrite("set xtics nomirror\nset x2tics nomirror\n") end
  if x1y2 or x2y2 then pwrite("set ytics nomirror\nset y2tics nomirror\n") end
end

-- set remaining parameters (miscellaneous)
local function set_misc (param)
  local fpwrite, psizex, psizey, originx, originy, grid,
    border, title, legendpos, titlefont, titlesize,
    legendfont, legendsize, layonly                      in param
  if grid or (is_nil(grid) and not layonly) then
    fpwrite("set grid %s\n", grid or _dflt.grid)
  end
  if border or (is_nil(grid) and not layonly) then
    fpwrite("set border %s\n", border or _dflt.border)
  end
  if title  then
    local font, size = titlefont or "", titlesize or ""
    title = title % param
    fpwrite("set title '%s' font '%s,%s'\n", title, font, size)
  end
  if (legendpos or legendfont or legendsize) and not layonly then
    local pos, font, size = legendpos or "", legendfont or "", legendsize or ""
    fpwrite("set key %s font '%s,%s'\n", legendpos, font, size)
  end
  if psizey or psizex then
    psizex, psizey = psizex or _dflt.psizex, psizey or _dflt.psizey
    fpwrite("set size %.5e, %.5e\n", psizex, psizey)
  end
  if originy or originx then
    originx, originy = originx or _dflt.originx, originy or _dflt.originy
    fpwrite("set origin %.5e, %.5e\n", originx, originy)
  end
end

local function set_frame(param)
  set_ranges(param)
  set_label (param)
  set_tics  (param)
  set_misc  (param)
end

-- main plot function
local function plot (param)
  local pwrite, plotcmd, plotcfg in param
  set_frame (param)
  parse_axis(param)

  pwrite("$MAD_DATA << EOD\n")
  for _,tpl in ipairs(param.selaxis) do plot_data(param, tpl[2], tpl[3]) end
  pwrite("EOD\n\n")

  if plotcfg then pwrite(plotcfg .. "\n") end
  for _,tpl in ipairs(param.selaxis) do plot_cmd(param, tpl[1], tpl[3]) end
  cmd_interpolate(param)
  pwrite("\n")
end

-- command --------------------------------------------------------------------o

-- create a graph with both the layout and the plot part
local function composed_plot (param)
  local laypos, psizey, originy in param

  multi_layout(param)

  local laysize in param
  if laypos == "top" or laypos == "bottom" then
    param.psizey = psizey or _dflt.psizey - laysize
  end
  param.originy = originy or laypos == "bottom" and laysize
                          or _dflt.originy
  plot(param)
end

-- initialize the table of parameters
local function init_param(self, file)
  local table, objshft, name, date, time in self
  local param = {
    version = tostring(MAD.env.version),
    name    = name or is_table(table) and table.title or "",
    date    = date or is_table(table) and table.date  or "",
    time    = time or is_table(table) and table.time  or "",
    databi  = 0,
    intpol  = object { id = 1 },
    plotter = file,
    oid     = objshft,
    selaxis = {},
    fpwrite = \... -> file:write(string.format(...)),
    pwrite  = \... -> file:write(...),
    elemsel = self:var_get'elemsel',
  }
  return setmetatable(param, {__index=self})
end

local layonly_without = [[
unset key
unset tics
unset border
plot x lc 'white' title ''
]]

local layonly_with = [[
plot x lc 'white' title ''
]]

local function exec (self)
  local file, fname = setup_cmd(self)
  if self.sequence ~= "keep" then
    file:write("@MAD_RESET_OBJECT\n")
    file:write("@MAD_RESET_LABEL\n")
  elseif self.range then
    print("MAD Plot Warning : sequence=\"keep\" and range is \z
      provided - range is ignored")
  end

  if self.prolog then file:write(self.prolog, "\n") end
  local param = init_param(self, file)

  local has_plot   = is_mtable(self.table) or is_table(self.data)
  local has_layout = is_rawtable(self.sequence) or is_sequence(self.sequence)
  if has_plot and has_layout then
    composed_plot(param)
  elseif has_plot then
    plot(param)
  elseif has_layout then
    param.layonly = is_nil(param.layonly) and true or param.layonly

    set_frame(param)
    multi_layout(param)
    if param.layonly then
      param.fpwrite(layonly_without)
    else
      param.fpwrite(layonly_with)
    end
  end

  if self.epilog then file:write(self.epilog, "\n") end
  teardown_cmd(self, file, fname)
  return self
end

local plot = command "plot" {

  -- stream id
  sid         = 1,          -- 1 <= n <= 25

  -- windows setup
  term        = "wxt",
  wsizex      = 800,        -- x > 0
  wsizey      = 500,        -- y > 0

  -- output
  output      = nil,        -- ("filename") -> pdf | number -> wid
  scrdump     = nil,        -- ("filename")

  -- title
  name       = nil,         -- default: table.title
  date       = nil,         -- default: table.date
  time       = nil,         -- default: table.time

  -- table or data input
  data        = nil,        -- { x=tbl.x, y=vec } (precedence over table)
  table       = nil,        -- mtable
  tablerange  = nil,        -- compatible table range

  -- sequence and survey input
  sequence    = nil,        -- seq | { seq1, seq2, ... } | "keep"
  range       = nil,        -- sequence iterator range
  nturn       = 1,          -- sequence iterator nturn, n >= 1
  misalign    = nil,        -- survey misalign level
  s0          = nil,        -- s0                | {s0, s0, ...}
  X0          = {0, 0, 0},  -- {x, y, z }        | { {...}, {...}, ...}
  A0          = nil,        -- {theta, phi, psi} | { {...}, {...}, ...}
  W0          = nil,        -- W0                | {W0, W0, ...}

  -- layout style
  laypos      = "top",      -- "top" | "bottom" | "middle" | "in" | 0 < y < 1
  laysize     = nil,        -- 0 < y < 1
  layonly     = nil,        -- boolean
  laydisty    = 0,          -- y >= 0 | { y1, y2, ... }
  laydistx    = 0,          -- x >= 0 | { x1, x2, ... }
  layshift    = 0,          -- x >= 0
  layangle    = true,       -- boolean
  elemsel     = ftrue,      -- element selector (i.e. predicate)
  elemname    = true,       -- boolean
  elemwidth   = nil,        -- unsigned size of element before elemscale
  elemscale   = 1,          -- multiplier or default size
  kindcolor   = true,       -- {
                            --   quadrupole = "blue",
                            --   sbend = {
                            --     fillcolor = "red",
                            --     fillstyle = "solid",
                            --     linecolor = "green",
                            --     dashtype  = "..  ",
                            --   }
                            -- }
                            -- true  -> use default
                            -- false -> no color

  -- axis selection (and names)
  x1y1        = nil,        -- x1y1 = { x1 = {"y1", "y2"}, x2 = {"y3", "y4"}}
  x1y2        = nil,        -- x1y1 = { x1 = {"y1", "y2"}, x2 = "y3"}
  x2y1        = nil,        -- x1y1 = { x2 = {"y1", "y2"}, "y3"},
  x2y2        = nil,        -- x1y1 = { x1 = {"y1", "y2"}},
                            -- x1y1 = { x2 = "y1", "y2"},
                            -- x1y1 = { x1 = "y1"},
                            -- x1y1 = {"y1", "y2"},
                            -- x1y1 = "y1",

  -- labels
  title       = "${name} MAD ${version}, ${date}, ${time}",
  legend      = nil,        -- { y = "distance" }
  xlabel      = nil,        -- strings
  x2label     = nil,        -- strings
  ylabel      = nil,        -- strings
  y2label     = nil,        -- strings

  -- axis ranges
  xrange      = nil,        -- { min, max }
  x2range     = nil,        -- { min, max }
  yrange      = nil,        -- { min, max }
  y2range     = nil,        -- { min, max }

  -- plot customization
  prolog      = nil,        -- string
  epilog      = nil,        -- string
  plotcfg     = nil,        -- string
  plotcmd     = nil,        -- string
  plotvar     = nil,        -- table

  -- plot style
  originx     = nil,        -- 0 < x < 1
  originy     = nil,        -- 0 < y < 1
  psizex      = nil,        -- 0 < x < 1
  psizey      = nil,        -- 0 < y < 1

  -- data style
  smooths     = nil,        -- { y = "csplines" }
  styles      = nil,        -- { y = "lines"    }
  colors      = nil,        -- { y = "green"    }
  dashtypes   = nil,        -- { y = "..-- "    }
  linewidths  = nil,        -- { y = 2.3        }
  pointtypes  = nil,        -- { y = 2          }
  pointsizes  = nil,        -- { y = 2.3        }
  datastyles  = { },        -- { y = { style = "lines", color = "blue"} }

  -- decoration
  font        = nil,        -- string
  fontsize    = nil,        -- n > 0
  titlefont   = nil,        -- string
  titlesize   = nil,        -- n > 0
  legendfont  = nil,        -- string
  legendsize  = nil,        -- n > 0
  legendpos   = "left top", -- string
  grid        = nil,        -- string
  border      = nil,        -- 0 <= n <= 15

  -- object shift
  objshft     = 1000000,    -- n >= 0

  -- build the command (do not execute)
  exec        = exec,
} :set_readonly()

-- end ------------------------------------------------------------------------o
return {
  plot  = plot,
  gplot = gplot,
}
