--[=[
 o-----------------------------------------------------------------------------o
 |
 | Complex number module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide full set of functions and operations on complex numbers

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- help -----------------------------------------------------------------------o

local __help = {}
__help.complex = [[
NAME
  complex -- functions and operators on complex numbers

SYNOPSIS
  local complex in MAD
  local I = complex(0,1)
  local z1 = 2+3i
  local z2 = 2+3*I
  print(z1.re, z1.im)
  print(tostring(z2))

DESCRIPTION
  The complex module implements the operators and mathematical functions on
  complex numbers:
  (minus) -, +, -, *, /, %, ^, ==,
  unm, add, sub, mul, div, mod, pow, eq,
  carg, real, imag, conj, proj, rect, polar, unit,
  ceil, floor, frac, trunc, round,
  angle, abs, sqrt, exp, log, log10,
  sin, cos, tan, sinh, cosh, tanh,
  asin, acos, atan, asinh, acosh, atanh,
  erf, erfc, erfi, erfcx, (tgamma, lgamma).

RETURN VALUES
  The constructed complex numbers.

ERRORS
  See ISO/IEC 9899:1999 and ISO/IEC 9899:2011.

SEE ALSO
  gmath, cmatrix, ctpsa
]]

__help['IEEE:IEC 60559-compatible complex compliance'] = [=[
Discrepancies:
  log  (-0   + 0i  ),  expected: -inf+pi*1i  JIT:-inf
  atanh( 1   + 0i  ),  linux: inf + 0i       mac: inf  + (pi/4)i
  atanh( 0   + nani),  linux: 0   + nani     mac: nan  +  nani
  atanh( nan + infi),  linux: 0   + (pi/2)i  mac: nan  + (pi/2)i
  atanh( inf + nani),  linux: 0   + nani     mac: nan  + (pi/2)i
  atan ( 0    +  1i),  linux: 0   + inf      mac: inf  + (pi/4)i
  atan ( 0    +- 1i),  linux: 0   - infi     mac: pi/4 -  infi

SEE ALSO
  IEEE:IEC 60559 floating-point compliance
]=]

-- locals ---------------------------------------------------------------------o

local ffi = require 'ffi'
local abs, ceil, floor in math

local _C, tostring                                 in MAD
local frac, trunc, round                           in MAD.gmath
local is_number, is_integer, is_complex, is_scalar in MAD.typeid
local has_method                                   in MAD.concept

-- FFI type constructors
local complex = ffi.typeof 'complex'

-- tmp for returned values
local cres = ffi.new 'complex[1]'

-- implementation -------------------------------------------------------------o

-- generic functions
M.angle = \x,y -> _C.mad_cnum_arg_r(y.re, y.im) - _C.mad_cnum_arg_r(x.re, x.im)

M.ceil  = \x -> complex(ceil (x.re), ceil (x.im))
M.floor = \x -> complex(floor(x.re), floor(x.im))
M.frac  = \x -> complex(frac (x.re), frac (x.im))
M.trunc = \x -> complex(trunc(x.re), trunc(x.im))
M.round = \x -> complex(round(x.re), round(x.im))

M.abs   = \x -> _C.mad_cnum_abs_r   (x.re, x.im)
M.sqrt  = \x => _C.mad_cnum_sqrt_r  (x.re, x.im, cres) return cres[0] end
M.exp   = \x => _C.mad_cnum_exp_r   (x.re, x.im, cres) return cres[0] end
M.log   = \x => _C.mad_cnum_log_r   (x.re, x.im, cres) return cres[0] end
M.log10 = \x => _C.mad_cnum_log10_r (x.re, x.im, cres) return cres[0] end

M.sin   = \x => _C.mad_cnum_sin_r   (x.re, x.im, cres) return cres[0] end
M.cos   = \x => _C.mad_cnum_cos_r   (x.re, x.im, cres) return cres[0] end
M.tan   = \x => _C.mad_cnum_tan_r   (x.re, x.im, cres) return cres[0] end
M.sinh  = \x => _C.mad_cnum_sinh_r  (x.re, x.im, cres) return cres[0] end
M.cosh  = \x => _C.mad_cnum_cosh_r  (x.re, x.im, cres) return cres[0] end
M.tanh  = \x => _C.mad_cnum_tanh_r  (x.re, x.im, cres) return cres[0] end

M.asin  = \x => _C.mad_cnum_asin_r  (x.re, x.im, cres) return cres[0] end
M.acos  = \x => _C.mad_cnum_acos_r  (x.re, x.im, cres) return cres[0] end
M.atan  = \x => _C.mad_cnum_atan_r  (x.re, x.im, cres) return cres[0] end
M.asinh = \x => _C.mad_cnum_asinh_r (x.re, x.im, cres) return cres[0] end
M.acosh = \x => _C.mad_cnum_acosh_r (x.re, x.im, cres) return cres[0] end
M.atanh = \x => _C.mad_cnum_atanh_r (x.re, x.im, cres) return cres[0] end

M.erf   = \x,tol => _C.mad_cnum_erf_r  (x.re, x.im, tol or 0, cres) return cres[0] end
M.erfc  = \x,tol => _C.mad_cnum_erfc_r (x.re, x.im, tol or 0, cres) return cres[0] end
M.erfi  = \x,tol => _C.mad_cnum_erfi_r (x.re, x.im, tol or 0, cres) return cres[0] end
M.erfw  = \x,tol => _C.mad_cnum_erfw_r (x.re, x.im, tol or 0, cres) return cres[0] end
M.erfcx = \x,tol => _C.mad_cnum_erfcx_r(x.re, x.im, tol or 0, cres) return cres[0] end

M.tgamma = \x -> error('NYI')
M.lgamma = \x -> error('NYI')

-- complex generic functions
M.carg  = \x -> _C.mad_cnum_arg_r (x.re, x.im)
M.real  = \x -> x.re
M.imag  = \x -> x.im
M.conj  = \x -> complex(x.re, -x.im)
M.proj  = \x => _C.mad_cnum_proj_r  (x.re, x.im, cres) return cres[0] end
M.rect  = \x => _C.mad_cnum_rect_r  (x.re, x.im, cres) return cres[0] end
M.polar = \x => _C.mad_cnum_polar_r (x.re, x.im, cres) return cres[0] end

-- complex non-generic functions
M.unit  = \x => _C.mad_cnum_unit_r  (x.re, x.im, cres) return cres[0] end

-- complex operators
function M.__unm (x)
  return complex(-x.re, -x.im)
end

function M.__add (x, y, r_)
  if is_number(x) then                           -- num + cpx
    return complex(x + y.re, y.im)
  elseif is_number(y) then                       -- cpx + num
    return complex(x.re + y, x.im)
  elseif is_complex(y) and is_complex(x) then    -- cpx + cpx
    return complex(x.re + y.re, x.im + y.im)
  elseif has_method(y,'__radd_cpx') then         -- cpx + ?
    return y:__radd_cpx(x, r_)
  end
  error("invalid arguments (unsupported complex operation)")
end

function M.__sub (x, y, r_)
  if is_number(x) then                           -- num - cpx
    return complex(x - y.re, - y.im)
  elseif is_number(y) then                       -- cpx - num
    return complex(x.re - y, x.im)
  elseif is_complex(y) and is_complex(x) then    -- cpx - cpx
    return complex(x.re - y.re, x.im - y.im)
  elseif has_method(y,'__rsub_cpx') then         -- cpx - ?
    return y:__rsub_cpx(x, r_)
  end
  error("invalid arguments (unsupported complex operation)")
end

function M.__mul (x, y, r_)
  if is_number(x) then                           -- num * cpx
    return complex(x * y.re, x * y.im)
  elseif is_number(y) then                       -- cpx * num
    return complex(x.re * y, x.im * y)
  elseif is_complex(y) and is_complex(x) then    -- cpx * cpx
    return complex(x.re*y.re - x.im*y.im, x.re*y.im + x.im*y.re)
  elseif has_method(y,'__rmul_cpx') then         -- cpx * ?
    return y:__rmul_cpx(x, r_)
  end
  error("invalid arguments (unsupported complex operation)")
end

function M.__div (x, y, r_, rcond_)
  if is_number(x) then                           -- num / cpx
    _C.mad_cnum_div_r(x, 0, y.re, y.im, cres) return cres[0]
  elseif is_number(y) then                       -- cpx / num
    return complex(x.re / y, x.im / y)
  elseif is_complex(y) and is_complex(x) then    -- cpx / cpx
    _C.mad_cnum_div_r(x.re, x.im, y.re, y.im, cres) return cres[0]
  elseif has_method(y,'__rdiv_cpx') then         -- cpx / ?
    return y:__rdiv_cpx(x, r_, rcond_)
  end
  error("invalid arguments (unsupported complex operation)")
end

function M.__mod (x, y, r_)
  if is_scalar(y) then                           -- cpx|num % cpx|num
    x, y = complex(x), complex(y)
    _C.mad_cnum_mod_r(x.re, x.im, y.re, y.im, cres) return cres[0]
  elseif has_method(y,'__rmod_cpx') then         -- cpx % ?
    return y:__rmod_cpx(x, r_)
  end
  error("invalid arguments (unsupported complex operation)")
end

function M.__pow (x, y, r_)
  if is_integer(y) then
    if y == 2 then return x*x  end -- common case
    if y == 1 then return x    end -- stupid cases
    if y == 0 then return 1+0i end
    _C.mad_cnum_ipow_r(x.re, x.im, y, cres) return cres[0]
  elseif is_scalar(y) then                        -- cpx|num ^ cpx|num
    x, y = complex(x), complex(y)
    _C.mad_cnum_pow_r(x.re, x.im, y.re, y.im, cres) return cres[0]
  elseif has_method(y,'__rpow_cpx') then          -- cpx ^ ?
    return y:__rpow_cpx(x, r_)
  end
  error("invalid arguments (unsupported complex operation)")
end

function M.__eq (x, y, f_)
  if is_scalar(y) then                          -- cpx|num == cpx|num
    x, y = complex(x), complex(y)
    return x.re == y.re and x.im == y.im
  elseif has_method(y,'__req_cpx') then         -- cpx == ?
    return y:__req_cpx(x, f_)
  end
  error("invalid arguments (unsupported complex operation)")
end

function M.__tostring (x)
  if x.im < 0
  then return tostring(x.re) ..      tostring(x.im) ..'i'
  else return tostring(x.re) ..'+'.. tostring(x.im) ..'i'
  end
end

 -- Note: cdata semantic doesn't allow to use directly table as index safely
M.__index    = \_,k -> M[k]
M.__newindex = \_,k -> error("invalid complex member '"..tostring(k).."'")

M.  unm, M.  add, M.  sub, M.  mul, M.  div, M.  mod, M.  pow, M.  eq =
M.__unm, M.__add, M.__sub, M.__mul, M.__div, M.__mod, M.__pow, M.__eq

ffi.metatype(complex, M)

-- end ------------------------------------------------------------------------o
return {
  complex = complex,

  __help  = __help,
  __check = { complex=M },
}
