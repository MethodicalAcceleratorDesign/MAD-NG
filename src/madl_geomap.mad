--[=[
 o-----------------------------------------------------------------------------o
 |
 | Geometric 3D maps
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide a catalog of geometric 3D maps (i.e. survey)
    maps have the following calling convention:
      geomap(elm, mflw, len_weight)
    where the expected fields are:
      mflw -> { sdir, tdir, edir, el, ang, tlt, V, W }
      elm  -> { angle, dtheta, dphi, dpsi, dx, dy, ds}

 o-----------------------------------------------------------------------------o
]=]

local M = {}

--[=[
Notes about directions and quantities:
  element direction   edir: affects curvatures (edir = seq.dir).
  track direction (s) sdir: affects lengths    (sdir = cmd.dir).
  time direction  (t) tdir: affects angles     (tdir = edir x sdir).
  beam direction      bdir: affects strengths  (bdir = edir x sdir x chg).
--]=]

-- locals ---------------------------------------------------------------------o

local abs, sin, cos in math

local _C, vector, matrix in MAD
local minlen, minang     in MAD.constant
local is_number          in MAD.typeid

local Ve = vector(3) -- displacement vector of element
local We = matrix(3) -- orientation  matrix of element

local U  = vector(3) -- extra vector for calculation (avoid copy)
local S  = matrix(3) -- extra matrix for calculation (avoid copy)

-- patches --------------------------------------------------------------------o

-- X-rotation

function M.xrotation (elm, m, lw_, dphi_) -- Rx(ax)
  local ax = dphi_ or m.ang
  if abs(ax) < minang then return end

  m.atdebug(elm, m, 'xrotation:0')

  local W, sdir, edir in m
  local lw = (lw_ or sdir) * edir
  We:rotx(ax*lw)
  W:mul(We, W)            -- W = W*We

  m.atdebug(elm, m, 'xrotation:1')
end

-- Y-rotation

function M.yrotation (elm, m, lw_, dthe_) -- Ry(ay)
  local ay = dthe_ or m.ang
  if abs(ay) < minang then return end

  m.atdebug(elm, m, 'yrotation:0')

  local W, sdir, edir in m
  local lw = (lw_ or sdir)*edir
  We:roty(ay*lw)
  W:mul(We, W)            -- W = W*We

  m.atdebug(elm, m, 'yrotation:1')
end

-- S-rotation

function M.srotation (elm, m, lw_, dpsi_) -- Rz(az)
  local az = dpsi_ or m.ang
  if abs(az) < minang then return end

  m.atdebug(elm, m, 'srotation:0')

  local W, sdir, edir in m
  local lw = (lw_ or sdir)*edir
  We:rotz(az*lw)
  W:mul(We, W)            -- W = W*We

  m.atdebug(elm, m, 'srotation:1')
end

-- Translation

function M.translate (elm, m, lw_, dx_, dy_, ds_)
  local dx = dx_ or m.dx
  local dy = dy_ or m.dy
  local ds = ds_ or m.ds
  if abs(dx)+abs(dy)+abs(ds) < minlen then return end

  m.atdebug(elm, m, 'translate:0')

  local sdir, edir, V, W in m
  local lw = lw_ or sdir
  Ve:fill{dx*lw*edir, dy*lw*edir, ds*lw}
  V:add(W:mul(Ve, U), V)  -- V = W*Ve+V

  m.atdebug(elm, m, 'translate:1')
end

-- Changeref (generic patch, lw_>0: TR, lw_<0: RT)

function M.changeref (elm, m)
  local dx, dy, ds, dtheta, dphi, dpsi in m
  local trn = abs(dx    )+abs(dy  )+abs(ds  ) >= minlen
  local rot = abs(dtheta)+abs(dphi)+abs(dpsi) >= minang

  if not (trn or rot) then return end

  m.atdebug(elm, m, 'changeref:0')

  local sdir, edir, V, W in m

  -- translate (forward entry or backward exit)
  if trn and sdir > 0 then
    Ve:fill{dx*edir, dy*edir, ds}
    V:add(W:mul(Ve, U), V)  -- V = V+W*Ve
  end

  -- rotate orientation matrix
  if rot then
    We:rotzxy(-dphi, dthe, dpsi, edir*sdir<0)
    W:mul(We, W)            -- W = W*We or W*We:t()
  end

  -- translate (forward exit or backward entry)
  if trn and sdir < 0 then
    Ve:fill{dx*edir, dy*edir, ds}
    V:sub(W:mul(Ve, U), V)  -- V = V-W*Ve
  end

  m.atdebug(elm, m, 'changeref:1')
end

-- Changedir (reverse t-direction)

function M.changedir (elm, m)
  m.atdebug(elm, m, 'changedir:0')

  m.edir = -m.edir

  m.atdebug(elm, m, 'changedir:1')
end

-- Changenrj (change frame energy)

function M.changenrj (elm, m)
  -- N/A for survey
end

-- misalignments --------------------------------------------------------------o

local _T  = vector(3) -- misalignment translation
local _R  = matrix(3) -- misalignment rotation
local _Tb = vector(3) -- misalignment translation at exit (Tbar)
local _Rb = matrix(3) -- misalignment rotation    at exit (Rbar)

local misalignent, misalignexi -- forward declaration

-- Misalign (lw_>0: entry, lw_<0: exit)

function M.misalign (elm, m, lw_)                                            -- unchecked
  if (lw_ or 1) >= 0
  then misalignent(elm, m,  1)
  else misalignexi(elm, m, -1)
  end
end

function misalignent (elm, m, lw)
  m.atdebug(elm, m, 'misalign:0')

  local sdir, edir, algn, V, W in m

  -- misalignment at entry and global frame
  -- forward : x1' = R*x1+T      => V = V+W*T   ; W = W*R
  -- backward: x1  = R^t*(x1'-T) => W = W*R:t() ; V = V-W*T

  -- translate
  if algn.trn and sdir > 0 then
    _T:fill{algn.dx*edir, algn.dy*edir, algn.ds}
    V:add(W:mul(_T, U), V)  -- V = V+W*T
  end

  -- rotate
  if algn.rot then
    _R:rotzxy(-algn.dphi, algn.dthe, algn.dpsi, edir*sdir<0)
    W:mul(_R, W)            -- W = W*R or W*R:t()
  end

  -- translate
  if algn.trn and sdir < 0 then
    _T:fill{algn.dx*edir, algn.dy*edir, algn.ds}
    V:sub(W:mul(_T, U), V)  -- V = V-W*T
  end

  m.atdebug(elm, m, 'misalign:1')
end

function misalignexi (elm, m, lw)
  m.atdebug(elm, m, 'misalignexi:0')

  local el, ang, tlt, sdir, edir, algn, V, W in m
  local mang = ang*edir -- assumes that patches (rotations) cannot be misaligned

  -- translation
  if algn.trn 
  then _T:fill{algn.dx*edir*sdir, algn.dy*edir*sdir, algn.ds*sdir} 
  else _T:zeros() end

  -- rotation
  if algn.rot then _R:rotzxy(-algn.dphi, algn.dthe, algn.dpsi, edir*sdir<0) end

  -- compute Rbar, Tbar
  _C.mad_mat_rtbar(_Rb._dat, _Tb._dat, el, mang, edir*tlt, algn.rot and _R._dat or nil, _T._dat)

  -- misalignment at exit and global frame
  -- forward : x2  = Rb^t*(x2'-Tb) => W = W*Rb:t() ; V = V-W*Tb
  -- backward: x2' = Rb*x2+Tb      => V = V+W*Tb   ; W = W*Rb

  -- _T:print("T")
  -- _R:print("R")
  -- _Tb:print("Tb")
  -- _Rb:print("Rb")

  if sdir > 0 then
    W:mult(_Rb, W)          -- W = W*Rb:t()
    V:sub(W:mul(_Tb, U), V) -- V = V - W*Tb
  else
    V:sub(W:mul(_Tb, U), V) -- V = V + W*Tb (note: Tb is negated above)
    W:mult(_Rb, W)          -- W = W*Rb     (note: Rb is transposed above) 
  end

  m.atdebug(elm, m, 'misalignexi:1')
end

-- kinds ----------------------------------------------------------------------o

function M.curex_thin (elm, m, lw_)
  m.atdebug(elm, m, 'curex_thin:0')

  local ang, W in m

  We:roty(-ang)
  W:mul(We, W)                   -- W = W*We

  m.atdebug(elm, m, 'curex_thin:1')
end

function M.strex_thick (elm, m, lw)
  m.atdebug(elm, m, 'strex_thick:0')

  local el, V, W in m

  Ve:fill{0, 0, el*lw}
  V:add(W:mul(Ve, U), V)         -- V = W*Ve+V

  m.atdebug(elm, m, 'strex_thick:1')
end

function M.curex_thick (elm, m, lw)
  m.atdebug(elm, m, 'curex_thick:0')

  local el, ang, V, W in m
  local rho = el/ang
  local ang = ang*lw

  Ve:fill{rho*(cos(ang)-1), 0, rho*sin(ang)}
  We:roty(-ang)
  V:add(W:mul(Ve, U), V)         -- V = W*Ve+V
  W:mul(We, W)                   -- W = W*We

  m.atdebug(elm, m, 'curex_thick:1')
end

-- end ------------------------------------------------------------------------o
return { geomap = M }
