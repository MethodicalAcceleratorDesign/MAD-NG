--[=[
 o-----------------------------------------------------------------------------o
 |
 | Generic utility module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide a set of generic utilities

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local ffi = require 'ffi'

local string, table, debug, io, os =
      string, table, debug, io, os

local type, getmetatable, setmetatable, assert, error, load =
      type, getmetatable, setmetatable, assert, error, load

local ipairs, pairs, tostring, tonumber =
      ipairs, pairs, tostring, tonumber

local option, gfunc, fun, _C in MAD
local totable, iter   in fun
local abs, min, max   in math

local is_nil, is_logical, is_number, is_string, is_table,
      is_emptytable, is_value, is_integer, is_natural, is_iterable,
      is_mappable, is_callable, is_stringable, is_tablable,
      is_copiable, is_sameable, get_metatable, get_metamethod,
      is_openfile, wprotect, set_concept, concept                 in MAD.typeid
local attributes                                                  in MAD.filesys
local opstr, rshift                                               in MAD.gfunc
local sign                                                        in MAD.gmath

local not_mappable, not_extendable, not_mutable                   in concept

-- implementation -------------------------------------------------------------o

local utility = {assert=assert, error=error}

-- pause, sleep

ffi.cdef[[
void Sleep(int ms);
int poll(struct pollfd *fds, unsigned long nfds, int timeout);
]]

local sleep

if ffi.os == "Windows"
then sleep = \s -> ffi.C.Sleep(s)
else sleep = \s -> ffi.C.poll(nil, 0, s)
end

function utility.pause (msg_, val_)
  if  is_string(msg_) then io.write(msg_)
  elseif is_nil(val_) then val_ = msg_ end
  if is_number(val_) then return sleep(val_) end
  if val_ then
    assert(is_string(val_), "invalid argument #1 (string expected)")
    io.write("press return to continue or type '"..val_.."' to exit... ")
  else
    io.write("press return to continue... ")
  end
  local str = assert(io.read())
  if str == val_ then os.exit() end
  return str
end

-- atexit (and finalizer)

local _final = { n=0 } -- __gc not applicable to table (added in 5.2)

_final[_final] = ffi.gc(ffi.new('int[1]'), \ =>
    if option.debug >= 3 then
      io.write('MAD finalizer called...\n')
    end
    for i=_final.n,1,-1 do
      local ret, err = xpcall(_final[i], debug.traceback)
      if ret ~= true then
         io.stderr:write('finalizer failed: ', err, '\n')
      end
    end
  end)

function utility.atexit (f, uniq_)
  assert(is_callable(f), "invalid argument #1 (callable expected)")

  -- check if not already registered
  if uniq_ and _final[f] then return end

  -- register
  local n = _final.n+1
  _final[f], _final[n], _final.n = f, f, n
end

-- repeater

local _repx, _repn = {}, {}

local rep_it = \s,i => if i < s[_repn] then return i+1, s[_repx] end end
local rep_mt = set_concept({
  __len      = \s   -> s[_repn],
  __index    = \s,i => if 1 <= i and i <= s[_repn] then return s[_repx] end end,
  __ipairs   = \s   -> (rep_it, s, 0),
  __tostring = \s   -> string.format("repeater: %p", s)
}, not_mappable + not_extendable + not_mutable)

function utility.rep (x, n_) -- repeater
  return setmetatable({[_repx]=assert(not is_nil(x), "invalid 'nil' in repeater") and x,
                       [_repn]=n_ or 2^30}, rep_mt)
end

-- run once

local runonce_ = setmetatable({}, {__mode='k'})

function utility.runonce (f, ...)
  if runonce_[f] ~= true then
    assert(is_callable(f), "invalid argument #1 (callable expected)")
    runonce_[f]=true
    return f(...)
  end
end

-- collect local variables of a function

function utility.collectlocal (f_, env_)
  local f = f_ or 1
  local env = env_ or {}
  if is_number(f) then f = f+1 end
  local i = 1
  while true do
    local k, v = debug.getlocal(f, i)
    if not k then break end
    env[k], i = v, i+1
  end
  return env
end

-- iterator: pairs = ipairs + kpairs, unless n_ is provided, e.g. #tbl
-- note: #tbl may not see nil(s) in the array part!

local function kpairs_iter (tbl, key)
  local k, v = key
  repeat k, v = tbl.nxt(tbl.dat, k)                -- discard ipairs indexes
  until type(k) ~= 'number' or (k%1) ~= 0 or k > tbl.n or k < 1
  return k, v
end

function utility.kpairs (tbl, n_)
  assert(is_mappable(tbl), "invalid argument #1 (mappable expected)")
  local nxt, dat, ini = pairs(tbl)
  local n = n_
  if not n and is_iterable(tbl) then
    for i in ipairs(tbl) do n = i end -- not the same as #tbl !!
  end
  if not n then return nxt, dat, ini end
  return kpairs_iter, { nxt=nxt, dat=dat, n=n }, ini, n
end

-- key/indexes set

local kpairs in utility

function utility.clearkeys (a, p_)
  assert(is_mappable(a), "invalid argument #1 (mappable expected)")
  if not p_ then
    for k in kpairs(a) do a[k] = nil end
  else
    assert(is_callable(p_), "invalid argument #2 (callable expected)")
    for k in kpairs(a) do if p_(k) == true then a[k] = nil end end
  end
  return a
end

function utility.clearidxs (a, i_, j_)
  assert(is_iterable(a), "invalid argument #1 (iterable expected)")
  i_, j_ = i_ or 1, j_ or #a
  assert(is_integer(i_)  , "invalid argument #2 (integer expected)")
  assert(is_integer(j_)  , "invalid argument #3 (integer expected)")
  for i=i_,j_ do a[i] = nil end
  return a
end

function utility.setkeys (a, k_, i_, j_)
  if is_number(k_) and is_nil(j_) then
    k_, i_, j_ = nil, k_, i_  -- right shift
  end
  k_ = k_ or a
  assert(is_mappable(a ), "invalid argument #1 (iterable expected)")
  assert(is_iterable(k_), "invalid argument #2 (iterable expected)")
  i_, j_ = i_ or 1, j_ or #a
  assert(is_integer(i_)   , "invalid argument #3 (integer expected)")
  assert(is_integer(j_)   , "invalid argument #4 (integer expected)")
  for i=i_,j_ do a[k_[i-i_+1]] = a[i] end
  return a
end

function utility.setidxs (a, k, i_, j_)
  assert(is_iterable(a), "invalid argument #1 (iterable expected)")
  assert(is_iterable(k), "invalid argument #2 (iterable expected)")
  i_, j_ = i_ or 1, j_ or #a
  assert(is_integer(i_)  , "invalid argument #3 (integer expected)")
  assert(is_integer(j_)  , "invalid argument #4 (integer expected)")
  for i=i_,j_ do a[i] = a[k[i-i_+1]] end
  return a
end

function utility.countkeys (a)
  assert(is_mappable(a), "invalid argument #1 (mappable expected)")
  local n = 0
  for _ in pairs(a) do n = n+1 end
  return n
end

function utility.keyscount (a, c_)
  local c = c_ or {}
  assert(is_mappable(a), "invalid argument #1 (mappable expected)")
  assert(is_mappable(c), "invalid argument #2 (mappable expected)")
  for _,v in pairs(a) do c[v] = (c[v] or 0) + 1 end
  return c
end

function utility.val2keys (a)
  assert(is_mappable(a), "invalid argument #1 (mappable expected)")
  local r, c = {}, {}
  for k,v in pairs(a) do
    c[v] = (c[v] or 0) + 1
    if c[v] == 1
    then r[v] = {k, n=1}
    else r[v][c[v]], r[v].n = k, c[v]
    end
  end
  return r, c
end

function utility.lst2tbl (l, t_)
  assert(is_iterable(a), "invalid argument #1 (iterable expected)")
  local n = #l
  local t = t_ or table.new(0,n)
  for i=1,n do t[l[i]] = true end
  return t
end

function utility.tbl2lst (t, l_)
  assert(is_mappable(a), "invalid argument #1 (mappable expected)")
  local l = l_ or table.new(4,0)
  local n = #l
  for k,_ in kpairs(t) do l[n+1], n = k, n+1 end
  return l
end

-- files

local filemode = {
  -- see fopen in ISO/IEC 9899:2011 7.21.5.3 (C11 standard)
  -- or subset in ISO/IEC 9899:1999 7.19.5.3 (C99 standard)
  ['r'  ]='r', ['w'  ]='w', ['wx'  ]='w', ['a'  ]='w',
  ['r+' ]='w', ['w+' ]='w', ['w+x' ]='w', ['a+' ]='w',
  ['rb' ]='r', ['wb' ]='w', ['wbx' ]='w', ['ab' ]='w',
  ['r+b']='w', ['w+b']='w', ['w+bx']='w', ['a+b']='w',
  ['rb+']='w', ['wb+']='w', ['wb+x']='w', ['ab+']='w',
}

local filetime = { -- see lfs.attributes and POSIX stat(2)
  access='access', modification='modification', change='change',
}

local mockfile = wprotect({
  read  = \ (), lines = \ (), write   = \f f, close = \ (),
  flush = \ (), seek  = \ (), setvbuf = \ (),
})

utility.mockfile = mockfile

function utility.openfile (fname_, mode_, ext_)
  if filemode[fname_] and is_nil(ext_) then
    fname_, mode_, ext_ = nil, fname_, mode_ -- right shift
  end
  if not filemode[mode_] and is_nil(ext_) then
    mode_, ext_ = nil, mode_                 -- right shift
  end

  -- special case for compatibility with fortran
  if is_natural(fname_) then fname_ = "fort."..fname_ end

  local file = fname_ -- case mockfile
  if is_string(fname_) then
    assert(filemode[mode_ or 'r'], "invalid argument #2 (file mode expected)")
        if is_nil(ext_) then ext_ = ''
    elseif is_string(ext_) then -- check if fname_ already ends by ext_
      if string.sub(fname_,-#ext_) == ext_ then ext_ = '' end
    elseif is_table(ext_) then -- e.g. {'.tfs', '.txt', '.dat', '.mad', ...}
      for _,e in ipairs(ext_) do -- check if fname_ already ends by one of ext_
        assert(is_string(e), "invalid argument #3 (table of string expected)")
        if string.sub(fname_,-#e) == e then ext_ = '' ; break end
      end
      if ext_ ~= '' then ext_ = ext_[1] or '' end
    end
    file = io.open(fname_ .. ext_, mode_ or 'r') -- "file not found" return nil
    assert(is_nil(file) or io.type(file) == 'file',
           "invalid argument #1 (unable to open file)")
  elseif fname_ ~= mockfile then
    file = fname_ or filemode[mode_] == 'w' and io.stdout or io.stdin
    assert(is_openfile(file), "invalid argument #1 (open file expected)")
  end
  return file
end

function utility.fileexists (fname)
  assert(is_string(fname), "invalid argument #1 (string expected)")
  local file = (io.open(fname))
  if is_nil(file) then return false end
  io.close(file)
  return true
end

function utility.fileisnewer (fname1, fname2, attr_)
  assert(is_string(fname1), "invalid argument #1 (string expected)")
  assert(is_string(fname2), "invalid argument #2 (string expected)")
  local at = attr_ or 'modification'
  assert(filetime[at], "invalid argument #3 (file time attribute expected)")
  local t1, t2 = attributes(fname1, at), (attributes(fname2, at))
  return t1 ~= nil and os.difftime(t1,t2) > 0 -- resolution is 1 sec, yuck!
end

-- returns the path, the filename, and the extension
function utility.filesplitname (fname)
  if attributes(fname, "mode") == "directory" then
    local path = fname:gsub("[\\/]$","")
    return path .. "\\", "", ""
  end
  fname = fname .. "."
  return fname:match("^(.-)([^\\/]-%.([^\\/%.]-))%.?$")
end

-- string formating

function utility.printf (str, ...)
  return io.write(str:format(...))
end

function utility.fprintf (fp, str, ...)
  return fp:write(str:format(...))
end

function utility.errorf (str, ...)
  error(str:format(...), 2)
end

function utility.assertf (cond, str, ...)
  if not cond then error(str:format(...), 2) end
  return cond
end

getmetatable(io.stdout).printf = utility.fprintf

-- table from replicate

function utility.tblrep (v, n_, na_)
  if is_table(n_) and is_nil(na_) then
    n_, na_ = nil, n_ -- right shift
  end
  if is_table(na_) and is_nil(n_) then
    n_ = #na_
  end
  local na = na_ or table.new(n_, 1)
  for i=1,n_ do na[i] = v end
  return na
end

-- table copy

function utility.tblicpy (a, mt_, na_)
  if is_table(mt_) and is_nil(na_) then
    mt_, na_ = nil, mt_ -- right shift
  end
  local na = na_ or table.new(#a, 0)
  for i,v in ipairs(a) do na[i] = v end -- shallow copy
  if mt_ == true then setmetatable(na, getmetatable(a)) end
  return na
end

function utility.tblcpy (a, mt_, na_)
  if is_table(mt_) and is_nil(na_) then
    mt_, na_ = nil, mt_ -- right shift
  end
  local na = na_ or table.new(#a, 2)
  for k,v in pairs(a) do na[k] = v end -- shallow copy
  if mt_ == true then setmetatable(na, getmetatable(a)) end
  return na
end

function utility.tbldeepcpy (a, mt_, xr_, na_)
  local na = na_ or table.new(#a, 1)
  xr_ = xr_ or {}
  xr_[a] = na
  for k,v in pairs(a) do -- deep copy, keep track of self-xref
    na[xr_[k] or k] = xr_[v] or utility.copy(v, mt_, xr_)
  end
  if mt_ == true then setmetatable(na, getmetatable(a)) end
  return na
end

-- table concat

function utility.tblcat (a, b, mt_, c_)
  if is_table(mt_) and is_nil(c_) then
    mt_, c_ = nil, mt_ -- right shift
  end
  local c = c_ or table.new(#a + #b, 1)
  local k = 0
  for i,v in ipairs(a) do c[  i], k = v, i end -- shallow copy
  for i,v in ipairs(b) do c[k+i]    = v    end -- shallow copy
  if mt_ == true then
    setmetatable(c, getmetatable(a) or getmetatable(b))
  end
  return c
end

-- table order
-- order efficiently an array of n elements using k in arr[i][k] as new index

function utility.tblorder (a, k, n_)
  local n = n_ or #a
  local t, mi, ma = table.new(n,0), 1e9, -1e9
  for i=1,n do
    local ii = a[i][k]
    if t[ii] then error("duplicated index detected at slot "..i) end
    t[ii], mi, ma = a[i], min(mi, ii), max(ma, ii)
  end
  local j = 1
  for i=mi,ma do
    if t[i] then a[j], j = t[i], j+1 end
  end
  return a
end

-- extensions (conversion, factory)

local tostring_     -- forward ref
local is_identifier -- forward ref

local num2log_ = {[0]=false, [1]=true}
local log2num_ = {[false]=0, [true]=1}

function utility.num2log (a)
  if type(a) == "boolean"
  then return a
  else return num2log_[a]
  end
end

function utility.log2num (a)
  if type(a) == "number"
  then return a
  else return log2num_[a]
  end
end

function utility.str2str (a)
  return string.format(option.strfmt, a)
end

function utility.int2str (a)
  return string.format(option.intfmt, a)
end

function utility.num2str (a)
  if a == 0 then a = abs(a) end
  return string.format(option.numfmt, a)
end

function utility.tbl2str (tbl, sep_)
  assert(is_mappable(tbl), "invalid argument #1 (mappable expected)")
  if is_emptytable(tbl) then return '{}' end
  local r = {}
  for i,v in ipairs(tbl) do -- array part
    if is_string(v) then v = '"'..v..'"' end
    r[i] = tostring_(v)
  end
  local ir = #r+1
  for k,v in kpairs(tbl) do -- hash part
    if is_string(v) then v = '"'..v..'"' end
    if is_number(k) then
      r[ir] = '[' ..k.. ']='..tostring_(v)
    elseif is_identifier(k) then
      r[ir] =       k..  '='..tostring_(v)
    else
      r[ir] = '["'..k..'"]='..tostring_(v)
    end
    ir = ir+1
  end
  return '{'..table.concat(r, sep_ or ', ')..'}'
end

function utility.str2tbl (str, match_, ini_)
  assert(is_string(str), "invalid argument #1 (string expected)")
  if is_string(match_) then
    local r, n = {}, 0
    for s in string.gmatch(str, match_, ini_) do
      r[n+1], n = s, n+1
    end
    return r, n
  else
    return {str}, 1
  end
end

--[[
str2cmp "x,-y,z"
\a,b -> a.x < b.x or a.x == b.x and (a.y > b.y or a.y == b.y and (a.z < b.z))

str2cmp "-x,y,-z"
\a,b -> a.x > b.x or a.x == b.x and (a.y < b.y or a.y == b.y and (a.z > b.z))
--]]
function utility.str2cmp (str)
  -- split fields list ±col1,±col2 ...
  local lst = {}
  for f in string.gmatch(str, '([^,]+)') do lst[#lst+1] = utility.strtrim(f) end

  -- build comparison test incrementally
  local fun, n = "", #lst
  for i=1,n do
    local sgn = string.sub(lst[i],1,1)
    local fld = (sgn == '-' or sgn == '+') and string.sub(lst[i],2) or lst[i]
    local cmp =  sgn == '-' and '>' or '<'

    if i == n
    then fun = string.format("%sa.%s %s b.%s", fun,fld,cmp,fld)
    else fun = string.format("%sa.%s %s b.%s or a.%s == b.%s and (",
                              fun,fld,cmp,fld,    fld,    fld)
    end
  end

  -- return compiled function
  fun = "return \\a,b -> " .. fun .. string.rep(")",n-1)
  return utility.assertf(load(fun),
         "unable to build ordering function from '%s'", str)()
end

local function toboolean (a)
  if type(a) == 'boolean' then return a
  elseif  a  == 'true'    then return true
  elseif  a  == 'false'   then return false
  else                         return nil
  end
end

utility.luatostring = tostring -- backup orignal lua tostring

function tostring_ (a, ...)      -- to review
  if     is_string(a)     then return a
  elseif is_value(a)      then return (tostring(a))
  elseif is_stringable(a) then return (get_metamethod(a,'__tostring')(a, ...))
  elseif is_mappable(a)   then return  utility.tbl2str(a,...) -- table.concat
  else                         return (tostring(a)) -- builtin tail call...
  end
end

local function totable_ (a, ...) -- to review
  if     is_table(a)      then return a
  elseif is_value(a)      then return {a}
  elseif is_tablable(a)   then return get_metamethod(a,'__totable')(a, ...)
  elseif is_iterable(a)   then return totable(iter(a,...)) -- iterator from lfun
  else                         return {a}
  end
end

function utility.same (a, ...)   -- to review
  if     is_value(a)      then return a
  elseif is_sameable(a)   then return get_metamethod(a,'__same')(a, ...)
  elseif is_table(a)      then return setmetatable({}, getmetatable(a))
  else                         return a -- safe? should try more complex copy?
  end
end

function utility.copy (a, ...)   -- to review
  if     is_value(a)      then return a
  elseif is_copiable(a)   then return get_metamethod(a,'__copy')(a, ...)
  elseif is_table(a)      then return utility.tbldeepcpy(a, ...)
  else                         return a -- safe? should try more complex copy?
  end
end

-- string interpolation

local function interp_fun (arg, tag)
  local key = tag:sub( 3,-2)
  if key == '' then return '$' end -- ${} -> $
  local lst = key:sub(-1,-1)
  if lst == '-' or lst == '+' or lst == '=' then -- policy
    key = key:sub(1,-2)
  else
    lst = nil
  end
  local sub = tonumber(key) or (key:gsub('%$%b{}', arg.fun))
  local val = arg.var[sub]
  if is_nil(val) then
    if (not lst and arg.policy) == '=' then
      return key ~= sub and string.format("${%s}",sub) or nil   -- unchanged
    elseif (lst or  arg.policy) == '-' then
      return ''                                                 -- removed
    elseif (lst or  arg.policy) == '+' then
      error(string.format("Undefined key: '%s'", sub), 2)       -- substituted!
    else
      error(string.format("Invalid policy: '%s'", lst or arg.policy), 2)
    end
  end
  return tostring(val)
end

local bind1st in MAD.gfunc

function utility.strinter (str, var, policy_)
  policy_ = policy_ or '+'   -- valid policy: [+-=] (see interp_fun)
  assert(is_string  (str)  , "invalid argument #1 (string expected)")
  assert(is_mappable(var)  , "invalid argument #2 (mappable expected)")
  assert(is_string(policy_), "invalid argument #3 (string expected)")
  local arg = { var=var, policy=policy_} ; arg.fun = bind1st(interp_fun, arg)
  return (str:gsub('%$%b{}', arg.fun))
end

getmetatable("").__mod = utility.strinter

-- strings fast specialized manipulation

local sarg = ffi.new 'ssz_t[6]'

local function tostr (str, ptr, sarg, escq_)
      if sarg[1] == 0    then str = ''  -- empty
  elseif sarg[1] == #str then           -- unchanged
  else str = ffi.string(ptr+sarg[0], sarg[1])
  end
  if escq_ and sarg[4] > 0 then -- remove escaped quotes
    local cnt ; str, cnt = str:gsub('\\"', '"')
    if cnt ~= sarg[4] then
      error("unexpected escaped quote outside quoted string", 2)
    end
  end
  return str
end

local function qsplit (str, seps, sarg)                          -- sarg_in: [0]=ini, [1]=len, [2]=#seps
  local len, lsep = #str, sarg[2]
  local ptr = _C.mad_str_split(str, sarg, seps)                  -- scan for seps
  local ini, qcnt = sarg[0], 0                                   -- backup ini, esc quotes
  while sarg[2] >= 0 and sarg[3] < 2 do                          -- sep is a quote
    sarg[0], sarg[1] = sarg[2], len-sarg[2]                      -- sarg_in: [0]=ini, [1]=len
    local qptr = _C.mad_str_quote(str, sarg)                     -- scan for quotes
    assert(qptr ~= nil, "invalid pair of quotes")
    qcnt = qcnt + sarg[4]                                        -- count esc quotes
    sarg[0], sarg[1], sarg[2] = sarg[2]+1, len-(sarg[2]+1), lsep -- sarg_in: [0]=ini, [1]=len, [2]=#seps
    _C.mad_str_split(str, sarg, seps)                            -- scan for seps
  end
  sarg[0], sarg[1], sarg[4] = ini, sarg[0]+sarg[1]-ini, qcnt     -- adjust length and esc quotes
  return ptr
end

function utility.strtrim (str, ini_) -- remove leading and trailing spaces
  ini_ = ini_ or 1
  assert(is_string(str ), "invalid argument #1 (string expected)")
  assert(is_number(ini_), "invalid argument #2 (number expected)")
  sarg[0], sarg[1] = ini_-1, #str-(ini_-1)                     -- sarg_in: [0]=ini, [1]=len
  local ptr = _C.mad_str_trim(str, sarg)                       -- [0]: index  of str (trimmed)
  -- trimmed str, length                                       -- [1]: length of str (trimmed)
  return tostr(str, ptr, sarg), sarg[1]
end

function utility.strnum (str, ini_) -- parse number
  ini_ = ini_ or 1
  assert(is_string(str ), "invalid argument #1 (string expected)")
  assert(is_number(ini_), "invalid argument #2 (number expected)")
  sarg[0], sarg[1] = ini_-1, #str-(ini_-1)                     -- sarg_in: [0]=ini, [1]=len
  local ptr = _C.mad_str_num(str, sarg)                        -- [0]: index  of str (trimmed)
  -- number str, length, index of char closing num             -- [1]: length of num ([1]=[2]-[0])
  return tostr(str, ptr, sarg), sarg[1], sarg[2]+1             -- [2]: index  of closing char or -1
end                                                            -- [3]: index  of decimal  '.' or -1
                                                               -- [4]: index  of exponent 'e' or -1

function utility.strident (str, ini_) -- parse identifier
  ini_ = ini_ or 1
  assert(is_string(str ), "invalid argument #1 (string expected)")
  assert(is_number(ini_), "invalid argument #2 (number expected)")
  sarg[0], sarg[1] = ini_-1, #str-(ini_-1)                     -- sarg_in: [0]=ini, [1]=len
  local ptr = _C.mad_str_ident(str, sarg)                      -- [0]: index  of str (trimmed)
  -- ident str, length, index closing ident, ditto w spaces    -- [1]: length of ident ([1]=[2]-[0])
  return tostr(str, ptr, sarg), sarg[1], sarg[2]+1, sarg[3]+1  -- [2]: index  of closing char or -1
end                                                            -- [3]: index  of closing char after spaces or -1

function is_identifier (str) -- check for identifier
  if type(str) ~= "string" then return false end
  sarg[0], sarg[1] = 0, #str                                   -- sarg_in: [0]=ini, [1]=len
  _C.mad_str_ident(str, sarg)
  return sarg[3] == #str
end

function utility.strquote (str, ini_) -- remove surrounding quotes (if any)
  ini_ = ini_ or 1
  assert(is_string(str ), "invalid argument #1 (string expected)")
  assert(is_number(ini_), "invalid argument #2 (number expected)")
  sarg[0], sarg[1] = ini_-1,  #str-(ini_-1)                    -- sarg: [0]=ini, [1]=len
  local ptr = _C.mad_str_quote(str, sarg)                      -- [0]: index  of str (trimmed)
  assert(ptr ~= nil, "invalid pair of quotes")                 -- [1]: length of str
  -- unquoted str, index of closing quote or 0, type of quotes -- [2]: index  of closing quote or -1
  return tostr(str, ptr, sarg, true), sarg[2]+1, sarg[3]       -- [3]: type   of quotes 0: none, 1: "", 2: ''
end                                                            -- [4]: number of escaped quotes

function utility.strsplit (str, seps, ini_) -- split at seps (if any)
  ini_ = ini_ or 1
  assert(is_string(str ), "invalid argument #1 (string expected)")
  assert(is_string(seps), "invalid argument #2 (string expected)")
  assert(is_number(ini_), "invalid argument #3 (number expected)")
  sarg[0], sarg[1], sarg[2] = ini_-1, #str-(ini_-1), #seps     -- sarg_in: [0]=ini, [1]=len, [2]=#seps
  local ptr = _C.mad_str_split(str, sarg, seps)                -- [0]: index  of str (trimmed)
  -- trimmed str, index of sep or 0, index of sep in seps or 0 -- [1]: length of str (trimmed if sep)
  return tostr(str, ptr, sarg), sarg[2]+1, sarg[3]+1           -- [2]: index  of sep or -1
end                                                            -- [3]: index  of sep in seps or -1

function utility.strqsplit (str, seps, ini_) -- split at seps (if any outside quoted strings)
  ini_ = ini_ or 1
  assert(is_string(str ), "invalid argument #1 (string expected)")
  assert(is_string(seps), "invalid argument #2 (string expected)")
  assert(is_number(ini_), "invalid argument #3 (number expected)")
  seps = '"'.."'"..seps                                        -- add quotes to seps
  sarg[0], sarg[1], sarg[2] = ini_-1, #str-(ini_-1), #seps     -- sarg_in: [0]=ini, [1]=len, [2]=#seps
  local ptr = qsplit(str, seps, sarg)                          -- [0]: index  of str (trimmed)
  -- trimmed str, index of sep or 0, index of sep in seps or 0 -- [1]: length of str (trimmed if sep)
  return tostr(str, ptr, sarg), sarg[2]+1, sarg[3]+1           -- [2]: index  of sep or -1
end                                                            -- [3]: index  of sep in seps or -1
                                                               -- [4]: number of escaped quotes
function utility.strsplitall (str, seps, ini_, res_)
  ini_, res_ = ini_ or 1, res_ or {}
  assert(is_string  (str ), "invalid argument #1 (string expected)")
  assert(is_string  (seps), "invalid argument #2 (string expected)")
  assert(is_number  (ini_), "invalid argument #3 (number expected)")
  assert(is_iterable(res_), "invalid argument #4 (iterable expected)")
  seps = '"'.."'"..seps                            -- add quotes to seps
  local len, lsep, ns = #str, #seps, 0
  sarg[0], sarg[1] = ini_-1, len-(ini_-1)          -- sarg_in: [0]=ini, [1]=len
  _C.mad_str_trim(str, sarg)
  if sarg[1] == 0 then return res_, 0 end
  while true do
    sarg[2], ns = lsep, ns+1                       -- see strqsplit above
    local ptr = qsplit(str, seps, sarg)            -- sarg_in: [0]=ini, [1]=len, [2]=#seps
    res_[ns] = tostr(str, ptr, sarg)               -- process esc quotes
    if sarg[2] == -1 then return res_, ns end      -- no more sep
    sarg[0], sarg[1] = sarg[2]+1, len-(sarg[2]+1)  -- sarg_in: [0]=ini, [1]=len
    _C.mad_str_trim(str, sarg)
  end
  error("unexpected error in utility.strsplitall")
end

function utility.strbracket (str, ini_) -- split name[cnt] or name{cnt} (if any)
  ini_ = ini_ or 1
  assert(is_string(str ), "invalid argument #1 (string expected)")
  assert(is_number(ini_), "invalid argument #2 (number expected)")
  sarg[0], sarg[1] = ini_-1, #str-(ini_-1)       -- sarg_in: [0]=ini, [1]=len
  local ptr = _C.mad_str_bracket(str, sarg)      -- [0]: index  of name (trimmed)
  assert(ptr ~= nil, "invalid pair of brackets") -- [1]: length of name (trimmed if brackets)
  local cnt                                      -- [2]: index  of closing bracket or -1
  if sarg[2] > 0 then                            -- [3]: index  of count (trimmed)
    if sarg[4] == 0                              -- [4]: length of count (trimmed)
    then cnt = '' -- empty                       -- [5]: type   of brackets 0: none, 1: [], 2: {}
    else cnt = ffi.string(ptr+sarg[3], sarg[4])
    end
  end
  -- trimmed name, trimmed count, index of closing bracket or 0, type of brackets
  return tostr(str, ptr, sarg), cnt, sarg[2]+1, sarg[5]
end

-- searching

function utility.bsearch (tbl, val, cmp_, low_, high_)
  assert(is_iterable(tbl), "invalid argument #1 (iterable expected)")
  if is_number(cmp_) and is_nil(high_) then
    low_, high_, cmp_ = cmp_, low_, nil -- right shift
  end
  local nel  = #tbl
  local low  = max(low_  or   1,   1)
  local high = min(high_ or nel, nel)
  assert(low <= high, "invalid boundaries (low > high)")
  local cmp  = is_string(cmp_) and opstr[cmp_] or cmp_ or
               tbl[low] <= tbl[high] and gfunc.le or gfunc.ge
  assert(is_callable(cmp), "invalid argument #3 (callable expected)")

  local len, mid, stp, tst = high-low+1
  while len > 0 do
    stp = rshift(len,1)
    mid = low+stp
    if cmp(val, tbl[mid])
    then len = stp
    else low, len = mid+1, rshift(len-1,1)
    end
  end        -- asc. : tbl[low] <= val (left most), tbl[low] < val (right most)
  return low -- desc.: tbl[low] >= val (left most), tbl[low] > val (right most)
end

function utility.lsearch (tbl, val, cmp_, low_, high_)
  assert(is_iterable(tbl), "invalid argument #1 (iterable expected)")
  if is_number(cmp_) and is_nil(high_) then
    low_, high_, cmp_ = cmp_, low_, nil -- right shift
  end
  local nel  = #tbl
  local low  = max(low_  or   1,   1)
  local high = min(high_ or nel, nel)
  assert(low <= high, "invalid boundaries (low > high)")
  local cmp  = is_string(cmp_) and gfunc[cmp_] or cmp_ or gfunc.eq
  assert(is_callable(cmp), "invalid argument #3 (callable expected)")

  for idx=low,high do
    if cmp(val, tbl[idx]) then return idx end
  end
  return high+1
end

-- detect ordering, descending=-1, ascending=1, constant=0, otherwise=nil

function utility.monotonic (tbl, strict_, cmp_, low_, high_)
  assert(is_iterable(tbl), "invalid argument #1 (iterable expected)")
  local nel = #tbl
  if nel <= 0 then return nil end

  if not is_logical(strict_) and is_nil(high_) then
    cmp_, low_, high_, strict_ = strict_, cmp_, low_, nil -- right shift
  end
  if is_number(cmp_) and is_nil(high_) then
    low_, high_, cmp_ = cmp_, low_, nil -- right shift
  end

  local low  = max(low_  or   1,   1)
  local high = min(high_ or nel, nel)
  assert(low <= high, "invalid boundaries (low > high)")

  local cmp = cmp_ or gfunc.cmp
  assert(is_callable(cmp), "invalid argument #2 (callable expected)")

  local ord = cmp(tbl[high],tbl[low])
  assert(ord == 0 or ord == 1 or ord == -1,
         "invalid argument #3 (cmp must return -1,0,1)")

  if strict_ then
    if ord == 0 then return nil end
    for k=low+1,high do
      if cmp(tbl[k],tbl[k-1]) ~= ord then return nil end
    end
  else
    for k=low+1,high do
      local c = cmp(tbl[k],tbl[k-1])
      if c ~= ord and c ~= 0 then return nil end
    end
  end

  return ord
end

-- env ------------------------------------------------------------------------o

MAD.typeid.is_identifier = is_identifier

-- end ------------------------------------------------------------------------o
return {
  utility   = wprotect(utility),
  totable   = totable_,
  tostring  = tostring_,
  toboolean = toboolean,
}
