--[=[
 o-----------------------------------------------------------------------------o
 |
 | Generic utility module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide a set of generic utilities

 o-----------------------------------------------------------------------------o
]=]

-- help -----------------------------------------------------------------------o

local __help = {}
__help.gutil = [=[
NAME
  gutil -- provide some utility functions

SYNOPSIS
  is_nil, is_boolean, is_number, is_string, is_function, is_table, (basic types)
  is_cdata, is_complex,
  is_nan, is_infinite, is_positive, is_negative, is_integer,   (specializations)
  is_scalar, is_rawtable,
  bnot, band, bor, bxor, bclr, bset, btst, tobit, tohex,         (bit operators)
  lnot, land, lor, bool, eq, ne, lt, le, gt, ge,             (logical operators)
  unm, add, sub, mul, div, mod, pow, get, set, len, cat, call        (operators)
  is_metaname, has_metatable, get_metatable,                       (metamethods)
  has_length, is_iterable, is_mappable, is_indexable, is_callable,    (concepts)
  is_comparable, is_ordered, is_concatenable, is_stringable, is_tablable,
  is_negatable, is_addable, is_substractable, is_multiplicable, is_dividable,
  is_modulable, is_powerable, has_member, has_method, has_metamethod,
  is_same, same,                                              (types comparison)
  tostring, totable,                                                (extensions)
  option { format='%.16g' }.                                             (setup)

DESCRIPTION
  The utils module provides useful utility functions:
  - is_nil, is_boolean, is_number, is_string, is_function, is_table, is_cdata,
    and is_complex return true if the argument is of expected type,
  - is_nan and is_infinite return true if argument is not-a-number or Â±infinity,
  - is_positive and is_negative return true if argument is >0 or <0 respectively,
  - is_integer returns true if the argument is an integer number within the
    interval of [-2^52, 2^52],
  - is_scalar returns true if the argument is a number or a complex,
  - is_rawtable returns true if the argument is a table without metatable,
  - bnot, band, bor, bxor, tobit and tohex imported are from the bit module,
  - bclr, bset and btst respectively clear, set and test bit 0..31 of an int32,
  - bool, logical_not, logical_and, logical_or, is_equal, is_not_equal,
    is_lesser, is_lesser_or_equal, is_greater and is_greater_or_equal are
    functions wrapping logical operators,
  - unm, add, sub, mul, div, mod, pow, get, set, len, cat, call are functions
    wrapping other operators (i.e. -n, +, -, *, /, %, ^, [], []=, #, .., ()),
  - is_ismetaname returns true if the argument is a valid metamethod name,
  - has_metatable returns true is the argument has a metatable,
  - get_metatable is a generic version of getmetatable that works also with
    cdata,
  - has_length, is_iterable, is_mappable, is_indexable, is_callable,
    is_comparable, is_ordered, is_concatenable, is_stringable, is_tablable,
    is_negatable, is_addable, is_substractable, is_multiplicable, is_dividable,
    is_modulable, is_powerable, has_member, has_method and has_metamethod return
    true if the argument fulfills the concept requirements,
  - is_stringable and is_tablable check only if the argument supports
    respectively the __tostring and the __totable metamethods because objects
    are always stringable and tableable in MAD,
  - has_member, has_method and has_metamethod returns true if argument #1 has
    argument #2 as a member, a callable member and a meta member respectively,
  - tostring is extended to handle option.format and delegation. To let the
    print command uses this version, it must be exported to override the
    global environment one (i.e. MAD.export('tostring', true)),
  - totable support delegation for non-primary types,
  - option is a table that stores various setup.

RETURN VALUES
  Depends on the utility functions.

ERRORS
  None.

SEE ALSO
  None.
]=]
__help.option   = __help.gutil
__help.typeid   = __help.gutil
__help.concept  = __help.gutil
__help.utility  = __help.gutil
__help.operator = __help.gutil
__help.totable  = __help.gutil
__help.tostring = __help.gutil
__help.same     = __help.gutil -- move to gfunc

-- locals ---------------------------------------------------------------------o

-- Note: this module is used by MAD env,
--       hence it cannot rely on MAD env.

local ffi, bit = require 'ffi', require 'bit'
local istype                                   in ffi
local format                                   in string
local abs, huge                                in math
local bnot, band, bor, bxor, rol, tobit, tohex in bit
local type, getmetatable, tostring = type, getmetatable, tostring

-- implementation -------------------------------------------------------------o

-- metatables & metamethods

assert(ffi.miscmap, "missing MAD extension (no cdata metatable access)")

local metaname = {
  -- list of metanames from lj_obj.h + __init + __exec + __totable
  '__add', '__call', '__concat', '__div', '__eq', '__exec', '__gc', '__index',
  '__init', '__ipairs', '__le', '__len', '__lt', '__metatable', '__mod',
  '__mode', '__mul', '__new', '__newindex', '__pairs', '__pow', '__sub',
  '__tostring', '__totable', '__unm',
}
for _,v in ipairs(metaname) do metaname[v] = v end -- build dictionary

local function get_metatable (a)
  return type(a) == 'cdata' and ffi.miscmap[ -tonumber(ffi.typeof(a)) ]
         or getmetatable(a)
end

local function has_metatable (a)
  return not not get_metatable(a)
end

local function get_metamethod (a, f)
  local mt = get_metatable(a)
  return mt and rawget(mt,f)
end

local function has_metamethod (a, f)
  return not not get_metamethod(a,f)
end

local function has_metamethod2 (a, f, f2)
  local mt = get_metatable(a)
  return not not (mt and (rawget(mt,f) or rawget(mt,f2)))
end

-- values

local value_t = { -- list of types that cannot be modified
  ['nil'] = true, boolean = true, number = true, string = true, -- table = nil
  ['function'] = true, thread = true,
}

-- options

local option = {

  format = "%.16g",

}

-- operators

local operator = {

  -- bits operators
  bnot  = bnot,
  band  = band,
  bor   = bor,
  bxor  = bxor,
  tobit = tobit,
  tohex = tohex,

  bset = \x,n -> bor (x, rol( 1, n)),
  btst = \x,n -> band(x, rol( 1, n)) ~= 0,
  bclr = \x,n -> band(x, rol(-2, n)),

  -- logical operators
  bool = \x   -> not not x,
  lnot = \x   -> not x,
  land = \x,y -> x and y,
  lor  = \x,y -> x or  y,
  eq   = \x,y -> x == y,
  ne   = \x,y -> x ~= y,
  lt   = \x,y -> x <  y,
  le   = \x,y -> x <= y,
  gt   = \x,y -> x >  y,
  ge   = \x,y -> x >= y,

  -- math operators
  unm  = \x   -> -x,
  sqr  = \x   ->  x * x,
  add  = \x,y ->  x + y,
  sub  = \x,y ->  x - y,
  mul  = \x,y ->  x * y,
  div  = \x,y ->  x / y,
  mod  = \x,y ->  x % y,
  pow  = \x,y ->  x ^ y,

  -- object operators
  get  = \x,k   -> x[k],
  set  = \x,k,v => x[k]=v end,
  len  = \x     -> #x,
  cat  = \x,y   -> x..y,
  call = \x,... -> x(...),
}

operator.opstr = {
  ['~' ] = operator.unm,
  ['+' ] = operator.add,
  ['-' ] = operator.sub,
  ['*' ] = operator.mul,
  ['/' ] = operator.div,
  ['%' ] = operator.mod,
  ['^' ] = operator.pow,
  ['#' ] = operator.len,
  ['..'] = operator.cat,
  ['<' ] = operator.lt,
  ['>' ] = operator.gt,
  ['<='] = operator.le,
  ['>='] = operator.ge,
  ['~='] = operator.ne,
  ['!='] = operator.ne,
  ['=='] = operator.eq,
  ['!' ] = operator.lnot,
  ['&&'] = operator.land,
  ['||'] = operator.lor,
  ['!!'] = operator.bool,
}

-- types

local complex = ffi.typeof 'complex'

local typeid = {

  -- primitive types
  is_nil      = \a -> type(a) == 'nil',
  is_boolean  = \a -> type(a) == 'boolean',
  is_number   = \a -> type(a) == 'number',
  is_string   = \a -> type(a) == 'string',
  is_function = \a -> type(a) == 'function',
  is_table    = \a -> type(a) == 'table',
  is_cdata    = \a -> type(a) == 'cdata',
  is_complex  = \a -> istype(complex, a),

  -- specialisations
  is_nan      = \a -> type(a) == 'number' and a ~= a,
  is_infinite = \a -> type(a) == 'number' and abs(a) == huge,
  is_finite   = \a -> type(a) == 'number' and abs(a) <  huge,
  is_positive = \a -> type(a) == 'number' and a > 0,
  is_negative = \a -> type(a) == 'number' and a < 0,
  is_integer  = \a -> type(a) == 'number' and a >= -2^52 and a <= 2^52 and (a%1) == 0,
  is_scalar   = \a -> type(a) == 'number' or  istype(complex, a),
  is_rawtable = \a -> type(a) == 'table'  and getmetatable(a) == nil,

  -- comparison
  is_same = \a,b -> type(a) == type(b) and get_metatable(a) == get_metatable(b),

  -- valid metamethods names
  is_metaname = \a -> metaname[a] == a,

}

-- concepts

local is_number, is_complex, is_string, is_table, is_rawtable, is_function
      in typeid

local concept = {

  get_metatable    = get_metatable,
  has_metatable    = has_metatable,
  get_metamethod   = get_metamethod,
  has_metamethod   = has_metamethod,

  is_stringable    = \a -> has_metamethod(a, '__tostring'),
  is_tablable      = \a -> has_metamethod(a, '__totable' ),

  is_callable      = \a -> is_function(a) or has_metamethod(a, '__call'  ),
  is_iterable      = \a -> is_table(a)    or has_metamethod(a, '__ipairs'),
  is_mappable      = \a -> is_table(a)    or has_metamethod(a, '__pairs' ),
  is_indexable     = \a -> is_table(a)    or has_metamethod(a, '__index' ),
  is_concatenable  = \a -> is_string(a)   or has_metamethod(a, '__concat'),
  is_negatable     = \a -> is_number(a)   or has_metamethod(a, '__unm'   ),
  is_addable       = \a -> is_number(a)   or has_metamethod(a, '__add'   ),
  is_substractable = \a -> is_number(a)   or has_metamethod(a, '__sub'   ),
  is_multiplicable = \a -> is_number(a)   or has_metamethod(a, '__mul'   ),
  is_dividable     = \a -> is_number(a)   or has_metamethod(a, '__div'   ),
  is_modulable     = \a -> is_number(a)   or has_metamethod(a, '__mod'   ),
  is_powerable     = \a -> is_number(a)   or has_metamethod(a, '__pow'   ),

  is_comparable    = \a -> is_number(a) or is_string(a) or has_metamethod(a, '__eq' ),
  is_ordered       = \a -> is_number(a) or is_string(a) or has_metamethod2(a, '__le', '__lt'),

  has_length       = \a -> is_table(a)  or is_string(a) or has_metamethod(a, '__len'),
  has_constructor  = \a -> has_metamethod(a,'__new'),
  is_collectable   = \a -> has_metamethod(a,'__gc' ),

}

-- methods

local is_indexable, is_callable in concept

concept.has_member = \a,f -> is_indexable(a) and a[f] ~= nil       or false
concept.has_method = \a,f -> is_indexable(a) and is_callable(a[f]) or false

-- utilities

local is_iterable, is_mappable, is_stringable, is_tablable, has_method in concept

local utility = {}

local rep_x, rep_n = {}, {}

local rep_it = \s,i => if i < s[rep_n] then return i+1, s[rep_x] end end
local rep_mt = {
  __len      = \s   -> s[rep_n],
  __index    = \s,i => if 1 <= i and i <= s[rep_n] then return s[rep_x] end end,
  __newindex = \    -> error("invalid write access to readonly object"),
  __pairs    = \s   -> (rep_it, s, 0),
  __ipairs   = \s   -> (rep_it, s, 0),
  __metatable = false,
}

function utility.rep (x, n_) -- repeater
  return setmetatable({[rep_x]=x, [rep_n]=n_ or 2^30}, rep_mt)
end

function utility.setkeys (a)
  assert(is_iterable(a), "invalid argument #1 (iterable expected)")
  for _,v in ipairs(a) do a[v] = v end
  return a
end

function utility.countkeys (a)
  assert(is_mappable(a), "invalid argument #1 (mappable expected)")
  local n = 0
  for _ in pairs(a) do n = n+1 end
  return n
end

function utility.printf (str, ...)
  return io.write(str:format(...))
end

function utility.fprintf (fp, str, ...)
  return fp:write(str:format(...))
end

function utility.fileexists (fname)
  assert(is_string(fname), "invalid argument #1 (string expected)")
  local file = io.open(fname)
  io.close(file)
  return file ~= nil
end

local tostring_ -- forward ref

function utility.tbl2str(tbl, sep_)
  assert(is_mappable(tbl), "invalid argument #1 (mappable expected)")
  if #tbl == 0 then return '{}' end
  local r = table.new(#tbl+2,0)
  r[1] = '{'
  for i=1,#tbl do r[i+1] = tostring_(tbl[i]) end
  r[#r+1] = '}'
  return table.concat(r, sep_ or ', ')
end

function utility.str2tbl(str, match_, init_)
  assert(is_string(str), "invalid argument #1 (string expected)")
  local r
  if is_string(match_) then
    r = {}
    for s in string.gmatch(str, match_, init_) do r[#r+1] = s end
  else
    r = table.new(#str,0)
    for i=1,#str do r[i] = str:sub(i,i) end
  end
  return r
end

-- extensions (conversion, factory)

local function totable (a, ...)
  if     is_table(a)    then return a
  elseif is_string(a)   then return utility.str2tbl(a,...) -- table.concat^-1
  elseif is_tablable(a) then return rawget(get_metatable(a),'__totable')(a, ...)
  else                       return {a} -- encapsulate
  end
end

function tostring_ (a, ...)
  if     is_string(a)     then return a
  elseif is_number(a)     then return string.format(option.format, a)
  elseif is_rawtable(a)   then return utility.tbl2str(a,...) -- table.concat
  elseif is_stringable(a) then return rawget(get_metatable(a),'__tostring')(a, ...)
  else                         return tostring(a) -- builtin
  end
end

local function same (a, ...)
  if     value_t[type(a)] or is_complex(a) then return a
  elseif is_rawtable(a)                    then return {}
  elseif has_method(a, 'same')             then return a:same(...)
  end
  error("invalid argument #1 (clonable object expected)")
end

-- end ------------------------------------------------------------------------o
return {
  option   = option,
  typeid   = typeid,
  concept  = concept,
  utility  = utility,
  operator = operator,

  same     = same,
  totable  = totable,
  tostring = tostring_,

  __help   = __help,
}
