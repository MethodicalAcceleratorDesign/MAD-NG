--[=[
 o-----------------------------------------------------------------------------o
 |
 | Survey element methods (loaded by survey)
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

--[=[
Notes about directions and quantities:
  element direction   edir: affects curvatures (edir = seq.dir).
  track direction (s) sdir: affects lengths    (sdir = cmd.dir).
  time direction  (t) tdir: affects angles     (tdir = edir x sdir).
  beam direction      bdir: affects strengths  (bdir = edir x sdir x chg).
]=]

-- locals ---------------------------------------------------------------------o

local element                in MAD
local fnil, bind3rd          in MAD.gfunc
local errorf                 in MAD.utility
local minlen, minang, twopi  in MAD.constant
local is_implicit            in element.drift
local arc2cord, arc2len      in MAD.gmath
local abs, sin, cos          in math
local is_nil, is_number      in MAD.typeid

-- integrator schemes ---------------------------------------------------------o

local thinonly, thickonly, driftonly                             in MAD.symint

-- geometric maps -------------------------------------------------------------o

local strex_thick, curex_thick, curex_thin                       in MAD.geomap

local xrotation, yrotation, srotation, translate,
      changeref, changedir, changenrj, misalign                  in MAD.geomap

-- collect tilt, misalignment -------------------------------------------------o

local function get_tilt (elm, m)
  local tlt = elm.tilt
  if abs(tlt) < minang then tlt = 0 end
  m.tlt = tlt
  return m.tlt
end

local function get_algn (elm, m)
  local al = elm.misalign or  m.sequ:align (m.eidx)
  local el = m  .misalign and m.sequ:ealign(m.eidx) or nil

  if not (al or el) then return nil end

  local dx, dy, ds, dthe, dphi, dpsi = 0, 0, 0, 0, 0, 0

  if al then -- element abolute/permanent misalignments
    dx, dthe = dx+(al.dx or 0), dthe+(al.dtheta or 0) -- horizontal/azimutal
    dy, dphi = dy+(al.dy or 0), dphi+(al.dphi   or 0) -- vertical/elevation
    ds, dpsi = ds+(al.ds or 0), dpsi+(al.dpsi   or 0) -- longitudinal/roll
  end

  if el then -- element relative/error misalignments
    dx, dthe = dx+(el.dx or 0), dthe+(el.dtheta or 0) -- horizontal/azimutal
    dy, dphi = dy+(el.dy or 0), dphi+(el.dphi   or 0) -- vertical/elevation
    ds, dpsi = ds+(el.ds or 0), dpsi+(el.dpsi   or 0) -- longitudinal/roll
  end

  local trn = abs(dx  )+abs(dy  )+abs(ds  ) >= minlen
  local rot = abs(dthe)+abs(dphi)+abs(dpsi) >= minang

  if not (trn or rot) then m.algn = nil ; return nil end

  m.algn = {trn=trn,rot=rot,dx=dx,dy=dy,ds=ds,dthe=dthe,dphi=dphi,dpsi=dpsi}
  return m.algn
end

-- element tracking -----------------------------------------------------------o

local slc_fwd = {-1, -3, -4, -2}
local slc_bwd = {-2, -4, -3, -1}

local function trackone (elm, m, inter, thick_or_thin)
  local sdir, atentry, atexit in m
  local slc = slc_fwd

  if sdir < 0 then
    atentry, atexit, slc = atexit, atentry, slc_bwd
  end

  atentry(elm, m,  sdir, slc[1])
  inter  (elm, m,  sdir, thick_or_thin)
  atexit (elm, m, -sdir, slc[4])
end

local function trackelm (elm, m, inter, thick, thin, fringe)
  local sdir, atentry, atexit in m
  local tlt = get_tilt(elm, m)
  local alg = get_algn(elm, m)
  local rot = tlt ~= 0 and srotation or fnil
  local mis = alg      and misalign  or fnil
  local fng =              fringe
  local slc = slc_fwd

  if sdir < 0 then
    atentry, atexit, slc = atexit, atentry, slc_bwd
  end

  atentry(elm, m,  sdir, slc[1])
  mis    (elm, m,  sdir)
  rot    (elm, m,  sdir)
  atentry(elm, m,  sdir, slc[2])
  fng    (elm, m,  sdir)
  inter  (elm, m,  sdir, thick, thin)
  fng    (elm, m, -sdir)
  atexit (elm, m, -sdir, slc[3])
  rot    (elm, m, -sdir)
  mis    (elm, m, -sdir)
  atexit (elm, m, -sdir, slc[4])

  m.tlt, m.algn = 0, nil
end

local function tracksub (elm, m, inter, thick, thin, fringe)
  if m.eidx == 0 then
    errorf("invalid subelement survey %s (contain subelements)", elm.name)
  end

  local eidx, sdir, atentry, atexit, __sdat in m
  local tlt = get_tilt(elm, m)
  local alg = get_algn(elm, m)
  local rot = tlt ~= 0 and srotation or fnil
  local mis = alg      and misalign  or fnil
  local fng =              fringe
  local slc = slc_fwd
  m.eidx = 0

  if sdir < 0 then
    atentry, atexit, slc = atexit, atentry, slc_bwd
  end

  atentry(elm, m, sdir, slc[1])
  mis    (elm, m, sdir)
  rot    (elm, m, sdir)
  atentry(elm, m, sdir, slc[2])
  fng    (elm, m, sdir)

  if sdir > 0 then
    local at, lw = 0
    for i=1,#elm do
      at, lw = elm[i].sat, elm[i].sat - at
      if abs(lw) >= minlen then -- body step
        inter(elm, m, lw, thick, thin)
      end
      __sdat.clw = at
      elm[i]:track(__sdat)
      at = at + elm[i].l/m.el
    end
    lw = 1 - at
    if abs(lw) >= minlen then  -- last body step
      inter(elm, m, lw, thick, thin)
    end

  else -- backtrack (sdir < 0)
    local at, lw = 1
    for i=#elm,1,-1 do
      local sat = elm[i].sat + elm[i].l/m.el
      at, lw = sat, at - sat
      if abs(lw) >= minlen then -- body step
        inter(elm, m, -lw, thick, thin)
      end
      __sdat.clw = at
      elm[i]:track(__sdat)
      at = at - elm[i].l/m.el
    end
    lw = at
    if abs(lw) >= minlen then -- first body step
      inter(elm, m, -lw, thick, thin)
    end
  end

  fng   (elm, m, -sdir)
  atexit(elm, m, -sdir, slc[3])
  rot   (elm, m, -sdir)
  mis   (elm, m, -sdir)
  atexit(elm, m, -sdir, slc[4])

  m.tlt, m.algn, m.eidx = 0, nil, eidx
end

-- kinds ----------------------------------------------------------------------o

local function track_slink (elm, m)
  local update = elm:var_get'update'
  if update then update(elm, m) end -- update damap

  if elm.sequence then
    m:change_si(elm.sequence, elm.range, elm.nturn, elm.dir)
    return "restart_si"
  end
end

local function track_marker (elm, m)
  trackone(elm, m, thinonly, fnil)
end

local function track_rotation (elm, m, rot)
  m.ang = elm.angle
  trackone(elm, m, thinonly, rot)
  m.ang = 0
end

local function track_translate (elm, m)
  m.dx, m.dy, m.ds = elm.dx, elm.dy, elm.ds
  trackone(elm, m, thinonly, translate)
end

local function track_changeref (elm, m)
  m.dx  , m.dy  , m.ds   = elm.dx  , elm.dy  , elm.ds
  m.dthe, m.dphi, m.dpsi = elm.dthe, elm.dphi, elm.dpsi
  trackone(elm, m, thinonly, changeref)
end

local function track_drift (elm, m)
  local l in elm
  m.el = l

  if is_implicit(elm) then
    local inter = m.implicit and thickonly or driftonly
    trackone(elm, m, inter, strex_thick)
  else
    local inter = l >= minlen and thickonly or driftonly
    local track = is_nil(elm[1]) and trackelm or tracksub
    track(elm, m, inter, strex_thick, fnil, fnil)
  end
end

local function track_thin (elm, m)
  local angle in elm
  m.el, m.ang = 0, angle

  local kick = abs(angle) >= minang and curex_thin or fnil
  trackelm(elm, m, thinonly, kick, nil, fnil)
  m.ang = 0
end

local function track_thick (elm, m, fng_)
  local l, angle in elm
  local no_ang = abs(angle) < minang or fng_
  m.el, m.ang = fng_ and m.el or l, angle

  local inter, track, thick
  if l >= minlen then -- trick: driftonly+thick <=> thinonly+thin
    inter, thick = thickonly, no_ang and strex_thick or curex_thick
  else
    inter, thick = driftonly, no_ang and fnil        or curex_thin
  end

  local track = is_nil(elm[1]) and trackelm or tracksub
  track(elm, m, inter, thick, fnil, fng_ or fnil)
  m.ang = 0
end

-- rbend special --------------------------------------------------------------o

local function fng_e (elm, m, s)
  yrotation(elm, m, -0.5*m.edir)
end

local function fng_e1 (elm, m, s)
  local e1, e2, elc, sdir in m
  if s == sdir then -- translation independant of direction
    translate(elm, m, -sdir, elc*sin((e2-e1)/2), 0, 0)
    yrotation(elm, m, -sdir, e2)
  elseif e1 ~= 0 then
    yrotation(elm, m, -sdir, e1)
  end
end

local function fng_e2 (elm, m, s)
  local e1, e2, elc, sdir, edir in m
  if s == sdir then -- translation independant of direction
    yrotation(elm, m, -sdir, e1)
    translate(elm, m, -sdir, elc*sin((e2-e1)/2), 0, 0)
  elseif e2 ~= 0 then
    yrotation(elm, m, -sdir, e2)
  end
end

local function track_rbend (elm, m)
  if not elm.true_rbend then
    track_thick(elm, m, nil) ; return
  end

  local e1, e2, angle in elm

  if is_number(e1) and abs(e1) > twopi then e1 = false end
  if is_number(e2) and abs(e2) > twopi then e2 = false end

  m.elc = arc2cord(elm.l, angle)

  local fng

  if e1 and e2 then                                                           -- Straight
    m.el = m.elc
    fng = fng_e
  elseif e1 then                                                              -- True parallel with exit patch
    m.e1, m.e2 = e1, angle - e1
    m.el = m.elc * cos(angle/2 - e1)
    fng = fng_e1
  elseif e2 then                                                              -- True parallel with entry patch
    m.e1, m.e2 = angle - e2, e2
    m.el = m.elc * cos(angle/2 - e2)
    fng = fng_e2
  else errorf("True parallel rbend '%s' must set e1 or e2", elm.name)
  end

  track_thick(elm, m, fng)
  m.e1, m.e2 = nil, nil
end

-- load maps into elements ----------------------------------------------------o

local E = element

-- special elements
E.marker        :set_methods {survey = track_marker}
E.slink         :set_methods {survey = track_slink }

-- drift elements
E.drift_element :set_methods {survey = track_drift}

-- thick elements
E.thick_element :set_methods {survey = track_thick}
E.rbend         :set_methods {survey = track_rbend}

-- thin elements
E.thin_element  :set_methods {survey = track_thin}

-- patches
E.changeref     :set_methods {survey = track_changeref}
E.translate     :set_methods {survey = track_translate}
E.xrotation     :set_methods {survey = \e,m -> track_rotation(e,m,xrotation)}
E.yrotation     :set_methods {survey = \e,m -> track_rotation(e,m,yrotation)}
E.srotation     :set_methods {survey = \e,m -> track_rotation(e,m,srotation)}
E.changenrj     :set_methods {survey = \e,m -> trackone(e,m,thinonly,changenrj)}
E.changedir     :set_methods {survey = \e,m -> trackone(e,m,thinonly,changedir)}

-- end ------------------------------------------------------------------------o
