#
# o----------------------------------------------------------------------------o
# |
# | MAD Makefile
# |
# | Methodical Accelerator Design (Copyleft 2015+)
# | Authors: L. Deniau, laurent.deniau at cern.ch
# | Contrib: -
# |
# o----------------------------------------------------------------------------o
# | You can redistribute this file and/or modify it under the terms of the GNU
# | General Public License GPLv3 (or later), as published by the Free Software
# | Foundation. This file is distributed in the hope that it will be useful, but
# | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
# o----------------------------------------------------------------------------o
#

# project
PRJ     := mad

# c/lua/mad modules to NOT embed
NOT    	:= $(wildcard *.mad)

# setup
CC      := gcc
DIR     := build
LIB     := ../lib
OSLIB   := $(LIB)/linux
LJ      := $(firstword $(wildcard ./mad $(LIB)/luajit/bin/luajit))

# depend
DFLAGS  := -std=c99 -MM

# compiler
CFLAGS  := -std=c99 -W -Wall -Wextra -pedantic
CFLAGS  += -O3 -ftree-vectorize -fPIC -fopenmp # -flto
CFLAGS  += -Waggregate-return -Wcast-align -Wdisabled-optimization \
					 -Wpointer-arith -Wsign-compare -Wwrite-strings \
					 -Wbad-function-cast -Wmissing-prototypes -Wnested-externs \
					 -Wstrict-prototypes -Wunreachable-code
# https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html
# https://gcc.gnu.org/wiki/FloatingPointMath
CFLAGS  += -ffast-math -fno-builtin-cproj
         # -fno-cx-limited-range
         # -fassociative-math -freciprocal-math -ffinite-math-only

# lua/mad
LFLAGS  :=

# linker
LDFLAGS := -static-libgcc -Wl,-E -Wl,-Bstatic
LDFLAGS += $(OSLIB)/libluajit.a $(OSLIB)/liblpeg.a \
					 $(OSLIB)/liblapack.a $(OSLIB)/librefblas.a \
					 $(OSLIB)/libfftw3.a  $(OSLIB)/libnfft3.a \
					 $(OSLIB)/libnlopt2.a \
					 $(wildcard \
					   $(shell gcc -print-file-name=libgfortran.a) \
					   $(shell gcc -print-file-name=libquadmath.a) )
LDFLAGS += -Wl,-Bdynamic -lm -ldl

# files setup
JSRC    := $(wildcard ljit_*.lua)
RSRC    := $(filter-out $(JSRC),$(NOT))
CSRC    := $(filter-out $(RSRC),$(wildcard *.c sse/*.c))
LSRC    := $(filter-out $(RSRC),$(wildcard *.lua))
MSRC    := $(filter-out $(RSRC),$(wildcard *.mad))

DEP     := $(patsubst %.c,%.d,$(filter-out mad_main.c,$(CSRC)))
DEP     := $(addprefix $(DIR)/,$(DEP))

OBJ     := $(patsubst %.c,%.o,$(CSRC))
OBJ     += $(patsubst %.lua,%.o,$(LSRC))
OBJ     += $(patsubst %.mad,%.o,$(MSRC))
OBJ     := $(addprefix $(DIR)/,$(OBJ))

DOIT    := $(shell mkdir -p $(DIR) $(DIR)/sse)

# files specific setup
$(DIR)/mad_main.o: CFLAGS += -I$(LIB)/luajit/src
$(DIR)/mad_vec.o:  CFLAGS += -I$(LIB)/fftw3/api -I$(LIB)/nfft3/include
$(DIR)/mad_mat.o:  CFLAGS += -I$(LIB)/fftw3/api -I$(LIB)/nfft3/include
$(DIR)/mad_opt.o:  CFLAGS += -I$(LIB)/nlopt2/api

# rules
$(PRJ): $(OBJ)
	$(CC) $(CFLAGS) $(OBJ) -o $@ $(LDFLAGS)

$(DIR)/%.d: %.c
	$(CC) $(DFLAGS) $< > $@
	@sed -i.bak -e 's,\($*\)\.o[ :]*,$(DIR)/\1.o $@ : ,g' $@
	@rm $@.bak

$(DIR)/%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

$(DIR)/%.c: %.mad
	$(LJ) $(LFLAGS) -bg $< $@

$(DIR)/%.c: %.lua
	$(LJ) $(LFLAGS) -bg $< $@

dep:
	ldd $(PRJ)

cleanbin:
	rm -f $(PRJ)

cleanobj:
	rm -rf $(DIR)

clean: cleanbin cleanobj

# default rule
.DEFAULT_GOAL := $(PRJ)

# include dependencies
ifeq ($(filter-out $(PRJ),$(MAKECMDGOALS)),)
-include $(DEP)
endif
