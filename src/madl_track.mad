--[=[
 o-----------------------------------------------------------------------------o
 |
 | Track module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

--[=[
Notes about directions and quantities:
  edir: element direction affects curvatures (edir = seq.dir).
  sdir: track direction s affects lengths    (sdir = cmd.dir).
  tdir: time direction t  affects angles     (tdir = edir x sdir).
  bdir: beam direction    affects strengths  (bdir = edir x sdir x chg).
--]=]

-- locals ---------------------------------------------------------------------o

local command, element, mtable, damap, symint, option, show    in MAD

local is_nil, is_beam, is_sequence, is_boolean, is_number,
      is_natural, is_nznatural, is_integer, is_string, is_true,
      is_beta0, is_matrix, is_tpsa, is_damap,
      is_callable, is_iterable, is_mappable                     in MAD.typeid
local fnil, ffalse, chain, achain                               in MAD.gfunc
local dp2pt, bet2map, par2vec                                   in MAD.gphys
local errorf, assertf, printf                                   in MAD.utility
local tobit, band, bor                                          in MAD.gfunc
local apercheck                                                 in MAD.aperture
local srad_save, srad_damp, srad_quant                          in MAD.synrad
local is_implicit                                               in element.drift
local atbegin, atbody, atend, atins, atins1, action, actionat   in symint

local abs, max in math

local io, type, setmetatable, assert =
      io, type, setmetatable, assert

-- load track methods into elements -------------------------------------------o

require 'madl_etrck'

-- helper ---------------------------------------------------------------------o

local function mshow (mflw)
  show(mflw)
  for i=1,#mflw do
    local m = mflw[i]
    printf("** [%d]=\n", i)
    show(m)
    if is_damap(m) then
      m:get0():print(nil,'line')
      if mflw.debug >= 3 then m:get1():print(nil,'line') end
     end
  end
end

-- debug ----------------------------------------------------------------------o

local fmt = "% -.16e  % -.16e  % -.16e  % -.16e  % -.16e  % -.16e "
local nodump = {marker=true}

local function mdump (elm, mflw, lw_, str)
  local dbg = mflw.debug
  if dbg < 4 then return end -- print mflw[1], require debug >= 4

  if is_number(elm) then
    printf("@: %-15s %-15s ", '  "', str)
  else
    if nodump[elm.kind] then return end
    printf("@@ %-15s %-15s ", elm.name, str)
  end

  if mflw.npar == 0 then io.write("no particle found\n") return end

  local X = mflw[1]

  -- orbit output
  if is_damap(X) then
    printf(fmt,X.x:get0(),X.px:get0(),X.y:get0(),X.py:get0(),X.t:get0(),X.pt:get0())
  else
    printf(fmt, X.x, X.px, X.y, X.py, X.t, X.pt) ; dbg = 4
  end

  if dbg >= 5 then
    -- linear output
    local R = X:get1()
    for i=1,R.nrow do
      io.write(' ')
      printf(fmt,R:get(i,1),R:get(i,2),R:get(i,3),R:get(i,4),R:get(i,5),R:get(i,6))
    end

    -- full map output on exit
    if dbg >= 6 and string.sub(str,-2) == ':1' then
      io.write('\n')
      mflw[1]:print("no-header")
    end
  end

  io.write('\n')
end

local function xdump (elm, mflw, X, str_) -- print tpsa X, require debug >= 5
  printf("@: %-15s %-15s ", elm.name, str_ or '')

  local fmt  = mflw.debug >= 5 and lngfmt  or shtfmt
  local fmt1 = mflw.debug >= 5 and lngfmt1 or shtfmt1

  if is_number(X) then
    printf(fmt1, X)
  elseif is_tpsa(X) then
    printf(fmt1, X:get(1))
    printf(fmt , X:get(2), X:get(3), X:get(4), X:get(5), X:get(6), X:get(7))
  end
  io.write('\n')
end

-- track mtable ---------------------------------------------------------------o

local function fill_row (elm, mflw, lw, islc)
  if mflw.savesel(elm, mflw, lw, islc) == false then
    return false
  end

  local name, kind in elm
  local ds, eidx, clw, sdir, tdir, spos, turn, beam, mtbl, savemap in mflw

  local lw  = islc<0 and -1-islc or clw
  local dsw = ds*lw
  local pc  = beam.pc

  eidx = is_implicit(elm) and eidx+0.5*sdir or eidx

  for i=1,mflw.npar do
    if mflw[i].nosave then goto continue end

    local m, M = mflw[i]
    local id, x, px, y, py, t, pt, beam, status in m
    local pc = beam and beam.pc or pc
    if is_damap(m) then
      x,px,y,py,t,pt = x:get0(),px:get0(),y:get0(),py:get0(),t:get0(),pt:get0()
      M = savemap and (savemap == 1 and m:get1() or m:copy())
    end

    -- keep order!
    mtbl = mtbl + { name, kind, spos+dsw, dsw, id,
                    x, px, y, py, t, pt, pc, islc, turn, tdir, eidx, status, M }

    ::continue::
  end
  return true
end

local function fill_obs (elm, mflw, lw, islc)
  if elm:is_observed() and mflw.turn % mflw.observe == 0 then
    return fill_row(elm, mflw, lw, islc)
  end
  return false
end

local header = {
  'direction', 'observe', 'implicit', 'misalign', 'radiate', 'deltap', 'lost'
}

local function make_mtable (self, range)
  local title, dir, observe, implicit, misalign, radiate, deltap, savemap in self
  local sequ, nrow = self.sequence, 8

  -- keep order!
  return mtable(sequ.name, {
    type='track', title=title, header=header,
    direction=dir, observe=observe, implicit=implicit, misalign=misalign,
    radiate=radiate, deltap=deltap, lost=0, range=range, reserve=nrow,
    __seq=sequ,
    {'name'}, 'kind', 's', 'l', 'id', 'x', 'px', 'y', 'py', 't', 'pt', 'pc',
    'slc', 'turn', 'tdir',      -- t-direction of the tracking: sdir * seq.dir
    'eidx',                     -- index of element in the sequence
    'status',                   -- status: 'Xset', 'Mset', 'Aset', 'stable', ...
    savemap and '__map' or nil, -- optional column to save the (da)map
  })
end

-- reset/change sequence iterator (e.g. track again) --------------------------o

local function reset_si (mflw)
  local mt = getmetatable(mflw)
  local m = mt and mt.__index or mflw

  local sequ, range, nturn, sdir, s0 in m.__sitr
  local iter, state, eidx = sequ:siter(range, nturn, sdir)

  m.sequ=sequ
  m.range=range
  m.s0=s0
  m.eidx=eidx
  m.turn=1
  m.beam=m.beam.__par {} -- reset/clone beam

  m.__sitr.iter=iter
  m.__sitr.state=state

  return mflw
end

local function change_si (mflw, sequ, range_, nturn_, dir_)
  local mt = getmetatable(mflw)
  local m = mt and mt.__index or mflw

  local range = range_ or sequ.range
  local iter, state, eidx = sequ:siter(range, nturn_, dir_)

  m.sequ=sequ
  m.range=range
  m.s0=m.spos
  m.eidx=eidx
  m.turn=1
  m.beam=m.beam.__par {} -- reset/clone beam

  m.__sitr.iter=iter
  m.__sitr.state=state

  return mflw
end

-- track mflow ----------------------------------------------------------------o

local modint = {DKD=true, TKT=true}

-- see (survey)
local slicebit = { [false]=tobit(0), [true]=tobit(4),
                   atentry=tobit(1), atslice=tobit(2), atexit=tobit(4),
                   atbound=tobit(5), atbody =tobit(6), atall =tobit(7) }

local function make_mflow (self)
  -- check sequence
  local sequ = assert(self.sequence, "missing sequence")
  assert(is_sequence(sequ), "invalid sequence")

  -- check beam
  local beam = assert(self.beam or sequ.beam, "missing beam")
  assert(is_beam(beam), "invalid beam")

  -- get range (nil == "#s/#e")
  local range = self.range or sequ.range

  -- get nstep
  local nstep = self.nstep
  assert(is_integer(nstep), "invalid number of steps (integer expected)")

  -- build iterator (track direction)
  local dir, nturn in self
  local iter, state, eidx = sequ:siter(range, nturn, dir)

  -- check more attributes
  local save, implicit, observe, fringe, radiate in self
  local savebit = slicebit[save]
  if is_boolean(fringe ) then fringe  = fringe  and -1 or 0 end
  if is_boolean(radiate) then radiate = radiate and "damp" or nil end

  assert(is_number(savebit)  ,
              "invalid save directive (boolean or valid atxxx string expected)")
  assert(is_boolean(implicit), "invalid implicit (boolean expected)")
  assert(is_string(radiate) or radiate == nil, "invalid radiate (string expected)")
  assert(is_natural(fringe+1), "invalid fringe (boolean or fringe flag expected)")
  assert(is_natural(observe) , "invalid observe (positive integer expected)")

  local savesel = self:var_get 'savesel'
  assert(is_callable(savesel), "invalid savesel (callable expected)")

  -- sequence and time direction
  local edir = sequ.dir
  local tdir = dir*edir
  assert(tdir == 1 or tdir == -1, "invalid time direction (1 or -1 expected)")

  -- setup default sclicing
  local nslice = self:var_get 'nslice'
  local nslc = is_number(nslice) and nslice or is_callable(nslice) and 1
                                            or is_iterable(nslice) and #nslice
  assert(is_nznatural(nslc),
         "invalid nslice (integer>0 or iterable of or generator of slice weights expected)")

  -- setup default misalign
  local misalign in self
  assert(is_boolean(misalign), "invalid misalign (boolean expected)")

  -- setup deltap (number, table, vector or range)
  local deltap in self
  if is_number(deltap) then deltap = {deltap} end
  assert(is_iterable(deltap), "invalid deltap (number or iterable expected)")
  local ndp = #deltap

  -- retrieve default actions (avoid evaluation in case of functions)
  local atentry = self:var_get 'atentry'
  local atslice = self:var_get 'atslice'
  local atexit  = self:var_get 'atexit'
  local ataper  = self:var_get 'ataper'
  local atsave  = self:var_get 'atsave'
  local atdebug = self:var_get 'atdebug'

  assert(is_callable(atentry), "invalid atentry (callable expected)")
  assert(is_callable(atslice), "invalid atslice (callable expected)")
  assert(is_callable(atexit ), "invalid atexit (callable expected)")
  assert(is_callable(ataper ), "invalid ataper (callable expected)")
  assert(is_callable(atsave ), "invalid atsave (callable expected)")
  assert(is_callable(atdebug), "invalid atdebug (callable expected)")

  -- saving data, build mtable
  local mtbl
  if save then
    mtbl = make_mtable(self, range)
    if atsave ~= ffalse then
      local fill = observe > 0 and fill_obs or fill_row
      atsave = achain(fill, atsave)

      if savebit > 0 then
        local saveact, ex = action 'atsave'
        if band(savebit, slicebit.atentry) ~= 0 then
          atentry = chain(atentry, saveact)
        end
        if band(savebit, slicebit.atexit) ~= 0 then
          atexit = chain(atexit, saveact)
          ex = true
        end
        if band(savebit, slicebit.atslice) ~= 0 then
          local saveact = actionat('atsave', ex and atins or atins1)
          atslice = chain(atslice, saveact)
        end
      end
    end
  end

  -- activate aperture checks
  if ataper ~= ffalse then
    local aperact = actionat('ataper', atend)
    atslice = chain(aperact, atslice) -- chain ataper to atslice for last slice
    ataper = achain(apercheck, ataper)
  end

  -- activate maps debugging
  if atdebug ~= ffalse then
    if (self.debug or 0) >= 4 then
      atdebug = chain(atdebug, mdump)
    end
  end

  -- activate radiation
  if radiate then
    atslice = chain(achain(atbegin, srad_save), atslice)
    if string.find(radiate, "photon", 1, true) then
      atslice = chain(achain(atbody, srad_quant), atslice)
      radiate = "photon"
    elseif string.find(radiate, "quantum", 1, true) then
      atslice = chain(achain(atbody, srad_quant), atslice)
      radiate = "quantum"
    elseif string.find(radiate, "damp", 1, true) then
      atslice = chain(achain(atbody, srad_damp), atslice)
      radiate = "damp"
    else
      error("invalid radiate value '"..radiate.."'")
    end
    if save then mtbl.radiate = radiate end -- update mtbl
  end

  -- totalpath
  local totalpath in self
  assert(is_boolean(totalpath), "invalid totalpath (boolean expected)")
  local T = totalpath and 1 or 0

  -- model, method, secnmul
  local method, model, secnmul, ptcmodel in self
  if is_nil(ptcmodel) then ptcmodel = option.ptcmodel end
  assertf(modint[model],
                    "invalid integration model %s (DKD or TKT expected)", model)
  assertf(symint[model][method], "invalid integration method '%s'", method)
  assert(is_natural((secnmul or 0)+2), "invalid secnmul (integer or strategy expected)")
  assert(is_boolean(ptcmodel), "invalid ptcmodel (boolean expected)")

  -- retrieve initial conditions
  local s0, X0, O0 in self
  if X0 == 0    then X0 = {0,0,0,0,0,0} end
  if O0 == 0    then O0 = {0,0,0,0,0,0} end
  if O0 == true then O0 = {0,0,0,0,0,0, cofind=true} end
  assert(is_number  (s0), "invalid s0 (number expected)")
  assert(is_iterable(X0), "invalid X0 (iterable expected)")
  assert(is_iterable(O0), "invalid O0 (iterable expected)")
  if not is_iterable(X0[1]) or is_beta0(X0) then X0 = {X0} end

  -- damap defs and save
  local mapdef, savemap in self
      if mapdef == true       then mapdef = {} -- defaut is xy=1
  elseif is_nznatural(mapdef) then mapdef = {xy=mapdef} end
  assert(is_boolean(mapdef) or is_mappable(mapdef),
                        "invalid mapdef (boolean, number or mappable expected)")
  assert(is_boolean(savemap) or savemap == 1, -- 1 means to save only the matrix
                        "invalid savemap (boolean or 1 expected)")

  -- search for reference closed orbit
  if O0.cofind then
    local _, mflw = MAD.cofind { exec=false } :copy_variables(self)
                    { X0=O0, O0=0, deltap=0, save=false, nstep=-1, mapdef=mapdef }
    if mflw.npar ~= 1 then
      warn("reference orbit is unstable/singular/lost after closed orbit search")
    else O0 = mflw[1] end
  end

  -- create mflw
  local npar = #X0
  local mflw = table.new(npar*ndp, 50)
  local mdef = mapdef or {}
  local beta = beam.beta
  local x0   = par2vec(O0)
  local pt0  = x0[6]
  local damo, stat = 0

  -- precedence of initial conditions
  for j,dp in ipairs(deltap) do
    local dpt = dp2pt(dp, beta)
    local j1  = j == 1

    for i=1,npar do
      local X0i = X0[i]
      local dpt = X0i.beam and dp2pt(dp, X0i.beam.beta) or dpt
      local ii = (j-1)*npar+i
      local nc = j1 and X0i.nocopy

      x0[6] = pt0+dpt

      if is_beta0(X0i) then     -- damap created from beta0
        mflw[ii] = bet2map(X0i, damap(mdef[i] or mdef)):set0(x0,1) -- x0 added
        stat, damo = 'Aset', max(damo, mflw[ii].__td.mo)
      elseif is_damap(X0i) then -- damap (copy)
        mflw[ii] = (nc and X0i or X0i:copy()):set0(x0,1)           -- x0 added
        stat, damo = 'Mset', max(damo, mflw[ii].__td.mo)
      elseif is_iterable(X0i) then
        local x = x0 + par2vec(X0i)                                -- x0 added
        if mapdef then          -- damap created from particle
          mflw[ii] = damap(mdef[i] or mdef):set0(x)
          damo = max(damo, mflw[ii].__td.mo)
        else                    -- particle (copy)
          local p = nc and X0i or {x=0, px=0, y=0, py=0, t=0, pt=0}
          p.x, p.px, p.y, p.py, p.t, p.pt = x[1], x[2], x[3], x[4], x[5], x[6]
          mflw[ii] = p
        end
        stat = 'Xset'
      else
        errorf("invalid X0[%d] (particle, damap or beta0 expected)", i)
      end

      -- set (copy) extra information
      mflw[ii].id     = ii
--      mflw[ii].dp0    = dp
--      mflw[ii].dpt0   = dpt
      mflw[ii].status = X0i.status or stat -- preserve status (if any)
      mflw[ii].beam   = X0i.beam
      mflw[ii].nosave = X0i.nosave
    end
  end

  -- complete mflow
  mflw.sequ=sequ             -- current sequence
  mflw.beam=beam {}          -- current beam (clone)
  mflw.mtbl=mtbl             -- current mtable (nil if not save)
  mflw.sdir=dir              -- s-direction of tracking
  mflw.tdir=tdir             -- t-direction of tracking
  mflw.edir=edir             -- current element direction

  mflw.s0=s0                 -- initial s-position (i.e. offset)
  mflw.ds=0                  -- current element s-length (signed)
  mflw.spos=0                -- current element s-position (signed)
  mflw.eidx=eidx             -- current element index
  mflw.turn=1                -- current turn index
  mflw.nstep=nstep           -- current number of remaining steps

  mflw.npar=#mflw            -- number of tracked particles or damaps
  mflw.tpar=mflw.npar        -- total number of particles or damaps
  mflw.damo=damo             -- damap max order (0 means no DA)
  mflw.nslc=nslc             -- minimum number of slices for all elements
  mflw.nslice=nslice         -- slices for each element (num, fun or iterable)
  mflw.deltap=deltap         -- delta p
  mflw.implicit=implicit     -- slice also implicit elements (e.g. plots)
  mflw.fringe=fringe         -- compute fringe fields
  mflw.misalign=misalign     -- misalign element
  mflw.radiate=radiate       -- radiate at slices
  mflw.nphot=0               -- number of tracked photons

  mflw.save=save             -- save data
  mflw.observe=observe       -- save observed elements every n turns
  mflw.savesel=savesel       -- save selector

  mflw.atentry=atentry       -- action called when entering an element
  mflw.atslice=atslice       -- action called after each element slices (ataper)
  mflw.atexit=atexit         -- action called when exiting an element (atsave)
  mflw.ataper=ataper         -- action called when checking aperture
  mflw.atsave=atsave         -- action called when saving in mtable
  mflw.atdebug=atdebug       -- action called when debugging the maps

  mflw.method=method         -- default integration method
  mflw.model=model           -- default integration model
  mflw.secnmul=secnmul       -- default maximum number of multipoles for bends
  mflw.T=T                   -- cancel compensation for time of flight

  mflw.ptcmodel=ptcmodel     -- use PTC thick model

  mflw.mapdef=mapdef         -- save damap definitions (for info)
  mflw.savemap=savemap       -- save damaps

  mflw.info=self.info or 0   -- information level
  mflw.debug=self.debug or 0 -- debugging information level
  mflw.usrdef=self.usrdef    -- user defined data

  -- for debugging (user helper)
  mflw.show=mshow            -- show the mflow
  mflw.mdump=mdump           -- dump damaps
  mflw.xdump=xdump           -- dump one coordinate or TPSA

  -- methods to reset/change tracking
  mflw.reset_si=reset_si     -- reset  sequence iterator
  mflw.change_si=change_si   -- change sequence iterator

  -- for processing sequence elements by nstep
  mflw.__sitr={sequ=sequ, sdir=dir,             -- sequence information
               iter=iter, state=state,          -- sequence iterator state
               s0=s0, range=range, nturn=nturn} -- sequence iterator reset

  -- for processing elements (pre-alloc to avoid rehash)
  mflw.__edat = setmetatable({
    el=0, eh=0,              -- current element length and curvature
    tlt=0,                   -- current element tilt angle
    clw=0,                   -- current element cumulated length weights
    nsl=0,                   -- current element number of slices
    ks=0,                    -- solenoid strength
    volt=0, freq=0, lag=0,   -- rfcavity parameters

    algn=nil,                -- current element misalignment
    nmul=0,                  -- current element number of multipoles
    knl={[0]=0},             -- current element multipoles
    ksl={[0]=0},             -- current element multipoles skew
    npha=0,                  -- current element number of multiplole phases
    pnl={[0]=0},             -- current element multipoles phases
    psl={[0]=0},             -- current element multipoles shew phases
    snm=0,                   -- current element sector nmul max
    bfx={[0]=0},             -- current element curved field x coefficients
    bfy={[0]=0},             -- current element curved field y coefficients
  }, {__index=mflw})

  -- for processing (thin) subelements (pre-alloc to avoid rehash)
  mflw.__sdat = setmetatable({
    el=0, eh=0,              -- current subelement length and curvature
    tlt=0,                   -- current element tilt angle
    clw=0,                   -- current subelement cumulated length weights

    nmul=0,                  -- current subelement number of multipoles
    knl={[0]=0},             -- current subelement multipoles
    ksl={[0]=0},             -- current subelement multipoles skew
    npha=0,                  -- current subelement number of multiplole phases
    pnl={[0]=0},             -- current subelement multipoles phases
    psl={[0]=0},             -- current subelement multipoles shew phases
    snm=0,                   -- current subelement sector nmul max
    bfx={[0]=0},             -- current subelement curved field x coefficients
    bfy={[0]=0},             -- current subelement curved field y coefficients
  }, {__index=mflw})

  return mflw
end

-- track command --------------------------------------------------------------o

local _id = {} -- identity (unique)

local function is_dynmflow (a)
  return type(a) == "table" and a.__trck == _id
end

local function exec (self)
  local mflw

  -- retrieve or build mflw (and mtbl)
  if self.mflow then
    assert(self.mflow.__trck == _id, "invalid mflow (track mflow expected)")
    mflw       = self.mflow
    mflw.nstep = self.nstep or mflw.nstep  -- update volatile fields
    mflw.info  = self.info  or mflw.info
    mflw.debug = self.debug or mflw.debug
    assert(is_integer(mflw.nstep), "invalid number of steps (integer expected)")
  else
    mflw = make_mflow(self)
    mflw.__trck = _id
  end

  -- retrieve mtbl (if any)
  local mtbl in mflw

  -- check number of elements to track
  if mflw.nstep == 0 then return mtbl, mflw end

  local ie
  repeat
    -- retrieve information
    local s0, eidx, sequ, __sitr, __edat in mflw
    local iter, state in __sitr
    local ne, ret = #sequ
    ie = nil

    -- dynamic tracking
    for ei,elm,spos,ds in iter, state, eidx do
      mflw.eidx, mflw.spos, mflw.ds, __edat.clw = ei, s0+spos, ds, 0
      ret = elm:track(__edat)
      mflw.nstep = mflw.nstep-1

      -- check remaining number of elements and particles/damaps to track
      if ret or mflw.nstep == 0 or mflw.npar == 0 then ie = ei break end
      -- check for end of turn
      if ei == ne then mflw.turn = mflw.turn+1 end
    end
  until ret ~= "restart_si"

  -- store number of particles/damaps lost
  if mtbl then mtbl.lost = mflw.tpar - mflw.npar end

  return mtbl, mflw, ie
end

local track = command 'track' {
  sequence=nil,     -- sequence (required)                                (mflw)
  beam=nil,         -- beam (or sequence.beam, required)                  (mflw)
  range=nil,        -- range of tracking (or sequence.range)              (iter)
  dir=1,            -- s-direction of tracking (1 or -1)                  (mflw)

  s0=0,             -- initial s-position offset [m]                      (mflw)
  X0=0,             -- initial X coordinates (or damap, or beta block)    (mflw)
  O0=0,             -- initial O coordinates of reference orbit           (mflw)
  deltap=0,         -- initial deltap(s)                                  (mflw)

  nturn=1,          -- number of turns to track                           (iter)
  nstep=-1,         -- number of elements to track                        (iter)
  nslice=1,         -- number of slices (or weights) for each element     (mflw)
  mapdef=false,     -- setup for damap (or list of, true => {})           (mflw)
  method=2,         -- method or order for integration (1 to 8)           (mflw)
  model='TKT',      -- model for integration ('DKD' or 'TKT')             (mflw)
  secnmul=false,    -- maximun number of curved multipoles for bends      (mflw)
  ptcmodel=false,   -- use strict PTC thick model (override option)       (mflw)
  implicit=false,   -- slice implicit elements too (e.g. plots)           (mflw)
  misalign=false,   -- consider misalignment                              (mflw)
  fringe=true,      -- enable fringe fields (see element.flags.fringe)    (mflw)
  radiate=false,    -- radiate at slices "damp", "quantum", "photon"      (mflw)
  totalpath=false,  -- variable 't' is the totalpath                      (mflw)

  save=true,        -- create mtable and save results                     (mtbl)
  title=nil,        -- title of mtable (default seq.name)                 (mtbl)
  observe=1,        -- save only in observed elements (every n turns)     (mtbl)
  savesel=fnil,     -- save selector (predicate)                          (mtbl)
  savemap=false,    -- save damap in the in the column __map              (mflw)

  atentry=fnil,     -- action called when entering an element             (mflw)
  atslice=fnil,     -- action called after each element slices (ataper)   (mflw)
  atexit=fnil,      -- action called when exiting an element   (atsave)   (mflw)
  ataper=fnil,      -- action called when checking for aperture           (mflw)
  atsave=fnil,      -- action called when saving in mtable                (mflw)
  atdebug=fnil,     -- action called when debugging the maps              (mflw)

  info=nil,         -- information level (output on terminal)             (mflw)
  debug=nil,        -- debugging information level (output on terminal)   (mflw)
  usrdef=nil,       -- user defined data attached to the mflow            (mflw)

  mflow=nil,        -- mflow, exclusive with other attributes except nstep
  exec=exec,        -- command to execute upon children creation

  __attr = {        -- list of all setup attributes
    'sequence', 'beam', 'range', 'dir', 's0', 'X0', 'O0', 'deltap',
    'nturn', 'nstep', 'mapdef', 'method', 'model', 'secnmul', 'ptcmodel',
    'implicit', 'misalign', 'fringe', 'radiate', 'totalpath',
    'save', 'title', 'observe', 'savemap', 'info', 'debug', 'usrdef',
    noeval = {'nslice', 'savesel',
              'atentry', 'atslice', 'atexit', 'ataper', 'atsave', 'atdebug'},
  }
} :set_readonly()   -- reference track command is readonly

-- env ------------------------------------------------------------------------o

MAD.typeid.is_dynmflow = is_dynmflow

-- end ------------------------------------------------------------------------o
return { track = track }
