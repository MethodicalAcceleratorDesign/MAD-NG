--[=[
 o-----------------------------------------------------------------------------o
 |
 | Generic math module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Extends math module and provides object-oriented dispatch to math functions.

 o-----------------------------------------------------------------------------o
]=]

-- help -----------------------------------------------------------------------o

local __help = {}
__help.gmath = [=[
NAME
  gmath -- generic math functions and constants

SYNOPSIS
  eps, huge, tiny, inf, infi, nan, nani, pi, twopi, degrad, raddeg,  (constants)
  angle, abs, ceil, floor, round, frac, trunc, sqrt,         (generic functions)
  exp, log, log10, sin, cos, tan, asin, acos, atan, sinh, cosh, tanh,
  acosh, asinh, atanh, erf, erfc, erfi, erfcx, tgamma, lgamma,
  carg, real, imag, conj, proj, rect, polar,         (generic complex functions)
  unm, add, sub, mul, div, mod, pow,                    (operators as functions)
  atan2, hypot, hypot3, ldexp, frexp, fpow, fmod, modf, max,    (math functions)
  min, sign, step, sinc, deg, rad,
  randomseed, random, randf, randn, randp, gauss, tgauss, poisson.

DESCRIPTION
  The module gmath provides generic functions that wraps common math functions
  with object-oriented dispatch for non-numbers. It also adds few useful
  constants, functions and generic functions. The generic function
  angle(x,y) is equivalent to atan2(y,x) (for numbers only). The generic
  functions trunc and frac are equivalent to first(modf(x)) and second(modf(x))
  respectively (for numbers only). All operators have binary generic functions
  wrappers except unm (unary minus).

RETURN VALUES
  See ISO/IEC 9899:1999 (and ISO/IEC 9899:2011).

ERRORS
  See ISO/IEC 9899:1999 (and ISO/IEC 9899:2011).

SEE ALSO
  math, complex.
]=]

__help['Trigonometric mnemonics'] = [=[
Trigonometric mnemonics:
------------------------

deg      0      30     45     60     90
rad      0     pi/6   pi/4   pi/3   pi/2
sin     √0/2   √1/2   √2/2   √3/2   √4/2
cos     √4/2   √3/2   √2/2   √1/2   √0/2   sin(90 - angle)
tan     0/√3   1/√3    1     √3/1   √3/0   sin/cos

45   : square 1-1  , diag.  √2  , hypot 1 -> sides √2/2
30-60: equil. 1-1-1, height √3/2, hypot 1 -> sides 1/2 and √3/2
]=]

__help['IEEE:IEC 60559 floating-point compliance'] = [=[
Discrepancies:
  max(0  ,  nan)    expected: 0    actual: nan
  max(0,nan,nan)    expected: 0    actual: nan
  max(nan,0,nan)    expected: 0    actual: nan
  min(0  ,  nan)    expected: 0    actual: nan
  min(nan,0,nan)    expected: 0    actual: nan
  min(0,nan,nan)    expected: 0    actual: nan
  1/ceil (-0)       expected:-inf  jit: inf
  1/floor(-0)       expected:-inf  jit: inf (rand)
  1/round(-0)       expected:-inf  jit: inf (rand)
  1/fmod (-0, 0.5)  expected:-inf  jit: inf
  1/fmod (-0,-0.5)  expected:-inf  jit: inf
  1/fmod (-0, 1  )  expected:-inf  jit: inf
  1/fmod (-0,-1  )  expected:-inf  jit: inf
  1/fmod (-0, 10 )  expected:-inf  jit: inf
  1/fmod (-0,-10 )  expected:-inf  jit: inf

Unexpected behavior:
  frac( inf) expected: 0    interpreter: nan  jit: 0
  frac(-inf) expected: 0    interpreter: nan  jit: 0
  lgamma(-0) expected:-inf  linux: inf
  1/rect(-0) expected:-inf  jit:   inf (rand)
]=]

-- locals ---------------------------------------------------------------------o

local abs, acos, asin, atan, atan2, ceil, cos, cosh, deg, exp, floor, fmod,
      frexp, ldexp, log, log10, max, min, modf, pow, rad, random,
      randomseed, sin, sinh, sqrt, tan, tanh, pi in math

local _C in MAD
local second in MAD.gfunc
local is_nil, is_number in MAD.typeid

local complex = require'ffi'.typeof'complex'

-- t={}; for k in pairs(math) do t[#t+1]=k end;
-- table.sort(t); print(table.concat(t,', '))

-- implementation -------------------------------------------------------------o

local gmath
gmath = {

  -- constants
  pi     = math.pi,
  inf    = 1/0,
  nan    = 0/0,
  eps    = 2.2204460492503130e-16,
  huge   = 1.7976931348623158e+308,
  tiny   = 2.2250738585072012e-308,
  infi   = complex(0,1/0),
  nani   = complex(0,0/0),
  twopi  = 2*math.pi,
  degrad = 180/math.pi,
  raddeg = math.pi/180,

  -- generic functions
  angle = \x,y -> is_number(x) and atan2(y,x) or x:angle(y),

  ceil  = \x -> is_number(x) and ceil (x)        or x:ceil (),
  floor = \x -> is_number(x) and floor(x)        or x:floor(),
  frac  = \x -> is_number(x) and second(modf(x)) or x:frac (),
  trunc = \x -> is_number(x) and modf(x)         or x:trunc(),
  round = \x -> is_number(x) and (x>0 and floor(x+0.5) or x<0 and ceil(x-0.5) or x) or x:round(),

  abs   = \x -> is_number(x) and abs  (x) or x:abs  (),
  sqrt  = \x -> is_number(x) and sqrt (x) or x:sqrt (),
  exp   = \x -> is_number(x) and exp  (x) or x:exp  (),
  log   = \x -> is_number(x) and log  (x) or x:log  (),
  log10 = \x -> is_number(x) and log10(x) or x:log10(),

  sin   = \x -> is_number(x) and sin  (x) or x:sin  (),
  cos   = \x -> is_number(x) and cos  (x) or x:cos  (),
  tan   = \x -> is_number(x) and tan  (x) or x:tan  (),
  sinh  = \x -> is_number(x) and sinh (x) or x:sinh (),
  cosh  = \x -> is_number(x) and cosh (x) or x:cosh (),
  tanh  = \x -> is_number(x) and tanh (x) or x:tanh (),

  asin  = \x -> is_number(x) and asin (x) or x:asin (),
  acos  = \x -> is_number(x) and acos (x) or x:acos (),
  atan  = \x -> is_number(x) and atan (x) or x:atan (),
  asinh = \x -> is_number(x) and _C.asinh(x) or x:asinh(),
  acosh = \x -> is_number(x) and _C.acosh(x) or x:acosh(),
  atanh = \x -> is_number(x) and _C.atanh(x) or x:atanh(),

  erf   = \x,tol -> is_number(x) and _C.Faddeeva_erf_re  (x) or x:erf  (tol), -- _C.erf(x)
  erfc  = \x,tol -> is_number(x) and _C.Faddeeva_erfc_re (x) or x:erfc (tol),
  erfi  = \x,tol -> is_number(x) and _C.Faddeeva_erfi_re (x) or x:erfci(tol),
  erfcx = \x,tol -> is_number(x) and _C.Faddeeva_erfcx_re(x) or x:erfcx(tol),

  tgamma= \x -> is_number(x) and _C.tgamma(x) or x:tgamma(),
  lgamma= \x -> is_number(x) and _C.lgamma(x) or x:lgamma(),

  -- complex generic functions
  carg  = \x -> is_number(x) and (x>=0 and 0 or x<0 and pi or x) or x:carg(),
  real  = \x -> is_number(x) and x                               or x:real(),
  imag  = \x -> is_number(x) and 0                               or x:imag(),
  conj  = \x -> is_number(x) and x                               or x:conj(),
  proj  = \x -> is_number(x) and (x+0i):proj()                   or x:proj(),
  rect  = \x -> is_number(x) and x                               or x:rect(),
  polar = \x -> is_number(x) and abs(x)+gmath.carg(x)*1i         or x:polar(),

  -- non-generic functions
  hypot = _C.hypot,
  atan2 = atan2,
  ldexp = ldexp,
  frexp = frexp,
  fpow  = pow,
  fmod  = fmod,
  modf  = modf,
  max   = max,
  min   = min,
  deg   = deg,
  rad   = rad,

  sign  = \x -> x>=0 and 1 or x<0 and -1 or x,
  step  = \x -> x>=0 and 1 or x<0 and  0 or x,
  sinc  = \x -> abs(x)<1e-10 and 1 or sin(x)/x,

  hypot3 = \x,y,z -> _C.hypot(_C.hypot(x,y),z),

}

-- random number generators ---------------------------------------------------o

local randn_spare

gmath.randomseed = \x => randn_spare=nil ; randomseed(x) end

-- LuaJIT Tausworthe PRNG with period 2^223
-- generates 52 pseudo-random bits in [0,1)
gmath.random = random

-- Box-Muller transformation (Marsaglia polar form)
-- generates pseudo-random gaussian numbers
local function randn ()
  local x1, x2, w
  if randn_spare then
    x1, randn_spare = randn_spare, nil
    return x1
  end
  repeat
    x1 = 2*random() - 1
    x2 = 2*random() - 1
    w = x1*x1 + x2*x2
  until w < 1
  w = sqrt( -2 * log(w) / w )
  randn_spare = x2*w
  return x1*w
end

-- Inverse transform sampling (for 'small' lamdba in O(lambda))
-- Discrete Univariate Distributions, L. Devroye, p505
local function randp (l)
  assert(is_number(l) and l > 0 and l < 30,
         "invalid argument #1 (0 < lambda < 30 expected)")
  local x, p = 0, exp(-l)
  local s, u = p, random()
  while u > s do
    x = x + 1
    p = p * l/x
    s = s + p
  end
  return x
end

local function tgauss (c_)
  if is_nil(c_) then return randn() end
  local c, r = abs(c_)
  repeat r = randn() until abs(r) <= c
  return r
end

gmath.ranf    = random
gmath.randf   = random
gmath.randn   = randn
gmath.randp   = randp
gmath.gauss   = randn
gmath.tgauss  = tgauss
gmath.poisson = randp

-- end ------------------------------------------------------------------------o
return {
  gmath  = gmath,
  __help = __help,
}
