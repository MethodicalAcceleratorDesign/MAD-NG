--[=[
 o-----------------------------------------------------------------------------o
 |
 | Beam module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide beam object

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local object, option, tostring                                   in MAD
local abs, sqrt, hypot                                           in MAD.gmath
local setkeys, countkeys, fprintf                                in MAD.utility
local is_object, is_nil, is_boolean, is_string, is_table,
      is_function, is_positive, is_zpositive, is_integer,
      is_mappable                                                in MAD.typeid
local clight, hbar, qelect, emass, pmass, nmass, mumass, deumass,
      sqrt1_3 in MAD.constant

local GeV_c    = 1e9/clight
local krad_GeV = 1.0e-16*qelect*clight^2 -- 1e-9/(4pi.epsilon0) qelect
local kpht_GeV = 2.5e-16*qelect*clight*sqrt1_3/hbar -- photon emission

local update_skip = setkeys {
  'particle', 'mass', 'charge', 'spin'
}

local update_list = setkeys {
  'emrad', 'aphot',
  'energy', 'pc', 'beta', 'gamma', 'betgam', 'brho',
  'ex', 'ey', 'et', 'exn', 'eyn', 'etn',
  'nbunch', 'npart', 'sigt', 'sige',
}

local assert, getmetatable, setmetatable, ipairs, pairs, tostring, io =
      assert, getmetatable, setmetatable, ipairs, pairs, tostring, io

-- identity -------------------------------------------------------------------o

local _id = {} -- identity

local function is_beam (a)
  local mt = getmetatable(a)
  return mt ~= nil and mt.__beam == _id
end

-- particles database ---------------------------------------------------------o

local particledb = {}

local function newparticle (particle, mass, charge, spin)
  spin = spin or 0
  local p = particledb[particle]
  if p and p.mass == mass and p.charge == charge and p.spin == spin then
    return -- avoid to duplicate existing particles
  end
  assert(is_nil(p)          , "particle already in database")
  assert(is_string(particle), "invalid particle (string expected)")
  assert(is_zpositive(mass) , "invalid mass (positive number or zero expected)")
  assert(is_integer(charge) , "invalid charge (integer expected)")
  assert(is_integer(2*spin) and spin >= 0 and spin <= 2,
                              "invalid spin (positive half integer expected)")
  particledb[#particledb+1] = particle
  particledb[particle] = { name=particle, mass=mass, charge=charge, spin=spin }
end

local function new_particle (self, part_, mass_, chrg_, spin_)
  if not is_beam(self) then
    part_, mass_, chrg_, spin_, self = self, part_, mass_, chrg_ -- right shift
  end
  if is_table(part_) then
    local particle, mass, charge, spin in part_
    newparticle(particle, mass, charge, spin)
  else
    newparticle(part_, mass_, chrg_, spin_)
  end
  return self
end

local function showdb (self, file)
  if not is_beam(self) and is_nil(file) then
    file, self = self, nil -- right shift
  end
  file = file or io.stdout
  for _,k in ipairs(particledb) do
    local mass, charge, spin in particledb[k]
    fprintf(file,"%-12s: mass = %-17s [GeV], charge = % -4d, spin = % -.1g\n",
                      k,         mass,               charge,          spin)
  end
  return self
end

-- populate particle database
new_particle{particle = 'photon'      , mass = 0      , charge =  0, spin = 1  }
new_particle{particle = 'electron'    , mass = emass  , charge = -1, spin = 1/2}
new_particle{particle = 'positron'    , mass = emass  , charge =  1, spin = 1/2}
new_particle{particle = 'proton'      , mass = pmass  , charge =  1, spin = 1/2}
new_particle{particle = 'antiproton'  , mass = pmass  , charge = -1, spin = 1/2}
new_particle{particle = 'neutron'     , mass = nmass  , charge =  0, spin = 1/2}
new_particle{particle = 'antineutron' , mass = nmass  , charge =  0, spin = 1/2}
new_particle{particle = 'ion'         , mass = nmass  , charge =  1, spin = 1/2}
new_particle{particle = 'muon'        , mass = mumass , charge = -1, spin = 1/2}
new_particle{particle = 'antimuon'    , mass = mumass , charge =  1, spin = 1/2}
new_particle{particle = 'deuteron'    , mass = deumass, charge =  1, spin = 1  }
new_particle{particle = 'antideuteron', mass = deumass, charge = -1, spin = 1  }
-- aliases
new_particle{particle = 'negmuon'     , mass = mumass , charge = -1, spin = 1/2}
new_particle{particle = 'posmuon'     , mass = mumass , charge =  1, spin = 1/2}

-- implementation -------------------------------------------------------------o

local beam = object 'beam' {
  -- particle
  particle  = 'positron',                                  --               [RW]
  mass      = particledb.positron.mass,                    -- GeV (m.c^2)   [RO]
  charge    = particledb.positron.charge,                  -- +/- n qelect  [RO]
  spin      = particledb.positron.spin,                    -- +/- n/2       [RO]
  -- electromagnetic radius, average photon emission per radian
  emrad     = \s -> krad_GeV * abs(s.charge)/s.mass,       -- m             [RO]
  aphot     = \s -> kpht_GeV * abs(s.charge)*s.betgam,     -- rad^-1        [RO]
  -- energy
  energy    = 1,                                           -- GeV           [RW]
  pc        = \s -> sqrt(s.pc2),                           -- GeV           [RU]
  pc2       = \s -> ((s.energy-s.mass)*(s.energy+s.mass)), -- GeV           [RU]
  beta      = \s -> sqrt(s.beta2),                         --               [RU]
  beta2     = \s -> ((1-s.mass/s.energy)*(1+s.mass/s.energy)), --           [RU]
  gamma     = \s -> s.energy/s.mass,                       --               [RU]
  betgam    = \s -> sqrt(s.betgam2),                       --               [RU]
  betgam2   = \s -> ((s.gamma-1)*(s.gamma+1)),             --               [RU]
  brho      = \s -> GeV_c * s.pc/abs(s.charge),            -- T.m           [RU]
  -- emittance
  ex        = 1,                                           -- m             [RW]
  ey        = 1,                                           -- m             [RW]
  et        = 1e-3,                                        -- m             [RW]
  exn       = \s -> s.betgam*s.ex,                         -- m             [RU]
  eyn       = \s -> s.betgam*s.ey,                         -- m             [RU]
  etn       = \s -> s.betgam*s.et,                         -- m             [RU]
  -- bunch
  nbunch    = 0,                                           --               [RW]
  npart     = 0,                                           -- per bunch     [RW]
  sigt      = 1,                                           -- m             [RW]
  sige      = 1e-3,                                        -- GeV           [RW]
}

local newidx = getmetatable(beam).__newindex         -- forward to parent
local eval   = \s,v -> is_function(v) and v(s) or v  -- for proper evaluation
local chg    = \c   -> option.nocharge and abs(c) or c

local update = setmetatable({
  -- particle
  particle = \s,_,v => v = eval(s,v)
                       assert(particledb[v],"unknown particle")
                       newidx(s,'particle',v)
                       newidx(s,'mass'    ,    particledb[eval(s,v)].mass  )
                       newidx(s,'charge'  ,chg(particledb[eval(s,v)].charge))
                       newidx(s,'spin'    ,    particledb[eval(s,v)].spin  ) end,
  mass   := error(  "mass is readonly, define a new particle"),
  charge := error("charge is readonly, define a new particle"),
  spin   := error(  "spin is readonly, define a new particle"),
  -- electromagnetic radius, average photon emission per radian
  emrad  := error( "emrad is readonly, define a new particle"),
  aphot  := error( "aphot is readonly, define a new particle"),
  -- energy
  energy = \s,_,v => v = eval(s,v)
                     assert(v > s.mass, "invalid energy (mass < energy expected)")
                     newidx(s, 'energy', v) end,
  pc     = \s,_,v => v = eval(s,v)
                     assert(is_positive(v), "invalid pc (pc >0 expected)")
                     newidx(s, 'energy', hypot(v, s.mass)) end,
  beta   = \s,_,v => v = eval(s,v)
                     assert(is_positive(v) and v<0.9, "inaccurate energy from beta (beta <0.9 accepted)")
                     newidx(s, 'energy', sqrt(s.mass^2 / ((1-v)*(1+v)))) end,
  gamma  = \s,_,v => v = eval(s,v)
                     assert(is_positive(v) and v>1, "inaccurate energy from gamma (gamma >1 accepted)")
                     newidx(s, 'energy', v * s.mass) end,
  betgam = \s,_,v => v = eval(s,v)
                     assert(is_positive(v) and v>0.1, "inaccurate energy from  betgam (betgam >0.1 accepted)")
                     newidx(s, 'energy', sqrt((v^2+1) * s.mass^2)) end,
  brho   = \s,_,v => v = eval(s,v)
                     assert(is_positive(v), "invalid Brho (Brho >0 expected)")
                     newidx(s, 'energy', hypot(v*abs(s.charge)/GeV_c, s.mass)) end,
  -- emittance (better to store e or en or both?)
  ex     = \s,_,v => v=eval(s,v) assert(is_positive(v),"invalid ex <= 0" ) newidx(s,'ex',v) end,
  ey     = \s,_,v => v=eval(s,v) assert(is_positive(v),"invalid ey <= 0" ) newidx(s,'ey',v) end,
  et     = \s,_,v => v=eval(s,v) assert(is_positive(v),"invalid et <= 0" ) newidx(s,'et',v) end,
  exn    = \s,_,v => v=eval(s,v) assert(is_positive(v),"invalid exn <= 0") newidx(s,'ex',v/s.betgam) end,
  eyn    = \s,_,v => v=eval(s,v) assert(is_positive(v),"invalid eyn <= 0") newidx(s,'ey',v/s.betgam) end,
  etn    = \s,_,v => v=eval(s,v) assert(is_positive(v),"invalid etn <= 0") newidx(s,'et',v/s.betgam) end,
  -- bunch
  nbunch = \s,k,v => v=eval(s,v) assert(is_positive(v),"invalid nbunch <= 0") newidx(s,k,v) end,
  npart  = \s,k,v => v=eval(s,v) assert(is_positive(v),"invalid npart <= 0" ) newidx(s,k,v) end,
  sigt   = \s,k,v => v=eval(s,v) assert(is_positive(v),"invalid sigt <= 0"  ) newidx(s,k,v) end,
  sige   = \s,k,v => v=eval(s,v) assert(is_positive(v),"invalid sige <= 0"  ) newidx(s,k,v) end,
},-- default update (no check)
{ __index := newidx })

local function newindex (self, key, val)
  update[key](self,key,val)
end

local function init (self)
  local particle, mass = self:raw_get'particle', self:raw_get'mass'
  if mass then -- include new particle definition
    newparticle(particle, mass, self:raw_get'charge', self:raw_get'spin')
  end
  if particle then newindex(self, 'particle', particle) end
  for _,k in ipairs(update_list) do
    local v = self:raw_get(k)
    if not is_nil(v) then newindex(self, k, v) end
  end
  return self
end

local function setvar (self, set)
  assert(is_beam(self)   , "invalid argument #1 (beam expected)")
  assert(is_mappable(set), "invalid argument #2 (mappable expected)")
  local particle, mass in set
  if mass then -- include new particle definition
    newparticle(particle, mass, set.charge, set.spin)
  end
  if particle then newindex(self, 'particle', particle) end
  for k,v in pairs(set) do
    if is_nil(update_skip[k]) then newindex(self, k, v) end
  end
  return self
end

do -- sanity checks (beam:25, update:25-3, field_lst:25-7)
  local bn, un, ln = countkeys(beam), countkeys(update), #update_list
  -- don't count 'name' and 'parent'
  if MAD.option.objmodel == 'objalt' then bn = bn - 2 end
--print(bn, un, ln)
  assert(bn == 25, "inconsistency detected in beam module")
  assert(un == 22, "inconsistency detected in beam module")
  assert(ln == 18, "inconsistency detected in beam module")
end

-- members --------------------------------------------------------------------o

beam :set_methods {
  new_particle = new_particle,
  showdb       = showdb,

  -- overridden
  setvar        = setvar,
  set_variables = setvar,

} :set_metamethods {
  __beam     = _id,
  __init     = init,
  __newindex = newindex,

} :set_readonly()

-- env ------------------------------------------------------------------------o

MAD.typeid.is_beam = is_beam

-- end ------------------------------------------------------------------------o
return { beam = beam }
