--[=[
 o-----------------------------------------------------------------------------o
 |
 | Aperture module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide a catalog of aperture models used to check particle positions
    during tracking (i.e. track). maps have the following calling convention:
      apermap(elm, map, len_weight)
  - Provide an aperture margin estimate n1 (TODO)

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- locals ---------------------------------------------------------------------o

local abs, min, max, sin, cos in math

local _C, vector           in MAD
local is_damap, is_matrix  in MAD.typeid
local ftrue                in MAD.gfunc
local errorf, printf       in MAD.utility
local minang               in MAD.constant

local getmetatable = getmetatable

-- aperture models ------------------------------------------------------------o

local apmodel = {
  square     = \x,y,ap -> x < ap[1] and y < ap[1],
  rectangle  = \x,y,ap -> x < ap[1] and y < ap[2],

  circle     = \x,y,ap -> x^2 + y^2 < ap[1]^2,
  ellipse    = \x,y,ap -> ((x/ap[1])^2 + (y/ap[2])^2 < 1),

  rectcircle = \x,y,ap -> x < ap[1] and y < ap[2] and x^2 + y^2 < ap[3]^2,
  rectellipse= \x,y,ap -> x < ap[1] and y < ap[2] and (x/ap[3])^2 + (y/ap[4])^2 < 1,

  racetrack  = \x,y,ap -> x < ap[1] and y < ap[2] and (x < ap[1]-ap[3] or y < ap[2]-ap[4] or
                          ((x-(ap[1]-ap[3]))/ap[3])^2 + ((y-(ap[2]-ap[4]))/ap[4])^2 < 1),

  octagon    = \x,y,ap -> x < ap[1] and y < ap[2] and
                          y < (x-(ap[1]-ap[3]))*(ap[4] or ap[3])/ap[3] + ap[2],

  polygon    = \x,y,vx,vy -> _C.mad_pol_inside(x,y, vx._dat, vy._dat, #vx),
  bbox       = \x,px,y,py,ap -> x < ap[1] and px < ap[2] and
                                y < ap[3] and py < ap[4],
}

-- aperture check -------------------------------------------------------------o

local function lostpar (elm, mflw, i, islc)
  local npar, clw, spos, ds, turn, info, debug in mflw
  local lw = islc<0 and -1-islc or clw
  local s = spos+ds*lw
  local m = mflw[i]

  if info >= 1 then
    local name in elm
    local x, px, y, py, t, pt, beam in m
    local pnam = ''

    if beam and beam.particle ~= mflw.beam.particle then
      if beam.particle ==  "photon"
      then pnam = string.format(" (photon@%.3fm)", m.s0)
      else pnam = ' ('..beam.particle..')'
      end
    end

    if is_damap(m) then
      x, px, y, py, t, pt =
      x:get0(), px:get0(), y:get0(), py:get0(), t:get0(), pt:get0()
    end

    printf("lost: particle #%d%s in %s at %.3f m for turn #%d\n",
                          m.id,pnam,name,   s,            turn)
    printf("lost: x=% -.2e, px=% -.2e, y=% -.2e, py=% -.2e, t=% -.2e, pt=% -.2e",
            x,        px,        y,        py,        t,        pt)

    if debug >= 1 then
      printf(", T=%s, etot=%s", tostring(mflw.T), tostring(elm.totalpath))
    end
    io.write("\n")
  end

  -- information saved in lost particle/damap
  m.spos, m.turn, m.status = s, turn, "lost"

  -- take care of mflw wrappers (e.g. __edat and __sdat in track)
  m = assert(getmetatable(mflw).__index, "corrupted mflow wrapper (unexpected)")

  -- check for lost photon
  if m.tphot and m[i].beam and m[i].beam.particle == "photon" then
    m.nphot = m.nphot-1
  end

  -- swap with last tracked particle/damap
  m[i], m[m.npar], m.npar = m[m.npar], m[i], m.npar-1
end

local function checkbbox (elm, mflw, lw, islc)
  local ap = elm.aperture

  local i = 1
  while i <= mflw.npar do
    local x, px, y, py, t, pt in mflw[i]

    if is_damap(mflw[i]) then
      x, px, y, py, t, pt =
      x:get0(), px:get0(), y:get0(), py:get0(), t:get0(), pt:get0()
    end

    if apmodel.bbox(abs(x),abs(px),abs(y),abs(py),ap) then
      i = i + 1
    else
      lostpar(elm, mflw, i, islc)
    end
  end
  return true
end

local function checkaper (chkap)
  return function (elm, mflw, _, islc)
    local ap = elm.aperture
    local tdir in mflw
    local tilt, xoff, yoff in ap

    local ang, dx, dy = -(tilt or 0)*tdir, (xoff or 0)*tdir, (yoff or 0)*tdir
    local ca, sa = 1, 0
    if abs(ang) >= minang then ca, sa = cos(ang), sin(ang) end

    local i = 1
    while i <= mflw.npar do
      local x, y in mflw[i]

      if is_damap(mflw[i]) then x, y = x:get0(), y:get0() end

      -- move to aperture frame top right sector
      local nx = abs(ca*x + sa*y - dx)
      local ny = abs(ca*y - sa*x - dy)

      if chkap(nx,ny,ap) then
        i = i + 1
      else
        lostpar(elm, mflw, i, islc)
      end
    end
    return true
  end
end

local function checkpoly (elm, mflw, _, islc)
  local ap = elm.aperture
  local tdir in mflw
  local tilt, xoff, yoff in ap
  local maper = ap.maper and apmodel[ap.maper.kind] or ftrue

  local ang, dx, dy = -(tilt or 0)*tdir, (xoff or 0)*tdir, (yoff or 0)*tdir
  local ca, sa = 1, 0
  if abs(ang) >= minang then ca, sa = cos(ang), sin(ang) end
  if not is_matrix(ap.vx) then ap.vx = vector(ap.vx) end
  if not is_matrix(ap.vy) then ap.vy = vector(ap.vy) end

  local vx, vy in ap
  assert(#vx == #vy, "incompatible x vs y polygon size")
  assert(vx[1] == vx[#vx] and vy[1] == vy[#vy], "polygon is not closed")

  local i = 1
  while i <= mflw.npar do
    local x, y in mflw[i]

    if is_damap(mflw[i]) then x, y = x:get0(), y:get0() end

    -- move to aperture frame
    local nx = ca*x + sa*y - dx
    local ny = ca*y - sa*x - dy

    if maper(abs(nx),abs(ny),ap.maper) or apmodel.polygon(nx,ny,vx,vy) then
      i = i + 1
    else
      lostpar(elm, mflw, i, islc)
    end
  end
  return true
end

local apcheck = setmetatable({
  square      = checkaper(apmodel.square     ),
  rectangle   = checkaper(apmodel.rectangle  ),
  circle      = checkaper(apmodel.circle     ),
  ellipse     = checkaper(apmodel.ellipse    ),
  rectcircle  = checkaper(apmodel.rectcircle ),
  rectellipse = checkaper(apmodel.rectellipse),
  racetrack   = checkaper(apmodel.racetrack  ),
  octagon     = checkaper(apmodel.octagon    ),
  polygon     = checkpoly,
  bbox        = checkbbox,
}, { __index  = \_,k -> errorf("unknown kind of aperture '%s'", tostring(k))
})

for k,v in pairs(apcheck) do M[k] = v end

function M.apercheck (elm, mflw, lw, islc)
--print(elm.name, elm.apertype, elm.aperture)
  return apcheck[elm.apertype](elm, mflw, lw, islc)
end

function M.apersave (mflw)
  error("NYI")
  -- TODO: record lost particles in a mtable
  return mtbl
end

-- end ------------------------------------------------------------------------o
return { aperture = M }
