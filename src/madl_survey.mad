--[=[
 o-----------------------------------------------------------------------------o
 |
 | Survey module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

-- help -----------------------------------------------------------------------o

local __help = {}
__help.survey = [[
NAME
  survey -- Survey

SYNOPSIS
  TODO

DESCRIPTION
  The module survey provides...

RETURN VALUES
  The survey command

SEE ALSO
  element, sequence, track
]]

-- locals ---------------------------------------------------------------------o

local abs, sin, cos            in math
local vector, matrix, tostring in MAD
local is_nil                   in MAD.typeid
local minlen, minang           in MAD.constant

-- implementation -------------------------------------------------------------o

local function invalid_survey (elem, m)
  error(string.format("invalid element %s of kind %s with length %s",
                      elem.name, elem.kind, l and tostring(l) or 0))
end

-- Update adjusted angles

local function update_angle (m)
  local A in m
  local th, phi, psi = A[1], A[2], A[3]
  th, phi, psi = m.W:torotmad(th, phi, psi) -- retrieve angles
  A:fill{th, phi, psi}                      -- update   angles
end

-- drift

local function drift_surv (m, l)
  m.R :fill {0, 0, l}
  m.V = m.W * m.R + m.V
end

-- maps

local function srot_survey(elem, m) -- Rz(angle)
  m.S :rotz(elem.angle*m.dir)
  m.W = m.W * m.S
  return 0
end

local function yrot_survey(elem, m) -- Ry(-angle)
  m.S :roty(-elem.angle*m.dir)
  m.W = m.W * m.S
  return 0
end

local function xrot_survey(elem, m) -- Rx(angle)
  m.S :rotx(elem.angle*m.dir)
  m.W = m.W * m.S
  return 0
end

local function tran_survey(elem, m)
  local dx, dy, ds in elem
  local dir in m

  m.R :fill {dx*dir, dy, ds}
  m.V = m.W * m.R + m.V
  return ds
end

local function patch_survey(elem, m) -- Rx(th).Ry(-phi).Rz(psi)
  local dx, dy, ds, theta, phi, psi in elem
  local dir in m

  m.R :fill {dx*dir, dy, ds}
  m.S :rotmad(theta*dir, phi*dir, psi*dir)

  m.V = m.W * m.R + m.V
  m.W = m.W * m.S
  return ds
end

-- frame kinds ----------------------------------------------------------------o

local function thin_survey (elem, m) -- e.g. multipole
  local l, angle, tilt in elem
  local dir in m

  if l >= minlen then
    error("invalid thin element length (too long): " .. elem.name)
  end

  if abs(angle) >= minang then
    m.S:roty(-angle*dir)

    if abs(tilt) >= minang then
      m.T :rotz(tilt*dir)
      m.S = m.T * m.S * m.T:t()
    end

    m.W = m.W * m.S
  end
  return l
end

local function strait_survey (elem, m) -- e.g. rbend, quad
  local l, angle in elem

  if abs(angle) >= minang then
    error("invalid strait element angle (too curved): " .. elem.name)
  end

  if l >= minlen then
    drift_surv(m, l)
  end
  return l
end

local function curved_survey (elem, m) -- e.g. sbend
  local l, angle, tilt in elem
  local dir in m
  local rho

  if l < minlen then
    error("invalid curved element length (too short): " .. elem.name)
  elseif abs(angle) < minang then
    error("invalid curved element angle (too strait): " .. elem.name)
  end

  angle = angle*dir
  rho   = l/angle
  m.R :fill {rho*(cos(angle)-1), 0, rho*sin(angle)}
  m.S :roty(-angle)

  if abs(tilt) >= minang then
    m.T :rotz(tilt*dir)
    m.R = m.T * m.R
    m.S = m.T * m.S * m.T:t()
  end

  m.V = m.W * m.R + m.V
  m.W = m.W * m.S
  return l
end

-- load survey maps into elements ---------------------------------------------o

local element in MAD

element.Element       :set_function { survey = invalid_survey }
element.thin_element  :set_function { survey =    thin_survey }
element.drift_element :set_function { survey =  strait_survey }
element.strait_element:set_function { survey =  strait_survey }
element.curved_element:set_function { survey =  curved_survey }

element.patch         :set_function { survey =   patch_survey }
element.srotation     :set_function { survey =    srot_survey }
element.xrotation     :set_function { survey =    xrot_survey }
element.yrotation     :set_function { survey =    yrot_survey }
element.translate     :set_function { survey =    tran_survey }

-- survey command -------------------------------------------------------------o

local mtable, Command in MAD

local _surv = {}

local function make_table (self, length)
  local sequence, drift, save in self
  if save == 'none' then return nil end
  local name, direction in sequence
  local nrow = (drift == true and 2 or 1) * length

  return mtable 'survey' {
    type='survey', title=name, direction=direction,
    {'name'}, 'kind', 's', 'l', 'angle', 'tilt',
    'x', 'y', 'z', 'theta', 'phi', 'psi', 'globaltilt',
    [_surv]=_surv,
  } :reserve(nrow)
end

local function fill_table (tbl, name, kind, m, s, l, ang, til)
  local V, A, dir in m
  local x, y, z      = V[1], V[2], V[3]
  local th, phi, psi = A[1], A[2], A[3]
  ang = ang and ang ~= 0 and ang*dir or 0
  til = til and til ~= 0 and til*dir or 0
  -- keep order!
  tbl = tbl + { name, kind, s, l, ang, til, x, y, z, th, phi, psi, psi+til }
end

local function make_map (self, start)
  local x, y, z, theta, phi, psi, X0, A0, sequence in self

  x     = x     or X0.x     or X0[1]
  y     = y     or X0.y     or X0[2]
  z     = z     or X0.z     or X0[3]
  theta = theta or A0.theta or A0[1]
  phi   = phi   or A0.phi   or A0[2]
  psi   = psi   or A0.psi   or A0[3]

  local s_pos, direction in sequence
  local V = vector(3):fill{x,y,z}
  local W = matrix(3):rotmad(theta, phi, psi)
  local A = vector(3):fill{theta, phi, psi}
  local R, S, T = vector(3), matrix(3), matrix(3)

  return { A=A, V=V, W=W, R=R, S=S, T=T,
           dir=direction,
           s_ini=s_pos[start], s_end=s_pos[start], ndrift=-1, [_surv]=_surv }
end

-- survey command exec
-- survey { sequence=seq, X0={x,y,z}, A0={theta,phi,psi},
--          range={start,stop}, save='exit'|'none',
--          drift=logical, table=tbl, map=map }
-- return the table and the map
-- alternate initial conditions (higher precedence):
-- x=x, y=y, z=z, theta=theta, phi=phi, psi=psi
-- X0={x=x, y=y, z=z}, A0={theta=theta, phi=phi, psi=psi}

local function exec (self)
  local seq = assert(self.sequence, "missing sequence")
  assert(seq.kind == 'sequence' and seq.is_sequence == true, "invalid sequence")

  local start, stop = seq:range_index (self.range)
  local tbl = self.table or make_table(self, stop-start+1)
  local map = self.map   or make_map  (self, start)
  assert(map[_surv] == _surv, "invalid survey map"  )
  assert(is_nil(tbl) or tbl[_surv] == _surv, "invalid survey table")

  local s_ini, s_end, ndrift in map
  local drift, save in self
  local s_pos in seq

  drift = drift == true and save or 'none'

  -- affine tracking
  for i=start,stop do
    local elem, s = seq[i], s_pos[i]
    local name, kind, angle, tilt, nstep in elem
    local ds = s - s_end

    -- implicit drift
    if ds >= minlen then
      drift_surv(map, ds)
      s_end, ndrift = s, ndrift+1

      if drift == 'exit' and elem:is_selected() then
        fill_table(tbl, 'DRIFT_'..ndrift, 'drift', map, s_end-s_ini, ds)
      end
    elseif ds <= -minlen then
      error(string.format("negative implicit drift %s in %s['%s'] at %s",
            tostring(ds), seq.name, name, tostring(s)))
    end

    -- sequence element
    ds = elem:survey(map)
    s_end = s + ds
    update_angle(map)

    if save == 'exit' and elem:is_selected() then
      fill_table(tbl, name, kind, map, s_end-s_ini, ds, angle, tilt)
    end
  end
  map.s_end, map.ndrift = s_end, ndrift

  return tbl, map
end

-- survey command template

local survey = Command 'survey' {
  X0={0,0,0}, A0={0,0,0}, range={1,-1}, drift=true, save='exit', exec=exec,
} :set_readonly()

-- end ------------------------------------------------------------------------o
return {
  survey = survey,
  __help = __help,
}
