--[=[
 o-----------------------------------------------------------------------------o
 |
 | MADX module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.chÂ§
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide basic compatibility with MADX sequences and optics files

 o-----------------------------------------------------------------------------o
]=]

local M = { __help = {} }

-- help -----------------------------------------------------------------------o

M.__help.self = [=[
NAME
  MADX for MAD-X compatibility

SYNOPSIS
  local lhcb1 in MADX

DESCRIPTION
  This module provide the function loadmadx that read MADX sequence and optics
  files and load them in the MADX global variable. If it does not exist, it will
  create the global MADX variable as an object and load all elements, constants,
  and math functions compatible with MADX.

RETURN VALUES
  The MADX global variable

EXAMPLES
  MADX.open
  -- inline definition
  MADX.close

SEE ALSO
  element, object
]=]

-- locals ---------------------------------------------------------------------o

local Object                                      in MAD
local is_nil, is_number, is_string, is_instanceOf in MAD.typeid

assert(is_nil(MADX), "MADX environment already defined")

-- implementation -------------------------------------------------------------o

local cmt = { ['//'] = '--', ['/*'] = '--[[', ['*/'] = ']]', }

local function convert_comments (line)
  return string.gsub(line, '([/*][/*])', cmt)
end

local tok = { real='', const='', shared='', REAL='', CONST='', SHARED='' }

local function convert_tokens (line)
  line = string.gsub(line, '(%w+) ', tok)
  line = string.gsub(line, '->', '.')
  line = string.gsub(line, '%%', '.')
  line = string.gsub(line, '&', ' ')
  return line
end

local function convert_name (str)
  local c = string.sub(str,1,1)
  if c == '"' or c == "'" then
    assert(c == string.sub(str,-1), "unterminated string")
    return str
  else
    return string.lower(string.gsub(str, '([.$])', '_'))
  end
end

local function convert_names (str)
  return string.gsub(str, "(['\"]?[%a_][%w%._$]*['\"]?)", convert_name)
end

local function convert_from (str)
  return string.gsub(str, "[Ff][Rr][Oo][Mm]%s*=%s*([%a_][%w%._$]*)", "from = '%1'")
end

-- variable -------------------------------------------------------------------o
-- var = expr;
-- var := expr;

               --   [1]  [2]             [3]  [4]  [5]  [6]
local variable = "^(%s*)([%a_][%w%._$]*)(%s*)(:?=)(%s*)([^;]*);"

local function convert_variable (env, line, cap)
  assert(env.cur == 0, "unsupported variable definition inside sequence")
  cap[2] = convert_name (cap[2])
  cap[6] = convert_names(cap[6])
  if cap[4] == ':=' then
    cap[4] = '=\\ '
    if string.sub(cap[6],1,1) == '(' then
      cap[6] = '(' .. cap[6] .. ')'
    end
  end
  return table.concat( cap )
end

-- command --------------------------------------------------------------------o
-- cmd attr-list;
-- cmd, attr-list;

              --   [1]  [2]             [3]       [4]
local command = "^(%s*)([%a_][%w%._$]*)([^,;%a_]*)()"
local command_attr = "(%s*)([^;]*);"

local function convert_command (env, line, cap)
  local cmd = convert_name(cap[2])
  if cmd == 'endsequence' then
    env.cur = 0
    return '}'
  end
  local c = string.sub(line,cap[4],cap[4])
  if c == ',' or c == ';' then
    cap[4] = cap[4]+1
  end

  local sid, spc, pfx, opn, clo = env.elm[cmd] or env.seq[cmd]
  if c ~= ';' and sid then  -- element update
    spc, cap[3] = string.match(line, command_attr, cap[4])
    if env.cur == 0 then                -- outside sequence definition, update
      pfx = sid > 0 and env[sid] .. "['" .. cap[2] .. "'] " or cmd
      opn, cap[3], clo = ':set { ', convert_names(cap[3] or ''), ' }'
    elseif env.seq[cmd] then            -- sharing sequence (keep only at, from)
      if env.wrn then
        warn("sequence update inside sequence " .. env[env.cur] .. ": " .. cmd)
      end
      pfx = cap[2]
--      pfx = "sequence '" .. cap[2] .. "' "
      opn, cap[3], clo = '{ ', convert_names(convert_from(cap[3] or '')), ' },'
--      opn, cap[3], clo = '{ '..cmd..', ', convert_names(convert_from(cap[3] or '')), ' },'
    else                                -- sharing element (keep only at, from)
      if env.wrn then
        warn("element update inside sequence " .. env[env.cur] .. ": " .. cmd)
      end
      pfx = cap[2]
--      pfx = env.cls[cmd] .. " '" .. cap[2] .. "' "
      opn, cap[3], clo = '{ ', convert_names(convert_from(cap[3] or '')), ' },'
    end
    return string.format("%s%s %s%s%s%s", cap[1],pfx, opn,spc or '',cap[3],clo)
  else                                    -- command, ignored
    line = '-- ' .. line
  end
  return line
end

-- element --------------------------------------------------------------------o
-- elem:class attr-list;
-- elem:class, attr-list;

              --   [1]  [2]                    [3]             [4]       [5]
local element = "^(%s*)([%a_][%w%._$]*)%s*:%s*([%a_][%w%._$]*)([^,=;%a_]*)()"
local element_attr = "(%s*)([^;]*);"
local element_line = "(%s*)(%b())%s*;"

local function convert_line (str)
  local cap = string.sub(str, 2, -2)
  if cap ~= '' then cap = '{ ' .. cap end -- closing '}' is appened
  return cap
end

local function convert_element (env, line, cap)
  local nam = convert_name(cap[2])
  local cmd = convert_name(cap[3])
  local sid, spc, clo, pfx = env.elm[nam]
  if cmd == 'sequence' then -- sequence
    assert(env.cur == 0, "invalid sequence definition inside sequence")
    pfx, clo     = nam .. ' = ', ','
    env[#env+1]  = nam
    env.seq[nam] = #env
    env.cur      = #env
  elseif env.cur == 0 then  -- class
    pfx, clo     = nam .. ' = ', ' }'
    env.cls[nam] = cmd
    env.elm[nam] = 0
  else                      -- element
    pfx, clo     = '', ' },'
    if sid then
      if env.wrn then
        warn("implicit element re-definition ignored: " .. nam)
      end
    else
      env.cls[nam] = cmd
      env.elm[nam] = env.cur
    end
  end
  local c = string.sub(line,cap[5],cap[5])
  if c == ',' or c == ';' then
    cap[5] = cap[5]+1
  end
  if c == '=' then -- line -- TODO: line arguments
    assert(cmd == 'line', "line definition expected")
    spc, cap[4] = string.match(line, element_line, cap[5])
    cap[4] = convert_names(convert_line(cap[4] or ''))
  elseif c ~= ';' then -- attribute
    assert(cmd ~= 'line', "unexpected line definition")
    spc, cap[4] = string.match(line, element_attr, cap[5])
    cap[4] = convert_names(convert_from(cap[4] or ''))
  else
    cap[4] = ''
  end
  return string.format("%s%s%s '%s' %s{ %s%s",
                       cap[1], pfx, cmd, cap[2], spc or '', cap[4], clo)
end

-- statement ------------------------------------------------------------------o

local capf = \i,j,... -> {...}
local function convert_statements (env, line)
  local cap
  cap = capf( string.find(line, variable) )
  if #cap > 0 then return convert_variable(env, line, cap) end
  cap = capf( string.find(line, element) )
  if #cap > 0 then return convert_element (env, line, cap) end
  cap = capf( string.find(line, command) )
  if #cap > 0 then return convert_command (env, line, cap) end
  return line
end

--[[
  env content:
  ------------
  [idx]    = seq_name : list of sequences
  cur      = seq_idx  : current sequence index (0 -> not in seq)
  elm[str] = seq_idx  : element sequence index (0 -> elm is a class)
  seq[str] = seq_idx  : sequence index         (from name)
  cls[elm] = cls_name : class of element
]]--

local function load_file (madx, file_in, file_out)
  madx = madx or MADX
  assert(is_instanceOf(madx, MADX)              , "invalid MADX environment")
  assert(is_string(file_in)                     , "invalid input file name")
  assert(is_string(file_out) or is_nil(file_out), "invalid ouput file name")

  local env = { cur=0, seq={}, elm={}, cls={}, wrn=madx.option.warn, madx=madx }

  -- load file
  local inf = assert( io.open(file_in) )
  local out = {
    string.format("-- Generated by MAD %s %s", MAD.env.version, os.date()),
    string.format("%s:open_env()\n", madx.name),
  }

  for line in inf:lines() do
    line = convert_comments   (line)
    line = convert_tokens     (line)
    line = convert_statements (env, line)
    out[#out+1] = line
  end
  out[#out+1] = string.format("\n%s:close_env()", madx.name)
  inf:close()

  if file_out then -- save to file
    local outf = assert( io.open(file_out, "w") )
    for i,s in ipairs(out) do
      outf:write(s, '\n')
    end
  else             -- compile in memory
    assert( load( table.concat(out,'\n') ) ) ()
  end

  env, out = nil, nil
  collectgarbage() -- cleanup memory
end

-- MADX helpers ---------------------------------------------------------------o

local sinc, is_function in MAD

local rbarc = function (e)
  local l = e.variable.l
  if is_function(l)
  then e.l = \s l(s)/sinc(s.angle)
  else e.l = \s l   /sinc(s.angle)
  end
end

local sbcord = function (e)
  local l = e.variable.l
  if is_function(l)
  then e.l = \s l(s)*sinc(s.angle)
  else e.l = \s l   *sinc(s.angle)
  end
end

-- MADX environment -----------------------------------------------------------o

local MADX = Object 'MADX' { option={debug=false, info=false, warn=true} }

-- load madx definition
MADX:set_function {
  load  = load_file,
}

-- math constants
MADX:set_variable {
  pi     = math.pi,
  eps    = math.eps,
  tiny   = math.tiny,
  huge   = math.huge,
  inf    = math.inf,
  nan    = math.nan,
  infi   = math.infi,
  nani   = math.nani,
  twopi  = math.twopi,
  degrad = math.degrad,
  raddeg = math.raddeg,
}

-- math functions, see mad_dict.c from MAD-X source
MADX:set_function {
  abs    = math.abs   ,
  sqrt   = math.sqrt  ,
  exp    = math.exp   ,
  log    = math.log   ,
  log10  = math.log10 ,
  sin    = math.sin   ,
  cos    = math.cos   ,
  tan    = math.tan   ,
  sinh   = math.sinh  ,
  cosh   = math.cosh  ,
  tanh   = math.tanh  ,
  asin   = math.asin  ,
  acos   = math.acos  ,
  atan   = math.atan  ,
  asinh  = MAD .asinh ,
  acosh  = MAD .acosh ,
  atanh  = MAD .atanh ,
  ranf   = MAD .ranf  ,
  gauss  = MAD .gauss ,
  tgauss = MAD .tgauss,
  floor  = math.floor ,
  ceil   = math.ceil  ,
  round  = MAD .round ,
  frac   = MAD .frac  ,
  fact   = MAD .fact  ,
  erf    = MAD .erf   ,
  erfc   = MAD .erfc  ,
  sinc   = MAD .sinc  ,
-- extra functions
  rbarc  = rbarc      ,
  sbcord = sbcord     ,
}

-- constants
MADX:set_variable(MAD.constant)

-- elements
MADX:set_variable(MAD.element)

-- aliases (not in MAD)
MADX.tkicker     = MAD.element.kicker     'tkicker'     {}
MADX.rcollimator = MAD.element.collimator 'rcollimator' {}
MADX.ecollimator = MAD.element.collimator 'ecollimator' {}

-- identifier as strings (should be detected by parser)
do
  local id2str = {
    'entry', 'centre', 'exit',
    'circle', 'ellipse',
  }
  for _,v in ipairs(id2str) do MADX[v] = v end
end

-- undefined variables have value zero
local index   = rawget(getmetatable(MADX),'__index') -- catch from parent
local windex  = \s,k =>
  if s.option.warn then warn("undefined variable used (zero): " .. k) end
  return 0
end
local windex0 = \s,k -> index(s,k) or windex(s,k)
MADX:set_metamethod ({ __index=windex0 }, true)

-- finalize
MADX:set_readonly()

-- global MADX is a read-write child.
_G.MADX = MADX {}

MAD.utility.defhelp(M) -- todo: per function help -> 'madx'

-- end ------------------------------------------------------------------------o
return M
