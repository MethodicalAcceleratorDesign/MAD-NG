--[=[
 o-----------------------------------------------------------------------------o
 |
 | MADX module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide basic compatibility with MADX sequences and optics files

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local object, option, warn                                        in MAD
local assertf, openfile, fileisnewer                              in MAD.utility
local bind1st                                                     in MAD.gfunc
local is_nil, is_number, is_string, is_callable                   in MAD.typeid

local type, getmetatable, assert, rawget, rawset, table, string, io, os =
      type, getmetatable, assert, rawget, rawset, table, string, io, os

assert(is_nil(rawget(_G,'MADX')), "MADX environment already defined")

-- TODO: handle default value of element attribute defined in MADX dict
--   "elm: class, attr;" or "elm, attr;" where no value is specified for attr

-- implementation -------------------------------------------------------------o

local BEGOFCHUNK = "do  -- BEGOFCHUNK"
local ENDOFCHUNK = "end -- ENDOFCHUNK"
local MINSZCHUNK = 1000

local cmt = { ['//'] = '--', ['/*'] = '--[[', ['*/'] = '--]]' }

local function convert_ident (str)
  return string.lower(str) -- string.gsub(str, '([.$])', '_'))
end

local function convert_comments (line)
  line = string.gsub(line, '/%*', "--[[")
  line = string.gsub(line, '%*/', "--]]")
  line = string.gsub(line, '//' , "--"  )
  return line
end

local tok = { int='', real='', const='', shared='', nst='nslice',
              INT='', REAL='', CONST='', SHARED='', NST='nslice', }

local function convert_tokens (line)
  line = string.gsub(line, '(%w+)', tok)
  line = string.gsub(line, '->', '.')
  line = string.gsub(line, '%%', '.')
  line = string.gsub(line, '&', ' ')
  return line
end

local function convert_name (env, str)
  local c = string.sub(str,1,1)
  if c == '"' or c == "'" then
    assertf(c == string.sub(str,-1), "unterminated string, line %d", env and env.lin or -1)
    return str
  else
    return convert_ident(str)
  end
end

local function convert_names (env, str)
  return (string.gsub(str, "(['\"]?[%a_][%w%._$]*['\"]?)", bind1st(convert_name, env)))
end

local convert_from   = \str -> "from='"  ..string.upper(str).."'"
local convert_refpos = \str -> "refpos='"..string.upper(str).."'"

local function convert_eref (str)
  str = string.gsub(str, "[Ff][Rr][Oo][Mm]%s*=%s*([%a_][%w%._$]*)",convert_from)
  str = string.gsub(str, "[Rr][Ee][Ff][Pp][Oo][Ss]%s*=%s*([%a_][%w%._$]*)",convert_refpos)
  return str
end

-- variable -------------------------------------------------------------------o
-- var = expr;
-- var := expr;
                    --   [1]  [2]             [3]  [4]  [5]  [6]
local variable_patt = "^(%s*)([%a_][%w%._$]*)(%s*)(:?=)(%s*)([^;]*);"

local function convert_variable (env, line, cap)
  cap[2] = convert_name (env, cap[2])
  cap[6] = convert_names(env, cap[6])
  assertf(env.cur == 0, "unsupported variable %s assignment in %s, line %d",
    cap[2], env[env.cur], env.lin)
  if cap[4] == ':=' then
    cap[4] = '=\\ '
    if string.sub(cap[6],1,1) == '(' then
      cap[6] = '(' .. cap[6] .. ')'
    end
  end
  return table.concat( cap )
end

-- command --------------------------------------------------------------------o
-- cmd, attr-list;
-- cmd attr-list;
                   --   [1]  [2]             [3]       [4]
local command_patt = "^(%s*)([%a_][%w%._$]*)([^,;%a_]*)()"
local command_attr = "(%s*)([^;]*);"

local function convert_command (env, line, cap)
  cap[2] = string.upper(cap[2])
  local cmd = convert_name(env, cap[2])
  if cmd == 'endsequence' then
    local out in env
    env.cur = 0
    out[out.n], out.n = '}', out.n+1
    if out.n-out.nchk >= MINSZCHUNK then
      out[out.n], out.n = ENDOFCHUNK, out.n+1 -- close previous chunk
      out.nchk = out.n+1
      return BEGOFCHUNK                       -- open  new      chunk
    end
    return ''
  end
  local c = string.sub(line,cap[4],cap[4])
  if c == ',' or c == ';' then
    cap[4] = cap[4]+1
  end

  env.opt.warn = false   -- disable madx warnings when looking for an element
  local cmdx = env.madx[cmd] ~= 0
  env.opt.warn = env.wrn -- restore madx warnings

  local sid = cmdx or env.elm[cmd] or env.seq[cmd] and 1 or nil
  if c ~= ';' and sid then                    -- element or sequence update
    local spc, pfx, opn, clo
    spc, cap[3] = string.match(line, command_attr, cap[4])
    if env.cur == 0 then                      -- outside sequence definition, update
      pfx = sid > 0 and "MADX['" .. cap[2] .. "'] " or cmd
      opn, cap[3], clo = ':setvar { ', convert_names(env, cap[3] or ''), ' }'
    elseif cmdx or env.seq[cmd] then -- sharing sequence (keep only at, from, refpos)
!     if env.wrn then -- now checked by MAD-X
!       warn("%03d: sequence updated in %s: %s", env.lin, env[env.cur], cap[2])
!     end
      pfx = convert_names(env, cap[2] or '')
      opn, cap[3], clo = ' { ', convert_names(env, convert_eref(cap[3] or '')), ' },'
    else                                  -- sharing element (keep only at, from, refpos)
!     if env.wrn then -- now checked by MAD-X
!       warn("%03d: element updated in %s: %s", env.lin, env[env.cur], cap[2])
!     end
      pfx = convert_name(env, cap[2]) .. " '" .. cap[2] .. "' "
      opn, cap[3], clo = ' { ', convert_names(env, convert_eref(cap[3] or '')), ', shared=true },'
    end           -- was ':setvar { '
    return string.format("%s%s %s%s%s%s", cap[1],pfx,spc or '', opn,cap[3],clo)
  else                                    -- command, ignored
    line = '-- ' .. line
  end
  return line
end

-- element --------------------------------------------------------------------o
-- elem:class, attr-list;
-- elem:class attr-list;

                   --   [1]  [2]                    [3]             [4]       [5]
local element_patt = "^(%s*)([%a_][%w%._$]*)%s*:%s*([%a_][%w%._$]*)([^,=;%a_]*)()"
local element_attr = "(%s*)([^;]*);"
local element_line = "(%s*)(%b())%s*;"

local function convert_line (str)
  local cap = string.sub(str, 2, -2)
  if cap ~= '' then cap = '{ ' .. cap end -- closing '}' is appened
  return cap
end

local function convert_element (env, line, cap)
  cap[2] = string.upper(cap[2])
  local nam = convert_name(env, cap[2])
  local cmd = convert_name(env, cap[3])
  local out, sid, spc, clo, pfx = env.out, env.elm[nam]
  if cmd == 'sequence' then -- sequence
    assertf(env.cur == 0, "invalid sequence %s definition in %s, line %d",
            cap[2], env[env.cur], env.lin)
    if out.n-out.nchk >= MINSZCHUNK then
      out[out.n], out.n = ENDOFCHUNK, out.n+1 -- close previous chunk
      out[out.n], out.n = BEGOFCHUNK, out.n+1 -- open  new      chunk
      out.nchk = out.n
    end
    pfx, clo     = nam .. ' = ', ','
    env[#env+1]  = nam      -- cap[2]
    env.seq[nam] = #env
    env.cur      = #env
  elseif env.cur == 0 then  -- class
    pfx, clo     = nam .. ' = ', ' }'
    env.cls[nam] = cmd
    env.elm[nam] = 0
  else                      -- element
    pfx, clo     = '', ' },'
    if sid then
      if env.wrn then
        if env.cur == 0 then
          warn("%03d: element redefined, ignored: %s", env.lin, cap[2])
        else
          warn("%03d: element redefined in %s, ignored: %s",
               env.lin, env[env.cur], cap[2])
        end
      end
    else
      env.cls[nam] = cmd
      env.elm[nam] = env.cur
    end
  end
  local c = string.sub(line,cap[5],cap[5])
  if c == ',' or c == ';' then
    cap[5] = cap[5]+1
  end
  if c == '=' then -- line -- TODO: line arguments
    assertf(cmd == 'line', "'line' definition expected, line %d", env.lin)
    spc, cap[4] = string.match(line, element_line, cap[5])
    cap[4] = convert_names(env, convert_line(cap[4] or ''))
  elseif c ~= ';' then -- attribute
    assertf(cmd ~= 'line', "unexpected 'line' definition, line %d", env.lin)
    spc, cap[4] = string.match(line, element_attr, cap[5])
    cap[4] = convert_names(env, convert_eref(cap[4] or ''))
  else
    cap[4] = ''
  end
  return string.format("%s%s%s '%s' %s{ %s%s",
                       cap[1], pfx, cmd, cap[2], spc or '', cap[4], clo)
end

-- statement ------------------------------------------------------------------o

local capf = \i,j,... -> {...}
local function convert_statements (env, line)
  local cap
  cap = capf( string.find(line, variable_patt) )
  if #cap > 0 then return convert_variable(env, line, cap) end
  cap = capf( string.find(line, element_patt ) )
  if #cap > 0 then return convert_element (env, line, cap) end
  cap = capf( string.find(line, command_patt ) )
  if #cap > 0 then return convert_command (env, line, cap) end
  return line
end

--[[
  env content:
  ------------
  [idx]    = seq_name : list of sequences in current translation
  cur      = seq_idx  : current sequence index (0 -> not in seq)
  elm[str] = seq_idx  : element sequence index (0 -> elm is a class)
  seq[str] = seq_idx  : sequence index         (from name)
  cls[elm] = cls_name : class of element
]]--

local function load2madx (madx, src, dst, reload_)
  assert(madx == MADX or object.is_instanceOf(madx, MADX), "invalid MADX environment")
  local out = table.new(8192,1) ; out.n, out.nchk = 1, 1

  local env = { out=out, seq={}, elm={}, cls={}, cur=0, lin=0,
                wrn=madx.option.warn, opt=madx.option, madx=madx }

  -- compile directly in memory (no translation)
  if is_callable(src) or is_string(src) and string.sub(src, -4) == '.mad' then
    for line in io.lines(src) do out[out.n], out.n = line, out.n+1 end -- madx:load_env(src)
    goto compile
  end

  -- compile directly in memory if dst newer than src (no translation)
  if reload_ ~= true and is_string(src) and               -- reload not enforced
     is_string(dst) and string.sub(dst, -4) == '.mad' and -- dst is a mad file
     fileisnewer(dst, src) then                           -- dst newer than src
    for line in io.lines(dst) do out[out.n], out.n = line, out.n+1 end-- madx:load_env(dst)
    goto compile
  end

  -- translate source file
  do
    env.cur, env.lin = 0, 0

    -- load file
    out[out.n], out.n = string.format("-- Generated by MAD %s %s\ndo",
                                      MAD.env.version, os.date()), out.n+1
    for line in io.lines(src) do
      env.lin = env.lin + 1
      line = convert_comments   (line)
      line = convert_tokens     (line)
      line = convert_statements (env, line)
      out[out.n], out.n = line, out.n+1
    end
    if out[out.n-1] == BEGOFCHUNK then
      out[out.n-1], out.n = nil, out.n-2
    else
      out[out.n] = ENDOFCHUNK
    end

    -- save to file
    if dst then
      local outf = assert(openfile(dst, 'w', '.mad'),
                          "unable to open MAD file in write mode")
      for i,s in ipairs(out) do outf:write(s, '\n') end
      if is_string(dst) then outf:close() else outf:flush() end
      if option.debug > 0 then
        io.write(src, ' converted and saved to ', dst, '\n')
      end
    end
  end

::compile::
  -- compile in memory by chunk or sequence
  local li, lj, eoc = 0, 0, false
  local loadchunk = \ =>
    if eoc then eoc=false ; return nil end
    li = li+1 ; eoc = out[li] == ENDOFCHUNK
    return out[li] and out[li]..'\n' or nil
  end
  while li < out.n do
    object.load_env(madx, assert( load(loadchunk) ))
  end
  -- madx:load_env(assert( load( table.concat(out,'\n') ) ))

  out, env = nil, nil
  collectgarbage() -- mark and sweep
  collectgarbage() -- release memory
end

-- MADX env -------------------------------------------------------------------o

-- set option.madxenv when opening and closing MADX environment (used by seq.)

local function open_env (madx, ctx_)
  assert(madx == MADX or object.is_instanceOf(madx, MADX), "invalid MADX environment")
  option.madxenv = true
  return object.open_env(madx, ctx_)
end

local function close_env (madx)
  assert(madx == MADX or object.is_instanceOf(madx, MADX), "invalid MADX environment")
  option.madxenv = false
  return object.close_env(madx)
end

-- MADX helpers ---------------------------------------------------------------o

local sinc in MAD.gmath

-- from cord to arc
local cord2arc = function (e)
  local l = e:var_get 'l'
  if is_callable(l)
  then e.l = \s l(s)/sinc(0.5*s.angle)
  else e.l = \s l   /sinc(0.5*s.angle)
  end
end

-- from arc to cord
local arc2cord = function (e)
  local l = e:var_get 'l'
  if is_callable(l)
  then e.l = \s l(s)*sinc(0.5*s.angle)
  else e.l = \s l   *sinc(0.5*s.angle)
  end
end

-- MADX environment -----------------------------------------------------------o

local MADX = object 'MADX' {
  _G=_G, MAD=MAD,
  option = {
    debug=false, info=false, warn=true, rbarc=true,
  },
}

-- load madx definition
MADX:set_methods {
  load      = load2madx,
   open_env =  open_env,
  close_env = close_env,
}

-- math functions, see mad_dict.c from MAD-X source
local xrng = MAD.gmath.xrandnew()

MADX.global_prng = xrng

MADX:set_methods {
  abs     = math.abs,
  sqrt    = math.sqrt,
  exp     = math.exp,
  log     = math.log,
  log10   = math.log10,
  sin     = math.sin,
  cos     = math.cos,
  tan     = math.tan,
  sinh    = math.sinh,
  cosh    = math.cosh,
  tanh    = math.tanh,
  asin    = math.asin,
  acos    = math.acos,
  atan    = math.atan,
  asinh   = MAD.gmath.asinh,
  acosh   = MAD.gmath.acosh,
  atanh   = MAD.gmath.atanh,
  ranf    = \ -> xrng:rand(),
  gauss   = \ -> xrng:randn(),
  tgauss  = \cut_ -> xrng:randtn(cut_),
  poisson = \lmb_ -> xrng:randp(lmb_),
  seed    = \seed -> xrng:randseed(seed),
  floor   = math.floor,
  ceil    = math.ceil,
  round   = MAD.gmath.round,
  frac    = MAD.gmath.frac,
  fact    = MAD.gmath.fact,
  erf     = MAD.gmath.erf,
  erfc    = MAD.gmath.erfc,
  sinc    = MAD.gmath.sinc,

-- extra functions
  cord2arc = cord2arc,
  arc2cord = arc2cord,
}

-- constants
MADX:set_variables(MAD.constant)

-- elements
MADX:set_variables(MAD.element)

local multipole, collimator in MAD.element

-- backward compatibility (survey)
-- note: only Mutipole knl[1] should affect the global frame,
--       other thin elements should not change the global frame.
MADX.multipole = multipole {}                            -- override by a child
MADX.multipole.angle = \s -> s.knl and s.knl[1] or 0     -- not in MAD multipole

-- aliases (not in MAD)
MADX.rcollimator = collimator 'rcollimator' { }
MADX.ecollimator = collimator 'ecollimator' { }

-- strings as identifiers (should be detected by parser?)
do
  -- keywords
  local kwd = {
    'centre'     ,
    'circle'     ,
    'ellipse'    ,
    'rectellipse',
    'entry'      ,
    'exit'       ,
  }
  -- translated keywords
  local akwd = {
    center = 'centre',
  }
  -- load to MADX
  for _,v in ipairs(kwd) do MADX[v] = v end
  for k,v in pairs(akwd) do MADX[k] = v end
end

-- build dict or existing keys
local _, dict = MADX:get_varkeys(object)

-- undefined variables have value zero
-- names are converted to identifiers (lower case, $. -> _)
-- names starting by __ are not protected
local      index = getmetatable(MADX).__index    -- catch from parent
local   newindex = getmetatable(MADX).__newindex -- catch from parent
local __newindex = \s,k,v -> rawset(s.__var, convert_name(nil,k), v)
local    __index = \s,k =>
  k = dict[k] or convert_name(nil,k)
  local v = index(s,k)
  if type(v) ~= 'nil' then return v end
  if s.option.warn then warn("undefined variable used (zero): " .. k) end
  rawset(s.__var, k, 0)
  return 0
end

MADX:set_metamethods { __index=__index, __newindex=__newindex } :set_readonly()

-- global MADX is a read-write child.
_G.MADX = MADX(table.new(0,1000))

-- end ------------------------------------------------------------------------o
return { MADX = _G.MADX }
