Patches for MAD
===============

LuaJIT:
- Patch for lambda syntax and direct call (see below)
- Patch for deferred expression in table constructors (merged with lambda)
- Patch for local 'in table' (see below)
- Patch for range cdata type (updated to use lookup)
- Patch for one line comment starting by '!'

LuaJIT bugfix and extra: [-DLJMAD_BUGFIX_EXTRA]
- Patch for unary plus '+'
- Patch for concatenation of numbers without spaces '1..2'
- Patch for proper min/max with NaN
- Patch for cdata metatable exposition (abandonned)
- Patch for (complex) dual number (abandonned)

Frontend main:
- Patch for support of .mad extension
- Patch for relative path search for modules
- Patch for embedding Luajit modules (movable binary)

Patch for dual numbers
======================

The patch for dualnum and dualcomplex has been _abandonned_ because LJ already
uses dualnum for another purpose (risk of name clash). So the choosen option is
to extend our complex module with generalized complex numbers. It is simple,
efficient, and general enough for our purpose in physics geometry (elliptical,
hyperbolic and differential), and provides compatibility with matrix module for
free. Otherwise we need to add and support 4 new types and many extra branches
to each binary operators...

Patch for one-line comment
==========================

With the patch for one-line comment, the following syntax is supported:
[-DLJMAD_COMMENT_EMARK]

! this is a single line comment

becomes _strictly_ equivalent to the Lua syntax

-- this is a comment

This syntax extension is for shorter comment syntax like in Fortran. It may be
deactivated in the future if the character becomes used by Lua syntax or
replaced by '|' character.

Patch for range cdata type
===========================

With the patch for range cdata readonly struct-like type extension, the
following syntax is supported: [-DLJMAD_RANGE_SYNTAX]

3..4               (spaces are not needed around concat operator)
3..4..0.1
start..stop
start..stop..step  (order is the same as numerical for)

becomes _strictly_ equivalent to the Lua syntax

ffi = require 'ffi'
range = ffi.typeof 'struct range'
range(3,4)
range(3,4,0.1)
range(start,stop)
range(start,stop,step)

Default values for missing arguments are:
range(start)            -- equiv. range(start,start,1), i.e. point-like range
range(start,stop)       -- equiv. range(start,stop,1)
range(start,stop,step)

Empty ranges:
range(start,stop,0)
range(start,stop,1)  -- with start > stop
range(start,stop,-1) -- with start < stop

Interpolating ranges:
rng = range(start,stop,step)
rng[3]         -> index  : start+(3-1)*step or nil (if ouside range)
rng:get(3.1)   -> segment: start+3.1*step or nil (if ouside range)
rng:value(3.1) -> line   : start+3.1*step (no outside)

Note about numerical stability:
a=0; for   v =                1,1e8,0.1   do a = v end; print(a) -> 99999999.94
a=0; for _,v in ipairs(xrange(1,1e8,0.1)) do a = v end; print(a) -> 100000000

Note about performance:
ipairs is faster than numerical loop with get or [] (index) because it returns
specialized iterators depending of the sign of the step.

Patch for local 'in' table
==========================

With the patch of local 'in' table extension, the following syntax is supported:
[-DLJMAD_LOCAL_INTABLE]

local sin, cos, tan in math
local vector, matrix in require 'matrix'

becomes _strictly_ equivalent to the Lua syntax

local sin, cos, tan = math.sin, math.cos, math.tan
local vector, matrix, (in)   -- '(in)' is a temporary special hidden identifier
(in) = require 'matrix'      -- inaccessible from Lua.
vector, matrix = (in).vector, (in).matrix

This syntax extension is particularly useful with LuaJIT considering the
frequent needs to have local copies of variables for performance reason.

Patch for lambda syntax
=======================

With the patch of lamdba syntax extension, the following syntaxes are
supported: [-DLJMAD_LAMBDA_SYNTAX]

\par_list    expr
\par_list   (expr)
\(par_list)  expr
\(par_list) (expr)

\par_list   (expr_list)
\(par_list) (expr_list)

become _strictly_ equivalent to the Lua syntaxes

function (par_list) return expr      end
function (par_list) return expr_list end

+ Parenthesis around par_list and non-emtpy expr are *optional* for lambda.
+ Parenthesis around expr_list and empty expr are *required* for lambda.
+ Following the function syntax, par_list, expr and expr_list can be empty.
+ The first lambda parameter name (if any) or parenthesis (if any) must “touch”
  the lambda sign (backslash) to be understood as starting par_list. Any other
  character (even touching), including space or tab between the lambda sign and
  the expr or expr_list will be understood as a lambda with void parameter.

For completness with common lambda notation in other programming language (e.g.
Haskell), the following syntaxes are also supported by the patch:

\(par_list) -> (expr)
\(par_list) -> (expr_list)
\(par_list) => function_body

which is _strictly_ equivalent to the Lua syntaxes (as above)

function (par_list) return expr      end
function (par_list) return expr_list end
function (par_list) function_body

+ Single arrow is *optional*, but fat arrow is *required*.
+ Parenthesis around par_list is *optional* for the three lambda forms.
+ Parenthesis around expr and expr_list follow the same rules as without arrow.
+ Function_body must include the closing 'end' as it *is* the Lua function
  body.

Patch for lambda direct call (lambda syntax)
============================

With the patch of lamdba syntax, direct call is also supported with the
following syntaxes: [-DLJMAD_LAMBDA_SYNTAX]

func \(par_list) (expr)
func \(par_list) (expr_list)

become _strictly_ equivalent to the Lua syntaxes (as above)

func( \(par_list) (expr)      )
func( \(par_list) (expr_list) )

where func is a function call syntax. This is an extension of the function call
syntax for table constructor and string literal.

Patch for deferred expression (lambda syntax)
=============================

With the patch of lamdba syntax, the following syntaxes inside table
constructor (only) are supported: [-DLJMAD_LAMBDA_SYNTAX]

{ key := expr }

become _strictly_ equivalent to the Lambda syntaxes

{ key =\ expr }

but it supports only expr as RHS (not expr_list), meaning that it can start with
a parenthesis without triggering the special expr_list semantic. It is also not
sensitive to the space following the lambda backslash character, as it is always
void of parameter.

-------------------------------------------------------------------------------

----
Examples of equivalent forms in Lua and Lambda syntaxes:
----

> f=function (x) return x*x end
> f=\(x) (x*x)
> f=\(x) x*x
> f=\x (x*x)
> f=\x x*x
> =f(2)
4

> f=function (...) return ... end
> f=\... ...                   -- identity
> =f(4)
4

> f=function (...) return {...} end
> f=\... {...}                 -- pack
> =f(4)[1]
4

> f=function () return end     -- skip parameter(s)
> f=\ ()
> =f(3)
> =f(4,5)

> sqrt=math.sqrt
> f=function (x,y,z) return sqrt(x*x+y*y) end
> f=\x,y sqrt(x*x+y*y)         -- hypotenuse
> =f(2,3)
3.605551275464

> f=function (x) return function (y) return x+y,x-y end end
> f=\x\y (x+y,x-y)
> =f(2)(3)
5   -1

> f=function () return  x end  -- free variable x
> f=\ x   -- note the space
> x=10
> =f()
10
> x=20
> =f()
20

> f=function () return -x end  -- free variable x
> f=\ -x   -- note the space
> x=10
> =f()
-10
> x=20
> =f()
-20

> f=function () return (x+1)*2 end -- free variable x
> f=\ ((x+1)*2)   -- note the extra parenthesis to avoid invalid expr_list
> x=4
> =f()
10
> x=9
> =f()
20
> f=\ 2*(x+1)     -- no expr_list, ok
> =f()
20

> a= { f=function () return (x+1)*2 end } -- free variable x
> a= { f:=(x+1)*2 }   -- note no extra space nor parenthesis needed
> x=4
> =a.f()
10
> x=9
> =a.f()
20

> a={ f=function (x,y) return x+y,x-y end, 3 }
> a={ f=\x,y (x+y,x-y), 3 } -- multiple values returned
> =a.f(2,3)
5   -1
> =a[1]
3

> a={ f=function (x,y) return x+y end, x-y, 3 }
> a={ f=\x,y x+y, x-y, 3 }  -- single value returned
> =a.f(2,3)
5
> =a[1]
-2
> =a[2]
3

> x,y=4,6
> a= { f=function () return x+y,x-y end, 3 }
> =a.f()                   -- multiple values returned
10  -2
> =a[1]
3
> a= { f=\ (x+y,x-y), 3 }
> =a.f()                   -- multiple values returned, equivalent but needs ()
10  -2
> =a[1]
3
> a= { f:=x+y, x-y, 3 }
> =a.f()                   -- single value returned, not equivalent
10
> =a[1]                    -- x-y
-2

> z=10
> a={ f=function (s,y) return s.x*y+z end, x=3 }
> a={ f=\s,y s.x*y+z, x=3 }  -- single value return using 'self'
> =a:f(2)
16
> a.x=5
> =a:f(2)
20

----
Example: Fibonacci sequence (2nd is more readable?)
----

fib=\n n<2 and n or fib(n-1)+fib(n-2)

fib=\n -> n<2 and n or fib(n-1)+fib(n-2)

----
Example: composition of lambda
----

> id=\... ...
> f=\x x^2
> g=\x (x,x)
> h=\x,y (x+y,x-y)
> cat=\f,g \... f(g(...))

> f(2)
4
> gf=cat(g,f)
> =gf(2)
4  4
> hgf=cat(h,gf)
> =hgf(2)
8  0

> sm, gm = setmetatable, getmetatable
> -- let’s define ^ and _ (bottom) for function composition
> _ = sm({id}, { __pow  = \f,g sm({cat(f,g[1])}, gm(g)),
>>               __call = \g,... g[1](...) })

> hgf= h^g^f^_  -- = cat(h,cat(g,f)) but no () mismatch
> =hgf(2)
8  0

> f=\x,y (x+y,x-y)
> g=\x,y x*y
> p1=\x,y ( (g^f^_)(x,y) == (\x,y x^2-y^2)(x,y) )
> =assert(p1(2,3))
true
> p2=\x,y ( (\x,y(x*y) ^ \x,y(x+y,x-y) ^_)(x,y) == (\x,y x^2-y^2)(x,y) )
> =assert(p2(2,3))
true

----
Example: direct call syntax
----

> _ = \f f()
> x=3
> = _\ x*x
9

----
*Note on performance*
----

p1 and p2 are creating lambda functions in each call, but if we redefine the
lamda creation outside:

sm, gm = setmetatable, getmetatable
id=\... ...
cat=\f,g \... f(g(...))
_ = sm({id}, { __pow  = \f,g sm({cat(f,g[1])}, gm(g)),
               __call = \g,... g[1](...) })
f=\x,y (x+y,x-y)
g=\x,y x*y
h=\x,y x^2-y^2
gf = g^f^_
p3=\x,y gf(x,y) - h(x,y)
for i=1,1e9 do p3(i,i+1) end

The performance is improved by a factor 2000 (!) The reason is that creation of
lambda function are not compiled... Same problem for composition as it
also creates a lambda function (i.e. the composed function in cat).
