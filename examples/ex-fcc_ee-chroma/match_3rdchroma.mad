-- time ../mad -Oloopunroll=500 -Oinstunroll=100 -jp=vl match_3rdchroma > match_3rdchroma.out 2>&1

local beam, track, twiss, match, damap, option in MAD
local mchklost, melmcol, normal                in MAD.gphys
local abs, real, imag                          in MAD.gmath
local printf                                   in MAD.utility

local mem = collectgarbage("count")

MADX:load("FCCee_529.seq", "FCCee_529.mad") -- convert on need
MADX:load("sextupole_circuits_3.madx", "sextupole_circuit_3.mad") -- convert on need

print("memory used by FCC-ee:", collectgarbage("count") - mem, " Kbytes")

local fcc_e_ring in MADX

option.nocharge = true -- IMPORTANT!!

fcc_e_ring.beam = beam {particle="electron",
                        pc=182.5,
                        ex=1.46e-9,
                        ey=2.9e-12}

! set slices for some classes
MADX.QC1L1.nslice=3
MADX.QC1R2.nslice=3
MADX.QC1R3.nslice=3
MADX.QC2R1.nslice=3
MADX.QC2R2.nslice=3
MADX.QC2L2.nslice=3
MADX.QC2L1.nslice=3
MADX.QC1L3.nslice=3
MADX.QC1L2.nslice=3

MADX.SY1R .nslice=3
MADX.SY2R .nslice=3
MADX.SY2L .nslice=3
MADX.SY1L .nslice=3

! Set voltages to zero
MADX.voltca1 = 0
MADX.voltca2 = 0

-------------------------------------------------------------------------------o
-- small checks                                                              --o
-------------------------------------------------------------------------------o

if false then -- set to true to run twiss checks

-- track columns
local tkcols = {'name','kind','s', 'l', 'x','px', 'y','py'}

-- twiss columns
local twcols = {'name','kind','s', 'l', 'x','px', 'y','py',
'beta11','alfa11','beta22','alfa22','dx','dpx','mu1','mu2',}
!'angle','k0l','k1l','k2l','k3l','hkick','vkick', 'volt'}

-- extra columns
local xcols = {'angle', 'tilt',
              'k0l' , 'k1l' , 'k2l' , 'k3l' , 'k4l' , 'k5l' , 'k6l',
              'k0sl', 'k1sl', 'k2sl', 'k3sl', 'k4sl', 'k5sl', 'k6sl',
              'ksl', 'hkick', 'vkick', 'volt'}

-- local tk = track {sequence=fcc_e_ring, method=6, nslice=3, observe=0}
-- tk:write("FCCee_track.tfs", tkcols)

local tw = twiss {sequence=fcc_e_ring, method=6, nslice=3, mapdef=2}

-- add extra columns to twiss table
-- melmcol(tw, xcols)

tw:write("FCCee_twiss.tfs", twcols)
end

-------------------------------------------------------------------------------o
-- match chromas                                                             --o
-------------------------------------------------------------------------------o

local prt_rdt = function (nf, kind)
  local a = assert(nf[kind], "invalid kind '"..kind.."'")
  for i,k in ipairs(a) do
    local v = nf[kind][k]
    printf("%4d: %s[%s] C=% .6e, S=% .6e, A=% .6e\n",i,kind,k, real(v),imag(v),abs(v))
  end
end

-- initial values *with* the 1ppm constraint (optional, see printf at the bottom )
if false then
  MADX.k2s1 = -1.1032141775654665e+00
  MADX.k2s2 =  9.4192481802409045e-01
  MADX.k2s3 =  2.0561449636250191e+00
  MADX.k2s4 =  2.0514410732311666e-02
  MADX.k2s5 = -1.8946803310848175e-02
  MADX.k2s6 = -1.3176823098368897e+00
  MADX.k2s7 = -1.2904134034530155e+00
  MADX.k2s8 = -3.8890889495935455e-01
end

-- initial values *without* the 1ppm constraint (optional, see printf at the bottom )
if false then
  MADX.k2s1 = -1.1032141302952743e+00
  MADX.k2s2 =  9.4192484499091078e-01
  MADX.k2s3 =  2.0561449206452531e+00
  MADX.k2s4 =  2.0514376425141489e-02
  MADX.k2s5 = -1.8946963289906037e-02
  MADX.k2s6 = -1.3176823256813293e+00
  MADX.k2s7 = -1.2904132514719964e+00
  MADX.k2s8 = -3.8890886123114882e-01
end

local X0 = damap{nv=6, np=8, mo=5, po=1,
                 vn={'x','px','y','py','t','pt',
                     'k2s1','k2s2','k2s3','k2s4','k2s5','k2s6','k2s7','k2s8'}}

-- set strengths as knobs
MADX.k2s1 = X0.k2s1 + MADX.k2s1
MADX.k2s2 = X0.k2s2 + MADX.k2s2
MADX.k2s3 = X0.k2s3 + MADX.k2s3
MADX.k2s4 = X0.k2s4 + MADX.k2s4
MADX.k2s5 = X0.k2s5 + MADX.k2s5
MADX.k2s6 = X0.k2s6 + MADX.k2s6
MADX.k2s7 = X0.k2s7 + MADX.k2s7
MADX.k2s8 = X0.k2s8 + MADX.k2s8

MADX.k2s1:print("MADX.k2s1") ;
MADX.k2s2:print("MADX.k2s2") ;
MADX.k2s3:print("MADX.k2s3") ;
MADX.k2s4:print("MADX.k2s4") ;
MADX.k2s5:print("MADX.k2s5") ;
MADX.k2s6:print("MADX.k2s6") ;
MADX.k2s7:print("MADX.k2s7") ;
MADX.k2s8:print("MADX.k2s8") ;

local function get_dq()
  local _, mflw = track{sequence=fcc_e_ring, method=4, nslice=1, X0=X0}
  mflw[1]:get0():print("Orbit", 'line')
  local nf = normal(mflw[1]):analyse('anh') -- ; prt_rdt(nf, 'anh')

  local res = {q1p1    =nf.anh["10000100000000"], q2p1    =nf.anh["00100100000000"],
               q1p1s1  =nf.anh["10000110000000"], q2p1s1  =nf.anh["00100110000000"],
               q1p1s2  =nf.anh["10000101000000"], q2p1s2  =nf.anh["00100101000000"],
               q1p1s3  =nf.anh["10000100100000"], q2p1s3  =nf.anh["00100100100000"],
               q1p1s4  =nf.anh["10000100010000"], q2p1s4  =nf.anh["00100100010000"],
               q1p1s5  =nf.anh["10000100001000"], q2p1s5  =nf.anh["00100100001000"],
               q1p1s6  =nf.anh["10000100000100"], q2p1s6  =nf.anh["00100100000100"],
               q1p1s7  =nf.anh["10000100000010"], q2p1s7  =nf.anh["00100100000010"],
               q1p1s8  =nf.anh["10000100000001"], q2p1s8  =nf.anh["00100100000001"],

               q1p2    =nf.anh["10000200000000"], q2p2    =nf.anh["00100200000000"],
               q1p2s1  =nf.anh["10000210000000"], q2p2s1  =nf.anh["00100210000000"],
               q1p2s2  =nf.anh["10000201000000"], q2p2s2  =nf.anh["00100201000000"],
               q1p2s3  =nf.anh["10000200100000"], q2p2s3  =nf.anh["00100200100000"],
               q1p2s4  =nf.anh["10000200010000"], q2p2s4  =nf.anh["00100200010000"],
               q1p2s5  =nf.anh["10000200001000"], q2p2s5  =nf.anh["00100200001000"],
               q1p2s6  =nf.anh["10000200000100"], q2p2s6  =nf.anh["00100200000100"],
               q1p2s7  =nf.anh["10000200000010"], q2p2s7  =nf.anh["00100200000010"],
               q1p2s8  =nf.anh["10000200000001"], q2p2s8  =nf.anh["00100200000001"],

               q1p3    =nf.anh["10000300000000"], q2p3    =nf.anh["00100300000000"],
               q1p3s1  =nf.anh["10000310000000"], q2p3s1  =nf.anh["00100310000000"],
               q1p3s2  =nf.anh["10000301000000"], q2p3s2  =nf.anh["00100301000000"],
               q1p3s3  =nf.anh["10000300100000"], q2p3s3  =nf.anh["00100300100000"],
               q1p3s4  =nf.anh["10000300010000"], q2p3s4  =nf.anh["00100300010000"],
               q1p3s5  =nf.anh["10000300001000"], q2p3s5  =nf.anh["00100300001000"],
               q1p3s6  =nf.anh["10000300000100"], q2p3s6  =nf.anh["00100300000100"],
               q1p3s7  =nf.anh["10000300000010"], q2p3s7  =nf.anh["00100300000010"],
               q1p3s8  =nf.anh["10000300000001"], q2p3s8  =nf.anh["00100300000001"],

               q1p4    =nf.anh["10000400000000"], q2p4    =nf.anh["00100400000000"],
              }

  -- first output should be: q1p1= -559.373351, q2p2= -476.581877
  printf("q1p1 = % -.6e, q2p1 = % -.6e\n", res.q1p1, res.q2p1)
  printf("q1p2 = % -.6e, q2p2 = % -.6e\n", res.q1p2, res.q2p2)
  printf("q1p3 = % -.6e, q2p3 = % -.6e\n", res.q1p3, res.q2p3)
  printf("q1p4 = % -.6e, q2p4 = % -.6e\n", res.q1p4, res.q2p4)

  return res
end

if false then  -- run once for check
  get_dq()
  os.exit()
end

match {
  command := get_dq(),
  
  jacobian = \t,grd,jac => -- gradient not used, fill only jacobian
    assert(t, "t is nil in match.jacobian")
              --> parameters
    jac:fill{{t.q1p1s1, t.q1p1s2, t.q1p1s3, t.q1p1s4, t.q1p1s5, t.q1p1s6, t.q1p1s7, t.q1p1s8 }, --     |
             {t.q2p1s1, t.q2p1s2, t.q2p1s3, t.q2p1s4, t.q2p1s5, t.q2p1s6, t.q2p1s7, t.q2p1s8 }, --     |
             {t.q1p2s1, t.q1p2s2, t.q1p2s3, t.q1p2s4, t.q1p2s5, t.q1p2s6, t.q1p2s7, t.q1p2s8 }, --     v
             {t.q2p2s1, t.q2p2s2, t.q2p2s3, t.q2p2s4, t.q2p2s5, t.q2p2s6, t.q2p2s7, t.q2p2s8 }, -- constraints
             {t.q1p3s1, t.q1p3s2, t.q1p3s3, t.q1p3s4, t.q1p3s5, t.q1p3s6, t.q1p3s7, t.q1p3s8 },
             {t.q2p3s1, t.q2p3s2, t.q2p3s3, t.q2p3s4, t.q2p3s5, t.q2p3s6, t.q2p3s7, t.q2p3s8 },
            }
  end,
  variables = { rtol=1e-6, -- 1 ppm  -- rtol=1e-10, rtol=1e-12,
    { name='k2s1', var='MADX.k2s1' },
    { name='k2s2', var='MADX.k2s2' },
    { name='k2s3', var='MADX.k2s3' },
    { name='k2s4', var='MADX.k2s4' },
    { name='k2s5', var='MADX.k2s5' },
    { name='k2s6', var='MADX.k2s6' },
    { name='k2s7', var='MADX.k2s7' },
    { name='k2s8', var='MADX.k2s8' },
  },
  equalities = {                    -- target
    { name='q1p1', expr = \t -> t.q1p1 - 0   , tol=1e-5, weight=1   , kind="Q'"    },
    { name='q2p1', expr = \t -> t.q2p1 - 0   , tol=1e-5, weight=1   , kind="Q'"    },
    { name='q1p2', expr = \t -> t.q1p2 - 0   , tol=1e-4, weight=0.5 , kind="Q\""   },
    { name='q2p2', expr = \t -> t.q2p2 - 0   , tol=1e-4, weight=0.5 , kind="Q\""   },
    { name='q1p3', expr = \t -> t.q1p3 - 0   , tol=1e-3, weight=0.1 , kind="Q\"'"  },
    { name='q2p3', expr = \t -> t.q2p3 - 0   , tol=1e-3, weight=0.1 , kind="Q\"'"  },
  },
  objective = { bisec=5 },
  maxcall=1000, info=4, -- debug=3
}

-- set strengths as scalar
MADX.k2s1 = MADX.k2s1:get0()
MADX.k2s2 = MADX.k2s2:get0()
MADX.k2s3 = MADX.k2s3:get0()
MADX.k2s4 = MADX.k2s4:get0()
MADX.k2s5 = MADX.k2s5:get0()
MADX.k2s6 = MADX.k2s6:get0()
MADX.k2s7 = MADX.k2s7:get0()
MADX.k2s8 = MADX.k2s8:get0()

-- print parameters to full precision
printf("MADX.k2s1 = % -.16e\n", MADX.k2s1) ;
printf("MADX.k2s2 = % -.16e\n", MADX.k2s2) ;
printf("MADX.k2s3 = % -.16e\n", MADX.k2s3) ;
printf("MADX.k2s4 = % -.16e\n", MADX.k2s4) ;
printf("MADX.k2s5 = % -.16e\n", MADX.k2s5) ;
printf("MADX.k2s6 = % -.16e\n", MADX.k2s6) ;
printf("MADX.k2s7 = % -.16e\n", MADX.k2s7) ;
printf("MADX.k2s8 = % -.16e\n", MADX.k2s8) ;
