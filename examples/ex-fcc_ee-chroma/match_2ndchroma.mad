-- time ../mad -Oloopunroll=500 -Oinstunroll=100 -jp=vl match_2ndchroma.mad > match_2ndchroma.out 2>&1

local beam, track, twiss, match, damap, option in MAD
local mchklost, melmcol, normal                in MAD.gphys
local abs, real, imag                          in MAD.gmath
local printf                                   in MAD.utility


local mem = collectgarbage("count")

MADX:load("FCCee_529.seq", "FCCee_529.mad") -- convert on need
MADX:load("sextupole_circuits_2.madx", "sextupole_circuit_2.mad") -- convert on need

print("memory used by FCC-ee:", collectgarbage("count") - mem, " Kbytes")

local fcc_e_ring in MADX

option.nocharge = true -- IMPORTANT!!

fcc_e_ring.beam = beam {particle="electron",
                        pc=182.5,
                        ex=1.46e-9,
                        ey=2.9e-12}

! set slices for some classes
MADX.QC1L1.nslice=3
MADX.QC1R2.nslice=3
MADX.QC1R3.nslice=3
MADX.QC2R1.nslice=3
MADX.QC2R2.nslice=3
MADX.QC2L2.nslice=3
MADX.QC2L1.nslice=3
MADX.QC1L3.nslice=3
MADX.QC1L2.nslice=3

MADX.SY1R .nslice=3
MADX.SY2R .nslice=3
MADX.SY2L .nslice=3
MADX.SY1L .nslice=3

! Set voltages to zero 
MADX.voltca1 = 0
MADX.voltca2 = 0

-------------------------------------------------------------------------------o
-- small checks                                                              --o
-------------------------------------------------------------------------------o

if false then -- set to true to run twiss checks

-- track columns
local tkcols = {'name','kind','s', 'l', 'x','px', 'y','py'}

-- twiss columns
local twcols = {'name','kind','s', 'l', 'x','px', 'y','py',
'beta11','alfa11','beta22','alfa22','dx','dpx','mu1','mu2',}
!'angle','k0l','k1l','k2l','k3l','hkick','vkick', 'volt'}

-- extra columns
local xcols = {'angle', 'tilt',
              'k0l' , 'k1l' , 'k2l' , 'k3l' , 'k4l' , 'k5l' , 'k6l',
              'k0sl', 'k1sl', 'k2sl', 'k3sl', 'k4sl', 'k5sl', 'k6sl',
              'ksl', 'hkick', 'vkick', 'volt'}

-- local tk = track {sequence=fcc_e_ring, method=6, nslice=3, observe=0}
-- tk:write("FCCee_track.tfs", tkcols)

local tw = twiss {sequence=fcc_e_ring, method=6, nslice=3, mapdef=2}

-- add extra columns to twiss table
-- melmcol(tw, xcols)

tw:write("FCCee_twiss.tfs", twcols)
end

-------------------------------------------------------------------------------o
-- match chromas                                                             --o
-------------------------------------------------------------------------------o

local prt_rdt = function (nf, kind)
  local a = assert(nf[kind], "invalid kind '"..kind.."'")
  for i,k in ipairs(a) do
    local v = nf[kind][k]
    printf("%4d: %s[%s] C=% .6e, S=% .6e, A=% .6e\n",i,kind,k, real(v),imag(v),abs(v))
  end
end

if false then -- use initial guess from MADX-PTC
  MADX.k2s1 =  4.56163e-01;
  MADX.k2s2 =  4.56163e-01;
  MADX.k2s3 = -7.43662e-01;
  MADX.k2s4 = -7.43662e-01;
end

local X0 = damap{nv=6, np=4, mo=4, po=1,
                 vn={'x','px','y','py','t','pt',
                     'k2s1','k2s2','k2s3','k2s4'}}

-- set strengths as knobs
MADX.k2s1 = X0.k2s1 + MADX.k2s1
MADX.k2s2 = X0.k2s2 + MADX.k2s2
MADX.k2s3 = X0.k2s3 + MADX.k2s3
MADX.k2s4 = X0.k2s4 + MADX.k2s4

MADX.k2s1:print("MADX.k2s1") ;
MADX.k2s2:print("MADX.k2s2") ;
MADX.k2s3:print("MADX.k2s3") ;
MADX.k2s4:print("MADX.k2s4") ;

local n = 0

local function get_dq()
  n = n + 1
  local _, mflw = track{sequence=fcc_e_ring, method=4, nslice=1, X0=X0}
  mflw[1]:get0():print("Orbit", 'line')
  --mflw[1]:write("M_full_"..n, "M", true, 0)
  local nf = normal(mflw[1]):analyse('anh') -- ; prt_rdt(nf, 'anh')
  --nf.a:write("A_full_"..n, "A", true, 0)

  local res = {q1p1    =nf.anh["1000010000"], q2p1    =nf.anh["0010010000"],
               q1p1s1  =nf.anh["1000011000"], q2p1s1  =nf.anh["0010011000"],
               q1p1s2  =nf.anh["1000010100"], q2p1s2  =nf.anh["0010010100"],
               q1p1s3  =nf.anh["1000010010"], q2p1s3  =nf.anh["0010010010"],
               q1p1s4  =nf.anh["1000010001"], q2p1s4  =nf.anh["0010010001"],

               q1p2    =nf.anh["1000020000"], q2p2    =nf.anh["0010020000"],
               q1p2s1  =nf.anh["1000021000"], q2p2s1  =nf.anh["0010021000"],
               q1p2s2  =nf.anh["1000020100"], q2p2s2  =nf.anh["0010020100"],
               q1p2s3  =nf.anh["1000020010"], q2p2s3  =nf.anh["0010020010"],
               q1p2s4  =nf.anh["1000020001"], q2p2s4  =nf.anh["0010020001"],

               q1p3    =nf.anh["1000030000"], q2p3    =nf.anh["0010030000"],
              }

    -- first output should be: dq1= -559.373351, dq2= -476.581877
    printf("q1p1 = % -.6e, q2p1 = % -.6e\n", res.q1p1, res.q2p1)
    printf("q1p2 = % -.6e, q2p2 = % -.6e\n", res.q1p2, res.q2p2)
    printf("q1p3 = % -.6e, q2p3 = % -.6e\n", res.q1p3, res.q2p3)

  return res
end

if false then  -- run once for check
  get_dq()
  os.exit()
end

match {
  command := get_dq(),
  
  jacobian = \t,grd,jac => -- gradient not used, fill only jacobian
    assert(t, "t is nil in match.jacobian")
              --> parameters
    jac:fill{{t.q1p1s1, t.q1p1s2, t.q1p1s3, t.q1p1s4 }, --     |
             {t.q2p1s1, t.q2p1s2, t.q2p1s3, t.q2p1s4 }, --     |
             {t.q1p2s1, t.q1p2s2, t.q1p2s3, t.q1p2s4 }, --     v
             {t.q2p2s1, t.q2p2s2, t.q2p2s3, t.q2p2s4 }, -- constraints
            }
  end,
  variables = { rtol=1e-6, -- 1 ppm
    { name='k2s1', var='MADX.k2s1' },
    { name='k2s2', var='MADX.k2s2' },
    { name='k2s3', var='MADX.k2s3' },
    { name='k2s4', var='MADX.k2s4' },
  },
  equalities = {
    { name='q1p1', expr = \t -> t.q1p1 - 0, tol=1e-5, weight=1   , kind="Q'"    },
    { name='q2p1', expr = \t -> t.q2p1 - 0, tol=1e-5, weight=1   , kind="Q'"    },
    { name='q1p2', expr = \t -> t.q1p2 - 0, tol=1e-4, weight=0.5 , kind="Q\""   },
    { name='q2p2', expr = \t -> t.q2p2 - 0, tol=1e-4, weight=0.5 , kind="Q\""   },
  },
--  objective = { fmin=1e-12 },
  maxcall=100, info=4, debug=3
}

-- set strengths as scalar
MADX.k2s1 = MADX.k2s1:get0()
MADX.k2s2 = MADX.k2s2:get0()
MADX.k2s3 = MADX.k2s3:get0()
MADX.k2s4 = MADX.k2s4:get0()

-- print parameters to full precision
printf("MADX.k2s1 = % -.16e\n", MADX.k2s1) ;
printf("MADX.k2s2 = % -.16e\n", MADX.k2s2) ;
printf("MADX.k2s3 = % -.16e\n", MADX.k2s3) ;
printf("MADX.k2s4 = % -.16e\n", MADX.k2s4) ;
