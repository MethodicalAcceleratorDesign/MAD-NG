-- time ../mad ex-lhc-f2002.mad > ex-lhc-f2002.out 2>&1

local beam, track, twiss, match, damap         in MAD
local normal                                   in MAD.gphys
local abs, real, imag                          in MAD.gmath
local printf, tblcat                           in MAD.utility

MADX:load("lhcb1_saved.seq", "lhcb1_saved.mad") -- convert on need
MADX:load("lhcb2_saved.seq", "lhcb2_saved.mad") -- convert on need
MADX:load("lhc_vars0.mad")

local lhcb1, lhcb2 in MADX

-- need to create a "new" particle for MAD-X compatibility (old pmass?)
local lhc_beam = beam {particle="xproton", charge=1, mass=0.938272046, energy=450}
lhcb1.beam = lhc_beam
lhcb2.beam = lhc_beam
lhcb2.dir  = -1 -- bv = -1

-- track and twiss columns
local tkcols = {'name','s','l','x','px','y','py'}
local twcols = {'name','s','beta11','beta22','mu1','mu2','dx','dy','x','y'}

-- select observed elements
local observed in MAD.element.flags

for _,lhc in ipairs{lhcb1,lhcb2} do
  lhc:deselect(observed)
  lhc:  select(observed, {pattern="BPM"})
  lhc:  select(observed, {pattern="IP"})
  lhc:  select(observed, {pattern="MO"})
end

-------------------------------------------------------------------------------o
-- small checks                                                              --o
-------------------------------------------------------------------------------o

if false then -- set to true to run twiss checks

local tw1 = twiss {sequence=lhcb1, method=4, observe=1}
local tw2 = twiss {sequence=lhcb2, method=4, observe=1}

tw1:write("twiss_b1_n.tfs", twcols)
tw2:write("twiss_b2_n.tfs", twcols)

os.exit()
end

-------------------------------------------------------------------------------o
-- set variables in MADX env                                                 --o
-------------------------------------------------------------------------------o

MADX:open_env()

! Tune change and chroma

dQx_b1_op=-0.035;
dQy_b1_op=-0.025;
dQpx_b1_op=15;
dQpy_b1_op=15;

dQx_b2_op=-0.035;
dQy_b2_op=-0.025;
dQpx_b2_op=15;
dQpy_b2_op=15;

! Phase change

a1 = -1.22598e-05;
a2 = -1.24548e-05;
b1 = -2.89785e-05;
b2 = -2.88736e-05;

kqf_a12 = kqf_a12 + a1 ;
kqf_a23 = kqf_a23 + a1 ;
kqf_a34 = kqf_a34 + a1 ;
kqf_a45 = kqf_a45 + a1 ;
kqf_a56 = kqf_a56 - a2 ;
kqf_a67 = kqf_a67 - a2 ;
kqf_a78 = kqf_a78 - a2 ;
kqf_a81 = kqf_a81 - a2 ;
kqd_a12 = kqd_a12 + b1 ;
kqd_a23 = kqd_a23 + b1 ;
kqd_a34 = kqd_a34 + b1 ;
kqd_a45 = kqd_a45 + b1 ;
kqd_a56 = kqd_a56 - b2 ;
kqd_a67 = kqd_a67 - b2 ;
kqd_a78 = kqd_a78 - b2 ;
kqd_a81 = kqd_a81 - b2 ;

a1=  1.50366e-04;
a2=  1.44269e-04;
b1= -8.08072e-04;
b2= -8.02084e-04;

kqtf_a12b1 = kqtf_a12b1 + a1 ;
kqtf_a23b1 = kqtf_a23b1 + a1 ;
kqtf_a34b1 = kqtf_a34b1 + a1 ;
kqtf_a45b1 = kqtf_a45b1 + a1 ;
kqtf_a56b1 = kqtf_a56b1 - a2 ;
kqtf_a67b1 = kqtf_a67b1 - a2 ;
kqtf_a78b1 = kqtf_a78b1 - a2 ;
kqtf_a81b1 = kqtf_a81b1 - a2*2 ;
kqtd_a12b1 = kqtd_a12b1 + b1 ;
kqtd_a23b1 = kqtd_a23b1 + b1 ;
kqtd_a34b1 = kqtd_a34b1 + b1 ;
kqtd_a45b1 = kqtd_a45b1 + b1 ;
kqtd_a56b1 = kqtd_a56b1 - b2 ;
kqtd_a67b1 = kqtd_a67b1 - b2 ;
kqtd_a78b1 = kqtd_a78b1 - b2 ;
kqtd_a81b1 = kqtd_a81b1 - b2 ;

kqtf_a12b2 = kqtf_a12b2 + a1 ;
kqtf_a23b2 = kqtf_a23b2 + a1 ;
kqtf_a34b2 = kqtf_a34b2 + a1 ;
kqtf_a45b2 = kqtf_a45b2 + a1 ;
kqtf_a56b2 = kqtf_a56b2 - a2 ;
kqtf_a67b2 = kqtf_a67b2 - a2 ;
kqtf_a78b2 = kqtf_a78b2 - a2 ;
kqtf_a81b2 = kqtf_a81b2 - a2*2 ;
kqtd_a12b2 = kqtd_a12b2 + b1 ;
kqtd_a23b2 = kqtd_a23b2 + b1 ;
kqtd_a34b2 = kqtd_a34b2 + b1 ;
kqtd_a45b2 = kqtd_a45b2 + b1 ;
kqtd_a56b2 = kqtd_a56b2 - b2 ;
kqtd_a67b2 = kqtd_a67b2 - b2 ;
kqtd_a78b2 = kqtd_a78b2 - b2 ;
kqtd_a81b2 = kqtd_a81b2 - b2 ;

! Octupole knob

!ko= kmax_MO/Imax_MO * 40 / (450*3.33);
ko= 18;

kof_a81b1 = ko;
kof_a12b1 = ko;
kof_a23b1 = ko;
kof_a34b1 = ko;
kof_a45b1 = ko;
kof_a56b1 = ko;
kof_a67b1 = ko;
kof_a78b1 = ko;
kod_a81b1 = ko;
kod_a12b1 = ko;
kod_a23b1 = ko;
kod_a34b1 = ko;
kod_a45b1 = ko;
kod_a56b1 = ko;
kod_a67b1 = ko;
kod_a78b1 = ko;

kof_a81b2 = ko;
kof_a12b2 = ko;
kof_a23b2 = ko;
kof_a34b2 = ko;
kof_a45b2 = ko;
kof_a56b2 = ko;
kof_a67b2 = ko;
kof_a78b2 = ko;
kod_a81b2 = ko;
kod_a12b2 = ko;
kod_a23b2 = ko;
kod_a34b2 = ko;
kod_a45b2 = ko;
kod_a56b2 = ko;
kod_a67b2 = ko;
kod_a78b2 = ko;

-- INIT (from above)
!kqtf_a12b1 =  1.50366e-04
!kqtf_a23b1 = -9.08345e-04
!kqtf_a34b1 = -9.08345e-04
!kqtf_a45b1 =  1.50366e-04
!kqtf_a56b1 = -1.44269e-04
!kqtf_a67b1 =  3.30131e-04
!kqtf_a78b1 =  3.30131e-04
!kqtf_a81b1 = -2.88538e-04
!kqtd_a12b1 = -8.08072e-04
!kqtd_a23b1 =  3.34849e-04
!kqtd_a34b1 =  3.34849e-04
!kqtd_a45b1 = -8.08072e-04
!kqtd_a56b1 =  8.02084e-04
!kqtd_a67b1 =  9.59063e-05
!kqtd_a78b1 =  9.59063e-05
!kqtd_a81b1 =  8.02084e-04

-- MAD-NG (Lua 300s, C++ 195s, 21 calls/evals)
!kqtf_a12b1 =  9.65714e-04
!kqtf_a23b1 = -1.56258e-03
!kqtf_a34b1 =  1.32575e-04
!kqtf_a45b1 = -2.26272e-03
!kqtf_a56b1 =  1.26679e-03
!kqtf_a67b1 =  2.78383e-03
!kqtf_a78b1 = -7.85951e-04
!kqtf_a81b1 = -3.23136e-03
!kqtd_a12b1 =  3.59042e-03
!kqtd_a23b1 = -2.67298e-03
!kqtd_a34b1 =  6.80508e-04
!kqtd_a45b1 = -1.57470e-03
!kqtd_a56b1 =  9.21011e-04
!kqtd_a67b1 =  4.48226e-04
!kqtd_a78b1 = -2.64167e-03
!kqtd_a81b1 =  2.03625e-03
-- fbst[1]=1.41612e-01, status=FMIN.

-- MADX-PTC (2730s, 11 calls, 342 evals)
!kqtf_a12b1 =  1.57722e-03
!kqtf_a23b1 = -2.50085e-03
!kqtf_a34b1 =  8.04785e-04
!kqtf_a45b1 = -2.12862e-03
!kqtf_a56b1 =  1.43253e-03
!kqtf_a67b1 =  2.63775e-03
!kqtf_a78b1 = -1.58033e-03
!kqtf_a81b1 = -2.55246e-03
!kqtd_a12b1 =  2.61744e-03
!kqtd_a23b1 = -1.60398e-03
!kqtd_a34b1 =  3.66436e-04
!kqtd_a45b1 = -1.98405e-03
!kqtd_a56b1 =  5.96210e-04
!kqtd_a67b1 =  1.04145e-03
!kqtd_a78b1 = -2.27613e-03
!kqtd_a81b1 =  1.99615e-03
-- fbst[1]=1.84363e-01, status=FMIN.

-- MAD-X + MAD-NG (227s, 10 calls, 164 evals)
!kqtf.a12b1 =  1.58311e-03
!kqtf.a23b1 = -2.51231e-03
!kqtf.a34b1 =  8.12184e-04
!kqtf.a45b1 = -2.12493e-03
!kqtf.a56b1 =  1.43272e-03
!kqtf.a67b1 =  2.63427e-03
!kqtf.a78b1 = -1.58591e-03
!kqtf.a81b1 = -2.54527e-03
!kqtd.a12b1 =  2.60861e-03
!kqtd.a23b1 = -1.58794e-03
!kqtd.a34b1 =  3.61736e-04
!kqtd.a45b1 = -1.99235e-03
!kqtd.a56b1 =  6.05500e-04
!kqtd.a67b1 =  1.03998e-03
!kqtd.a78b1 = -2.27906e-03
!kqtd.a81b1 =  1.99704e-03

MADX:close_env()

-------------------------------------------------------------------------------o
-- small checks                                                              --o
-------------------------------------------------------------------------------o

if false then -- set to true to run twiss checks

local tw1 = twiss {sequence=lhcb1, method=4, observe=1, chrom=true, cmap=true}
local tw2 = twiss {sequence=lhcb2, method=4, observe=1, chrom=true, cmap=true}

tw1:write("twiss_phase_b1_n.tfs", twcols)
tw2:write("twiss_phase_b2_n.tfs", twcols)

--[[ ref values
LHCB1
q1  = 62.27504896
q2  = 60.29512787
dq1 = 15.1778898
dq2 = 15.21652238

LHCB2
q1  = 62.27115164
q2  = 60.29725754
dq1 = 15.15613102
dq2 = 15.23680003
--]]

os.exit()
end

local q1b1_ref, q2b1_ref = 0.27504896, 0.29512787 -- (62. and 60.)
local q1b2_ref, q2b2_ref = 0.27115164, 0.29725754 -- (62. and 60.)

-------------------------------------------------------------------------------o
-- helpers                                                                   --o
-------------------------------------------------------------------------------o

-- Print RDTs for debug
-- e.g. prt_rdt(nf, 'anh') ; prt_rdt(nf, 'gnf')

local function prt_rdt (nf, kind)
  local a = assert(nf[kind], "invalid kind '"..kind.."'")
  for i,k in ipairs(a) do
    local v = nf[kind][k]
    printf("%4d: %s[%s] A=% .6e, C=% .6e, S=% .6e\n",i,kind,k,abs(v),real(v),imag(v))
  end
end

-------------------------------------------------------------------------------o
-- match                                                                     --o
-------------------------------------------------------------------------------o

-- magnet families and sectors names
local knam = {'kqtf', 'kqtd', 'kof', 'kod'}
local snam = {'a12', 'a23', 'a34', 'a45', 'a56', 'a67', 'a78', 'a81'}

-- loop over lhcb1 and lhcb2
for _,bn in ipairs{'b1'} do

local lhc = MADX['lhc'..bn]

-- observation points
lhc:deselect(observed)
lhc:  select(observed, {pattern="IP"})

-- list of variables names
local vars = {'x','px','y','py','t','pt'}

-- list of parameters/knobs names
local prms = {}
for _,ks in ipairs(knam) do
for _,ss in ipairs(snam) do
  prms[#prms+1] = ks .. '.' .. ss .. bn -- names
end end

-- refer to phase-space
local X0

local function get_nf()
  local _, mflw = track {sequence=lhc, save=false, X0=X0}
  -- mflw[1]:get0():print("Orbit", 'line') -- uncomment to check orbit
  return normal(mflw[1]):analyse('all');
end

-- create phase space damap at 4th order
X0 = damap{nv=#vars, mo=4, vn=vars}
-- print("len=", 6*#X0.x)

-- run once for reference values
local nf         = get_nf()
local q1_ref     = nf:q1{1}
local q2_ref     = nf:q2{1}
local q1j1_ref   = nf:anhx{1,0}
local q2j2_ref   = nf:anhy{0,1}
local f2002r_ref = nf:gnfu"2002".re
local f2002i_ref = nf:gnfu"2002".im
local f4000r_ref = nf:gnfu"4000".re
local f4000i_ref = nf:gnfu"4000".im
local f0040r_ref = nf:gnfu"0040".re
local f0040i_ref = nf:gnfu"0040".im

printf("q1_ref     = % -.6e\n", q1_ref)
printf("q2_ref     = % -.6e\n", q2_ref)
printf("q1j1_ref   = % -.6e\n", q1j1_ref)
printf("q2j2_ref   = % -.6e\n", q2j2_ref)
printf("f2002r_ref = % -.6e\n", f2002r_ref)
printf("f2002i_ref = % -.6e\n", f2002i_ref)
printf("f4000r_ref = % -.6e\n", f4000r_ref)
printf("f4000i_ref = % -.6e\n", f4000i_ref)
printf("f0040r_ref = % -.6e\n", f0040r_ref)
printf("f0040i_ref = % -.6e\n", f0040i_ref)

-- run once and quit
!os.exit()

--[[ 1st pass results for cross-check BEFORE matching
../mad ex-lhc-f2002.mad
../madx64 ex-lhc-f2002.madx

MAD-NG (1.8 s)
q1_ref     =  2.750490e-01
q2_ref     =  2.951279e-01
q1j1_ref   =  3.048576e+05
q2j2_ref   =  2.980216e+05
f2002r_ref = -8.811992e+04
f2002i_ref =  4.850031e+04
f4000r_ref =  5.212319e+01
f4000i_ref = -2.507562e+03
f0040r_ref =  1.248472e+04
f0040i_ref = -5.952791e+03

PTC_NORMAL (9 s)
q1_ref     =  2.750490e-01
q2_ref     =  2.951279e-01
q1j1_ref   =  3.048599e+05
q2j2_ref   =  2.980282e+05
f2002r_ref = -8.811982e+04
f2002i_ref =  4.849994e+04
f4000r_ref =  5.216322e+01
f4000i_ref = -2.507563e+03
f0040r_ref =  1.248488e+04
f0040i_ref = -5.952942e+03

PTC_TWISS (17 s)
q1_ref     =  2.750490e-01
q2_ref     =  2.951279e-01
q1j1_ref   =  3.048599e+05
q2j2_ref   =  2.980282e+05
f2002r_ref = -8.811982e+04
f2002i_ref =  4.849994e+04
f4000r_ref =  5.216322e+01
f4000i_ref = -2.507563e+03
f0040r_ref =  1.248488e+04
f0040i_ref = -5.952942e+03
--]]

-- create phase space damap at 5th order with 32 parameters
X0 = damap{nv=#vars, np=#prms, mo=5, po=1,
           vn=tblcat(vars,prms)}
--print("len=", 6*#X0.x)

-- set strengths as knobs
local vars = {} -- 1 ppm -- rtol=1e-10

for i, knb in ipairs(prms) do
  vars[i] = { name=knb, var='MADX["'..knb..'"]'} --, step=-MADX[knb]/1000}

  -- add boundaries to mqt strengths
--  if knb:sub(1,3) == 'kqt' then vars[i].min, vars[i].max = -0.1, 0.1 end

  -- convert scalar to GTPSA
  MADX[knb] = MADX[knb] + X0[knb]
end

match {
  command := get_nf(),
  
  jacobian = \nf,_,J =>
    --> parameters
    for k=1,#prms do                  --     |
      J:set(1,k,  nf:q1{1,k} or 0)    --     |
      J:set(2,k,  nf:q2{1,k} or 0)    --     v
      J:set(3,k,  nf:anhx{1,0,0,k})   -- constraints
      J:set(4,k,  nf:anhy{0,1,0,k})
      J:set(5,k,  nf:gnfu{"2002",k}.re)
      J:set(6,k,  nf:gnfu{"2002",k}.im)
      J:set(7,k,  nf:gnfu{"4000",k}.re)
      J:set(8,k,  nf:gnfu{"4000",k}.im)
      J:set(9,k,  nf:gnfu{"0040",k}.re)
      J:set(10,k, nf:gnfu{"0040",k}.im)
    end
  end,

  variables = vars,

  equalities = {
    { name='q1'    , expr = \nf -> nf:q1{1}     - q1_ref  },
    { name='q2'    , expr = \nf -> nf:q2{1}     - q2_ref  },
    { name='q1j1'  , expr = \nf -> nf:anhx{1,0} - q1j1_ref},
    { name='q2j2'  , expr = \nf -> nf:anhy{0,1} - q2j2_ref},
    { name='f2002r', expr = \nf -> nf:gnfu"2002".re},
    { name='f2002i', expr = \nf -> nf:gnfu"2002".im},
    { name='f4000r', expr = \nf -> nf:gnfu"4000".re},
    { name='f4000i', expr = \nf -> nf:gnfu"4000".im},
    { name='f0040r', expr = \nf -> nf:gnfu"0040".re},
    { name='f0040i', expr = \nf -> nf:gnfu"0040".im},
  },
  objective = {jstra=3},
  maxcall=500, info=4
}

-- restore strengths as scalars, print parameters to full precision (for restart/refinement)
for _, knb in ipairs(prms) do
  MADX[knb] = MADX[knb]:get0()
  printf("%-10s = % -.16e\n", knb, MADX[knb])
end

end -- loop over lhcb1 and lhcb2
