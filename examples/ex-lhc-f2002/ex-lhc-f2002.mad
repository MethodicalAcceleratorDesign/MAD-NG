-- time ../mad ex-lhc-f2002.mad > ex-lhc-f2002.out 2>&1

local beam, track, twiss, match, damap, option in MAD
local normal                                   in MAD.gphys
local abs, real, imag                          in MAD.gmath
local printf, tblcat                           in MAD.utility
local observed                                 in MAD.element.flags

-- track and twiss columns
local tkcols = {'name','s','l','x','px','y','py'}
local twcols = {'name','s','beta11','beta22','mu1','mu2','dx','dy','x','y'}

-- flag to run twiss checks
local twiss_check = 0 -- 1 do checks, -1 do checks and quit (no matching)

-------------------------------------------------------------------------------o
-- load LHCB1 and LHCB2                                                      --o
-------------------------------------------------------------------------------o

MADX:load("lhcb1_saved.seq", "lhcb1_saved.mad") -- convert on need
MADX:load("lhcb2_saved.seq", "lhcb2_saved.mad") -- convert on need
MADX:load("lhc_vars0.mad")                      -- avoid warnings

local lhcb1, lhcb2 in MADX

lhcb2.dir  = -1 -- lhcb2 is reversed, i.e. bv_flag = -1

-------------------------------------------------------------------------------o
-- preliminaries                                                             --o
-------------------------------------------------------------------------------o

-- need to create a "new" proton for MAD-X compatibility (old pmass?)
local lhc_beam = beam {particle="xproton", charge=1, mass=0.938272046, energy=450}

for _,lhc in ipairs{lhcb1,lhcb2} do
  -- attach beam to sequence
  lhc.beam = lhc_beam

  -- select observed elements for twiss
  lhc:deselect(observed)
  lhc:  select(observed, {pattern="BPM"})
  lhc:  select(observed, {pattern="IP" })
  lhc:  select(observed, {pattern="MO" })
end

-------------------------------------------------------------------------------o
-- twiss checks (optional)                                                   --o
-------------------------------------------------------------------------------o

local function prt_qs (seq, tw)
  printf("% 5s:  q1 = % -.6f,  q2 = % -.6f\n", seq.name, tw. q1, tw. q2)
  printf("      dq1 = % -.6f, dq2 = % -.6f\n",           tw.dq1, tw.dq2)
end

if twiss_check ~= 0 then

  local tw1 = twiss {sequence=lhcb1, method=4, observe=1, chrom=true}
  local tw2 = twiss {sequence=lhcb2, method=4, observe=1, chrom=true}

  prt_qs(lhcb1, tw1) ; tw1:write("twiss_b1_n.tfs", twcols)
  prt_qs(lhcb2, tw2) ; tw2:write("twiss_b2_n.tfs", twcols)

  -- if twiss_check < 0 then os.exit() end
end

-------------------------------------------------------------------------------o
-- set variables in MADX env                                                 --o
-------------------------------------------------------------------------------o

MADX:open_env()

! Tune change and chroma

dQx_b1_op=-0.035;
dQy_b1_op=-0.025;
dQpx_b1_op=15;
dQpy_b1_op=15;

dQx_b2_op=-0.035;
dQy_b2_op=-0.025;
dQpx_b2_op=15;
dQpy_b2_op=15;

! Phase change

a1 = -1.22598e-05;
a2 = -1.24548e-05;
b1 = -2.89785e-05;
b2 = -2.88736e-05;

kqf_a12 = kqf_a12 + a1 ;
kqf_a23 = kqf_a23 + a1 ;
kqf_a34 = kqf_a34 + a1 ;
kqf_a45 = kqf_a45 + a1 ;
kqf_a56 = kqf_a56 - a2 ;
kqf_a67 = kqf_a67 - a2 ;
kqf_a78 = kqf_a78 - a2 ;
kqf_a81 = kqf_a81 - a2 ;
kqd_a12 = kqd_a12 + b1 ;
kqd_a23 = kqd_a23 + b1 ;
kqd_a34 = kqd_a34 + b1 ;
kqd_a45 = kqd_a45 + b1 ;
kqd_a56 = kqd_a56 - b2 ;
kqd_a67 = kqd_a67 - b2 ;
kqd_a78 = kqd_a78 - b2 ;
kqd_a81 = kqd_a81 - b2 ;

a1 =  1.50366e-04;
a2 =  1.44269e-04;
b1 = -8.08072e-04;
b2 = -8.02084e-04;

kqtf_a12b1 = kqtf_a12b1 + a1 ;
kqtf_a23b1 = kqtf_a23b1 + a1 ;
kqtf_a34b1 = kqtf_a34b1 + a1 ;
kqtf_a45b1 = kqtf_a45b1 + a1 ;
kqtf_a56b1 = kqtf_a56b1 - a2 ;
kqtf_a67b1 = kqtf_a67b1 - a2 ;
kqtf_a78b1 = kqtf_a78b1 - a2 ;
kqtf_a81b1 = kqtf_a81b1 - a2*2 ;
kqtd_a12b1 = kqtd_a12b1 + b1 ;
kqtd_a23b1 = kqtd_a23b1 + b1 ;
kqtd_a34b1 = kqtd_a34b1 + b1 ;
kqtd_a45b1 = kqtd_a45b1 + b1 ;
kqtd_a56b1 = kqtd_a56b1 - b2 ;
kqtd_a67b1 = kqtd_a67b1 - b2 ;
kqtd_a78b1 = kqtd_a78b1 - b2 ;
kqtd_a81b1 = kqtd_a81b1 - b2 ;

kqtf_a12b2 = kqtf_a12b2 + a1 ;
kqtf_a23b2 = kqtf_a23b2 + a1 ;
kqtf_a34b2 = kqtf_a34b2 + a1 ;
kqtf_a45b2 = kqtf_a45b2 + a1 ;
kqtf_a56b2 = kqtf_a56b2 - a2 ;
kqtf_a67b2 = kqtf_a67b2 - a2 ;
kqtf_a78b2 = kqtf_a78b2 - a2 ;
kqtf_a81b2 = kqtf_a81b2 - a2*2 ;
kqtd_a12b2 = kqtd_a12b2 + b1 ;
kqtd_a23b2 = kqtd_a23b2 + b1 ;
kqtd_a34b2 = kqtd_a34b2 + b1 ;
kqtd_a45b2 = kqtd_a45b2 + b1 ;
kqtd_a56b2 = kqtd_a56b2 - b2 ;
kqtd_a67b2 = kqtd_a67b2 - b2 ;
kqtd_a78b2 = kqtd_a78b2 - b2 ;
kqtd_a81b2 = kqtd_a81b2 - b2 ;

! Octupole knob

!ko= kmax_MO/Imax_MO * 40 / (450*3.33);
ko= 18;

kof_a81b1 = ko;
kof_a12b1 = ko;
kof_a23b1 = ko;
kof_a34b1 = ko;
kof_a45b1 = ko;
kof_a56b1 = ko;
kof_a67b1 = ko;
kof_a78b1 = ko;
kod_a81b1 = ko;
kod_a12b1 = ko;
kod_a23b1 = ko;
kod_a34b1 = ko;
kod_a45b1 = ko;
kod_a56b1 = ko;
kod_a67b1 = ko;
kod_a78b1 = ko;

kof_a81b2 = ko;
kof_a12b2 = ko;
kof_a23b2 = ko;
kof_a34b2 = ko;
kof_a45b2 = ko;
kof_a56b2 = ko;
kof_a67b2 = ko;
kof_a78b2 = ko;
kod_a81b2 = ko;
kod_a12b2 = ko;
kod_a23b2 = ko;
kod_a34b2 = ko;
kod_a45b2 = ko;
kod_a56b2 = ko;
kod_a67b2 = ko;
kod_a78b2 = ko;

!kqtf_a12b1 = -1.6094161694852776e-03
!kqtf_a23b1 = -1.0203422470224930e-03
!kqtf_a34b1 =  3.7480463173743738e-04
!kqtf_a45b1 = -1.6904776333992840e-04
!kqtf_a56b1 = -8.2944198634752524e-04
!kqtf_a67b1 = -1.0349493644820011e-03
!kqtf_a78b1 =  2.3618657527335841e-03
!kqtf_a81b1 =  1.1988837567833658e-03
!kqtd_a12b1 =  2.3634012275131505e-03
!kqtd_a23b1 =  4.2241933428645078e-03
!kqtd_a34b1 = -4.1477857519868124e-03
!kqtd_a45b1 = -2.6876932871841915e-03
!kqtd_a56b1 =  5.4563481815244090e-03
!kqtd_a67b1 = -1.2060767273124060e-03
!kqtd_a78b1 = -5.0423149704372410e-03
!kqtd_a81b1 =  2.1416657439936562e-03
! kof_a12b1 =  1.8395356885320069e+01
! kof_a23b1 =  2.0724855509885771e+01
! kof_a34b1 =  1.8019950176287402e+01
! kof_a45b1 =  1.6733702476296170e+01
! kof_a56b1 =  2.1604644550495294e+01
! kof_a67b1 =  1.5697897063383046e+01
! kof_a78b1 =  9.3816991066507001e+00
! kof_a81b1 =  2.1869544717253902e+01
! kod_a12b1 =  1.6194125420968099e+01
! kod_a23b1 =  1.8203623131786713e+01
! kod_a34b1 =  1.6933905893263344e+01
! kod_a45b1 =  1.7029023020946845e+01
! kod_a56b1 =  2.5873446665912802e+01
! kod_a67b1 =  1.1004965054225151e+01
! kod_a78b1 =  1.4426263563798281e+01
! kod_a81b1 =  1.5579682872730944e+01

!kqtf_a12b2 =  4.1362471728984196e-03;
!kqtf_a23b2 = -1.3692918604206329e-03;
!kqtf_a34b2 = -3.6852784445332038e-03;
!kqtf_a45b2 = -2.5405475997734924e-03;
!kqtf_a56b2 =  3.2022915039154848e-03;
!kqtf_a67b2 = -7.8292410961495812e-04;
!kqtf_a78b2 = -2.9907379766850963e-03;
!kqtf_a81b2 =  2.9832821637438213e-03;
!kqtd_a12b2 =  2.6180817292850750e-03;
!kqtd_a23b2 = -2.1784451787869542e-03;
!kqtd_a34b2 = -1.8313744321669506e-03;
!kqtd_a45b2 = -2.7361640322949008e-03;
!kqtd_a56b2 =  4.6236843489706953e-04;
!kqtd_a67b2 =  3.5866454080238312e-03;
!kqtd_a78b2 = -8.0264557210441001e-04;
!kqtd_a81b2 =  1.5862207594527981e-03;
! kof_a12b2 =  1.7999811200387995e+01;
! kof_a23b2 =  1.7999885957725564e+01;
! kof_a34b2 =  1.7999813987238362e+01;
! kof_a45b2 =  1.7999882995830038e+01;
! kof_a56b2 =  1.7999810578369175e+01;
! kof_a67b2 =  1.7999883226843480e+01;
! kof_a78b2 =  1.7999811593908941e+01;
! kof_a81b2 =  1.7999884459952323e+01;
! kod_a12b2 =  1.7999988954631831e+01;
! kod_a23b2 =  1.7999981733490788e+01;
! kod_a34b2 =  1.7999989185370548e+01;
! kod_a45b2 =  1.7999981221299592e+01;
! kod_a56b2 =  1.7999988556510868e+01;
! kod_a67b2 =  1.7999982750749901e+01;
! kod_a78b2 =  1.7999989209467181e+01;
! kod_a81b2 =  1.7999982426968760e+01;

MADX:close_env()

-------------------------------------------------------------------------------o
-- twiss checks (optional)                                                   --o
-------------------------------------------------------------------------------o

if twiss_check ~= 0 then

  local tw1 = twiss {sequence=lhcb1, method=4, observe=1, chrom=true}
  local tw2 = twiss {sequence=lhcb2, method=4, observe=1, chrom=true}

  prt_qs(lhcb1, tw1) ; tw1:write("twiss_phase_b1_n.tfs", twcols)
  prt_qs(lhcb2, tw2) ; tw2:write("twiss_phase_b2_n.tfs", twcols)

  if twiss_check < 0 then os.exit() end
end

--[[ ref values
LHCB1
q1  = 62.27504896
q2  = 60.29512787
dq1 = 15.1778898
dq2 = 15.21652238

LHCB2
q1  = 62.27115164
q2  = 60.29725754
dq1 = 15.15613102
dq2 = 15.23680003
--]]

-------------------------------------------------------------------------------o
-- match                                                                     --o
-------------------------------------------------------------------------------o

-- knobs families and sectors names
local knam = {'kqtf', 'kqtd', 'kof', 'kod'}
local snam = {'a12', 'a23', 'a34', 'a45', 'a56', 'a67', 'a78', 'a81'}

-- list of IPs and GNFs
local ips = {'IP1','IP5'} -- {'IP1', 'IP2', 'IP3', 'IP4', 'IP5', 'IP6', 'IP7', 'IP8'}
local gfs = {'200200', '400000', '004000'}

-- index of (IP,GNF)
local idx_n = #gfs
local idx_f = \i,j -> 2*((i-1)*idx_n+(j-1))

-- loop over lhcb1 and lhcb2 ----------------
for _,bn in ipairs{'b1','b2'} do --

local lhc = MADX['lhc'..bn] -- current sequence

io.write("*** Running ", lhc.name, " ***\n")

-- for 2nd method in get_nf
lhc:deselect(observed, {pattern="BPM"})
lhc:deselect(observed, {pattern="MO" })

-- list of all knobs
local kn = {}
for _,ks in ipairs(knam) do
for _,ss in ipairs(snam) do
  kn[#kn+1] = ks .. '_' .. ss .. bn -- knob names
end end

-- create phase space damap
local X0 = damap{nv=6, np=#kn, mo=5, po=1,
                 vn=tblcat({'x','px','y','py','t','pt'}, kn)}

local function prt_rdt (nf, kind)
  local a = assert(nf[kind], "invalid kind '"..kind.."'")
  for i,k in ipairs(a) do
    local v = nf[kind][k]
    printf("%4d: %s[%s] A=% .6e, C=% .6e, S=% .6e\n",i,kind,k,abs(v),real(v),imag(v))
  end
end

-- compute RDTs
local mthd = "trkrdt" -- trkrdt needs new release of MAD-NG
local function get_nf(mthd)
  local nf, mth = {}, mthd or "trkrdt"

  if mth == "cycle" then       -- 1st method
    for i,ip in ipairs(ips) do
      io.write("** Tracking ", ip, "\n")
      lhc:cycle(ip)
      local _, mflw = track{sequence=lhc, method=4, save=false, X0=X0}
      nf[i] = normal(mflw[1]):analyse();
      nf[i].a:write("A_"..ip.."_cycle")
    end

  elseif mth == "trkrdt" then  -- 2nd method
    io.write("** Tracking ", ips[1], "\n")
    lhc:cycle(ips[1])
    local _, mflw = track{sequence=lhc, method=4, save=false, X0=X0}
    local nf1 = normal(mflw[1]):analyse()

    io.write("** Tracking RDT\n")
    local X1 = nf1.a:real():set0(nf1.x0) ; X1.status = 'Aset'
    local mtbl, mflw = track{sequence=lhc, method=4, savemap=true, X0=X1,
                             range=ips[1].."/"..ips[#ips]}
    for i,ip in ipairs(ips) do
      nf[i] = nf1:analyse('gnf', mtbl[ip].__map)
      nf[i].a:write("A_"..ip.."_trkrdt")
    end
  end

  return nf
end

-- run once for reference values
local nf = get_nf(mthd)

 -- monomial strings for all knobs
local ks, ki = {}, #kn
for i=0,ki do ks[i] = nf[1]:getks(i) end

-- print reference some values
for i,ip in ipairs(ips) do
  printf("%s: q1       = % -.6e\n", ip, nf[i]:q1{1}    )                      -- nf[i].q1                  )
  printf("%s: q2       = % -.6e\n", ip, nf[i]:q2{1}    )                      -- nf[i].q2                  )
  printf("%s: q1j1     = % -.6e\n", ip, nf[i]:anhx{1,0})                      -- nf[i].anh["2100"..knbs[0]])
  printf("%s: q2j2     = % -.6e\n", ip, nf[i]:anhy{0,1})                      -- nf[i].anh["0021"..knbs[0]])
  for _,gf in ipairs(gfs) do
    local v = nf[i].gnf[gf..ks[0]]
    printf("%s: f%sr = % -.6e\n", ip, gf, real(v))                            -- real(nf[i].gnf[gf..knbs[0]]))
    printf("%s: f%si = % -.6e\n", ip, gf, imag(v))                            -- imag(nf[i].gnf[gf..knbs[0]]))
  end
end

-- run once and quit
-- os.exit()

-- backup reference tunes and amplitude detuning.
local q1_ref   = nf[1]:q1{1}
local q2_ref   = nf[1]:q2{1}
local q1j1_ref = nf[1]:anhx{1,0}                                              -- nf[1].anh["2100"..knbs[0]]
local q2j2_ref = nf[1]:anhy{0,1}                                              -- nf[1].anh["0021"..knbs[0]]

!-- starting point
!MADX.kof_a12b1:set0(2.0272307421225499e+01)
!MADX.kof_a23b1:set0(8.7898541505667733e+00)
!MADX.kof_a34b1:set0(7.9793317231387872e+00)
!MADX.kof_a45b1:set0(1.0172575933279955e+01)
!MADX.kof_a56b1:set0(2.9796308153463379e+01)
!MADX.kof_a67b1:set0(1.6492992726130399e+01)
!MADX.kof_a78b1:set0(3.0963225641384948e+01)
!MADX.kof_a81b1:set0(2.5865749506364569e+01)
!MADX.kod_a12b1:set0(1.5966536353056194e+01)
!MADX.kod_a23b1:set0(2.8081672813652901e+01)
!MADX.kod_a34b1:set0(1.9531894791310879e+01)
!MADX.kod_a45b1:set0(9.4183032233327797e+00)
!MADX.kod_a56b1:set0(4.2242913214197145e+01*0.8)
!MADX.kod_a67b1:set0(9.3298752618912332e+01*0.3) --
!MADX.kod_a78b1:set0(1.0953555920721216e+01)
!MADX.kod_a81b1:set0(4.2565774929969223e+01*0.8)

-- prepare "varying" variables
local vars = { rtol=1e-6 } -- 1 ppm -- rtol=1e-10
for kj, ks in ipairs(kn) do
  vars[kj] = { name=ks, var='MADX.'..ks } --, step=-MADX[ks]/1000} --

  -- add boundaries to magnet strengths
  local ms = ks:sub(1,2)
  if ms == 'kq' then vars[kj].min, vars[kj].max = MADX[ks]*0.8, MADX[ks]*1.2 end
  if ms == 'ko' then vars[kj].min, vars[kj].max = -40, 40 end
end

-- prepare "equality" constraints
local equs = { weight = 1,
  { name='q1'  , expr = \nf -> nf[1]:q1{1}     - q1_ref  , tol=1e-4, weight=1 },
  { name='q2'  , expr = \nf -> nf[1]:q2{1}     - q2_ref  , tol=1e-4, weight=1 },
  { name='q1j1', expr = \nf -> nf[1]:anhx{1,0} - q1j1_ref, tol=500 , weight=0.05 },
  { name='q2j2', expr = \nf -> nf[1]:anhy{0,1} - q2j2_ref, tol=500 , weight=0.05 },
}
local ieq = #equs+1
local teq = {500, 500, 500}
local weq = {0.05, 0.005, 0.01}
for i,ip in ipairs(ips) do
for j,gf in ipairs(gfs) do
  local s = ip:lower()
  equs[idx_f(i,j)+ieq+0] = { name='f'..gf..'r_'..s, expr = \nf -> real(nf[i].gnf[gf..ks[0]]), tol=teq[j], weight=weq[j] }
  equs[idx_f(i,j)+ieq+1] = { name='f'..gf..'i_'..s, expr = \nf -> imag(nf[i].gnf[gf..ks[0]]), tol=teq[j], weight=weq[j] }
end end

-- set knobs as parameters
for i,ks in ipairs(kn) do
  MADX[ks] = MADX[ks] + X0[ks] ; -- MADX[ks]:print(ks)
end

-- set output format for jacobian and debug
local fmt = option.numfmt ; option.numfmt = "% -.3e"

-- run matching
match {
  command := get_nf(mthd),
  
  jacobian = \nf,_,jac => -- gradient not used, fill only jacobian
    assert(nf, "nf is nil in match.jacobian")

    --> parameters
    for k=1,ki do
      jac:set(1,k, nf[1]:q1{1,k} or 0 )  --     |                             -- nf[1].anh["1000"..knbs[k]] or 0)
      jac:set(2,k, nf[1]:q2{1,k} or 0 )  --     |                             -- nf[1].anh["0010"..knbs[k]] or 0)
      jac:set(3,k, nf[1]:anhx{1,0,0,k})  --     v                             -- nf[1].anh["2100"..knbs[k]])
      jac:set(4,k, nf[1]:anhy{0,1,0,k})  -- constraints                       -- nf[1].anh["0021"..knbs[k]])
    end
    for i,ip in ipairs(ips) do
    for j,gf in ipairs(gfs) do
    for k=1,ki do
      local v = nf[i].gnf[gf..ks[k]]
      jac:set(idx_f(i,j)+ieq+0,k, real(v))
      jac:set(idx_f(i,j)+ieq+1,k, imag(v))
    end end end

    -- print jacobian
    if true then
      for i=1,ki do printf("% 12s", kn[i]) end io.write("\n")
      jac:print("JAC")
    end
  end,

  variables  = vars,
  equalities = equs,
  objective  = { bisec=3, rcond=1e-10, jstra=2 },
  maxcall=250, info=4, -- debug=4
}

-- restore output format
option.numfmt = fmt

-- restore strengths as scalars
for _, ks in ipairs(kn) do
  MADX[ks] = MADX[ks]:get0()
end

-- print parameters to full precision for MAD-NG
for _, ks in ipairs(kn) do
  printf("% 10s = % -.16e\n", ks, MADX[ks])
end

io.write("\n")

-- print parameters to full precision for MADX
for _, ks in ipairs(kn) do
  printf("% 10s = % -.16e;\n", ks:gsub('_','.'), MADX[ks])
end

end -- loop over lhcb1 and lhcb2