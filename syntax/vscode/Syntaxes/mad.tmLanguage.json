{
	"name": "mad",
	"scopeName": "source.mad",
	"patterns": [
		{
			"begin": "\\b(?:(local)\\s+)?(function)\\b(?![,:])",
			"beginCaptures": {
				"1": {
					"name": "keyword.local.mad"
				},
				"2": {
					"name": "keyword.control.mad"
				}
			},
			"end": "(?<=[\\)\\-{}\\[\\]\"'])",
			"name": "meta.function.mad",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"begin": "(\\()",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.parameters.begin.mad"
						}
					},
					"end": "(\\))|(?=[\\-\\.{}\\[\\]\"'])",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.parameters.finish.mad"
						}
					},
					"name": "meta.parameter.mad",
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"match": "[a-zA-Z_][a-zA-Z0-9_]*",
							"name": "variable.parameter.function.mad"
						},
						{
							"match": ",",
							"name": "punctuation.separator.arguments.mad"
						},
						{
							"begin": ":",
							"beginCaptures": {
								"0": {
									"name": "punctuation.separator.arguments.mad"
								}
							},
							"end": "(?=[\\),])",
							"patterns": [
								{
									"include": "#luadoc.type"
								}
							]
						}
					]
				},
				{
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b\\s*(?=:)",
					"name": "entity.name.class.mad"
				},
				{
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b",
					"name": "entity.name.function.mad"
				}
			]
		},
		{
			"match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(\\.[0-9A-Fa-f]+)?([eE]-?\\d*)?([pP][-+]\\d+)?",
			"name": "constant.numeric.float.hexadecimal.mad"
		},
		{
			"match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(?![pPeE.0-9])",
			"name": "constant.numeric.integer.hexadecimal.mad"
		},
		{
			"match": "(?<![\\w\\d.](?<!\\.\\.))\\d+(\\.\\d+)?([eE]-?\\d*)?",
			"name": "constant.numeric.float.mad"
		},
		{
			"match": "(?<![\\w\\d.](?<!\\.\\.))\\d+(?![pPeE.0-9](?<!\\.\\.))",
			"name": "constant.numeric.integer.mad"
		},
		{
			"include": "#string"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.comment.mad"
				}
			},
			"match": "\\A(#!).*$\\n?",
			"name": "comment.line.shebang.mad"
		},
		{
			"include": "#comment"
		},
		{
			"captures": {
				"1": {
					"name": "keyword.control.goto.mad"
				},
				"2": {
					"name": "string.tag.mad"
				}
			},
			"match": "\\b(goto)\\s+([a-zA-Z_][a-zA-Z0-9_]*)"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.section.embedded.begin.mad"
				},
				"2": {
					"name": "punctuation.section.embedded.end.mad"
				}
			},
			"match": "(::)\\s*[a-zA-Z_][a-zA-Z0-9_]*\\s*(::)",
			"name": "string.tag.mad"
		},
		{
			"match": "<\\s*(const|close)\\s*>",
			"captures": {
				"1": {
					"name": "string.tag.mad"
				}
			}
		},
		{
			"match": "\\<[a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*\\>",
			"name": "storage.type.generic.mad"
		},
		{
			"match": "\\b(break|do|else|for|if|elseif|goto|return|then|repeat|while|until|end|in)\\b",
			"name": "keyword.control.mad"
		},
		{
			"match": "\\b(local|global)\\b",
			"name": "keyword.local.mad"
		},
		{
			"match": "\\b(function)\\b(?![,:])",
			"name": "keyword.control.mad"
		},
		{
			"match": "(?<![^.]\\.|:)\\b(false|nil(?!:)|true|_ENV|_G|_VERSION|math\\.(pi|huge|maxinteger|mininteger)|utf8\\.charpattern|io\\.(stdin|stdout|stderr)|package\\.(config|cpath|loaded|loaders|path|preload|searchers))\\b|(?<![.])\\.{3}(?!\\.)",
			"name": "constant.language.mad"
		},
		{
			"match": "(?<![^.]\\.|:)\\b(self)\\b",
			"name": "variable.language.self.mad"
		},
		{
			"match": "(?<![^.]\\.|:)\\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|load|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawlen|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\\b(?!\\s*=(?!=))",
			"name": "support.function.mad"
		},
		{
			"match": "(?<![^.]\\.|:)\\b(async)\\b(?!\\s*=(?!=))",
			"name": "entity.name.tag.mad"
		},
		{
			"match": "(?<![^.]\\.|:)\\b(coroutine\\.(create|isyieldable|close|resume|running|status|wrap|yield)|string\\.(byte|char|dump|find|format|gmatch|gsub|len|lower|match|pack|packsize|rep|reverse|sub|unpack|upper)|table\\.(concat|insert|maxn|move|pack|remove|sort|unpack)|math\\.(abs|acos|asin|atan2?|ceil|cosh?|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pow|rad|random|randomseed|sinh?|sqrt|tanh?|tointeger|type)|io\\.(close|flush|input|lines|open|output|popen|read|tmpfile|type|write)|os\\.(clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\\.(loadlib|seeall|searchpath)|debug\\.(debug|[gs]etfenv|[gs]ethook|getinfo|[gs]etlocal|[gs]etmetatable|getregistry|[gs]etupvalue|[gs]etuservalue|set[Cc]stacklimit|traceback|upvalueid|upvaluejoin)|bit32\\.(arshift|band|bnot|bor|btest|bxor|extract|replace|lrotate|lshift|rrotate|rshift)|utf8\\.(char|codes|codepoint|len|offset))\\b(?!\\s*=(?!=))",
			"name": "support.function.library.mad"
		},
		{
			"match": "\\b(and|or|not|\\|\\||\\&\\&|\\!)\\b",
			"name": "keyword.operator.mad"
		},
		{
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*(?:[({\"']|\\[\\[))",
			"name": "support.function.any-method.mad"
		},
		{
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*\\??:)",
			"name": "entity.name.class.mad"
		},
		{
			"match": "(?<=[^.]\\.|:)\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?!\\s*=\\s*\\b(function)\\b)",
			"name": "entity.other.attribute.mad"
		},
		{
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?!\\s*=\\s*\\b(function)\\b)",
			"name": "variable.other.mad"
		},
		{
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*=\\s*\\b(function)\\b)",
			"name": "entity.name.function.mad"
		},
		{
			"match": "\\+|-|%|#|\\*|\\/|\\^|==?|~=|!=|<=?|>=?|(?<!\\.)\\.{2}(?!\\.)",
			"name": "keyword.operator.mad"
		}
	],
	"repository": {
		"escaped_char": {
			"patterns": [
				{
					"match": "\\\\[abfnrtv\\\\\"'\\n]",
					"name": "constant.character.escape.mad"
				},
				{
					"match": "\\\\z[\\n\\t ]*",
					"name": "constant.character.escape.mad"
				},
				{
					"match": "\\\\\\d{1,3}",
					"name": "constant.character.escape.byte.mad"
				},
				{
					"match": "\\\\x[0-9A-Fa-f][0-9A-Fa-f]",
					"name": "constant.character.escape.byte.mad"
				},
				{
					"match": "\\\\u\\{[0-9A-Fa-f]+\\}",
					"name": "constant.character.escape.unicode.mad"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.character.escape.mad"
				}
			]
		},
		"string": {
			"patterns": [
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.mad"
						}
					},
					"end": "'[ \\t]*|(?=\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.mad"
						}
					},
					"name": "string.quoted.single.mad",
					"patterns": [
						{
							"include": "#escaped_char"
						}
					]
				},
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.mad"
						}
					},
					"end": "\"[ \\t]*|(?=\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.mad"
						}
					},
					"name": "string.quoted.double.mad",
					"patterns": [
						{
							"include": "#escaped_char"
						}
					]
				},
				{
					"begin": "`",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.mad"
						}
					},
					"end": "`[ \\t]*|(?=\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.mad"
						}
					},
					"name": "string.quoted.double.mad"
				},
				{
					"begin": "(?<=\\.cdef)\\s*(\\[(=*)\\[)",
					"beginCaptures": {
						"0": {
							"name": "string.quoted.other.multiline.mad"
						},
						"1": {
							"name": "punctuation.definition.string.begin.mad"
						}
					},
					"contentName": "meta.embedded.mad",
					"end": "(\\]\\2\\])[ \\t]*",
					"endCaptures": {
						"0": {
							"name": "string.quoted.other.multiline.mad"
						},
						"1": {
							"name": "punctuation.definition.string.end.mad"
						}
					},
					"patterns": [
						{
							"include": "source.c"
						}
					]
				},
				{
					"begin": "(?<!--)\\[(=*)\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.mad"
						}
					},
					"end": "\\]\\1\\][ \\t]*",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.mad"
						}
					},
					"name": "string.quoted.other.multiline.mad"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"begin": "(^[ \\t]+)?(?=(?:--|!))",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.mad"
						}
					},
					"end": "(?!\\G)((?!^)[ \\t]+\\n)?",
					"endCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.trailing.mad"
						}
					},
					"patterns": [
						{
							"begin": "--\\[(=*)\\[",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.begin.mad"
								}
							},
							"end": "\\]\\1\\]",
							"endCaptures": {
								"0": {
									"name": "punctuation.definition.comment.end.mad"
								}
							},
							"name": "comment.block.mad"
						},
						{
							"begin": "----",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.mad"
								}
							},
							"end": "\\n",
							"name": "comment.line.double-dash.mad"
						},
						{
							"begin": "---",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.mad"
								}
							},
							"end": "\\n",
							"name": "comment.line.double-dash.doc.mad",
							"patterns": [
								{
									"include": "#luadoc"
								}
							]
						},
						{
							"begin": "--",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.mad"
								}
							},
							"end": "\\n",
							"name": "comment.line.double-dash.mad"
						},
						{
							"begin": "!",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.mad"
								}
							},
							"end": "\\n",
							"name": "comment.line.exclamation.mad"
						}
					]
				},
				{
					"begin": "\\/\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.mad"
						}
					},
					"end": "\\*\\/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.mad"
						}
					},
					"name": "comment.block.mad"
				}
			]
		},
		"luadoc": {
			"patterns": [
				{
					"begin": "(?<=---\\s*)@class",
					"beginCaptures": {
						"0": {
							"name": "storage.type.annotation.mad"
						}
					},
					"end": "(?=[\\n@#])",
					"patterns": [
						{
							"match": "\\b([a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*)",
							"name": "support.class.mad"
						},
						{
							"match": ":|,",
							"name": "keyword.operator.mad"
						}
					]
				},
				{
					"begin": "(?<=---\\s*)@enum",
					"beginCaptures": {
						"0": {
							"name": "storage.type.annotation.mad"
						}
					},
					"end": "(?=[\\n@#])",
					"patterns": [
						{
							"begin": "\\b([a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*)",
							"beginCaptures": {
								"0": {
									"name": "variable.mad"
								}
							},
							"end": "(?=\\n)"
						}
					]
				},
				{
					"begin": "(?<=---\\s*)@type",
					"beginCaptures": {
						"0": {
							"name": "storage.type.annotation.mad"
						}
					},
					"end": "(?=[\\n@#])",
					"patterns": [
						{
							"include": "#luadoc.type"
						}
					]
				},
				{
					"begin": "(?<=---\\s*)@alias",
					"beginCaptures": {
						"0": {
							"name": "storage.type.annotation.mad"
						}
					},
					"end": "(?=[\\n@#])",
					"patterns": [
						{
							"begin": "\\b([a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*)",
							"beginCaptures": {
								"0": {
									"name": "variable.mad"
								}
							},
							"end": "(?=[\\n#])",
							"patterns": [
								{
									"include": "#luadoc.type"
								}
							]
						}
					]
				},
				{
					"begin": "(?<=---\\s*)(@operator)\\s*(\\b[a-z]+)?",
					"beginCaptures": {
						"1": {
							"name": "storage.type.annotation.mad"
						},
						"2":{
							"name":"support.function.library.mad"
						}
					},
					"end": "(?=[\\n@#])",
					"patterns": [
						{
							"include": "#luadoc.type"
						}
					]
				},
				{
					"begin": "(?<=---\\s*)@cast",
					"beginCaptures": {
						"0": {
							"name": "storage.type.annotation.mad"
						}
					},
					"end": "(?=[\\n@#])",
					"patterns": [
						{
							"begin": "\\b([a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*)",
							"beginCaptures": {
								"0": {
									"name": "variable.other.mad"
								}
							},
							"end": "(?=\\n)",
							"patterns": [
								{
									"include": "#luadoc.type"
								},
								{
									"match": "([+-|])",
									"name": "keyword.operator.mad"
								}
							]
						}
					]
				},
				{
					"begin": "(?<=---\\s*)@param",
					"beginCaptures": {
						"0": {
							"name": "storage.type.annotation.mad"
						}
					},
					"end": "(?=[\\n@#])",
					"patterns": [
						{
							"begin": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(\\??)",
							"beginCaptures": {
								"1": {
									"name": "entity.name.variable.mad"
								},
								"2": {
									"name": "keyword.operator.mad"
								}
							},
							"end": "(?=[\\n#])",
							"patterns": [
								{
									"include": "#luadoc.type"
								}
							]
						}
					]
				},
				{
					"begin": "(?<=---\\s*)@return",
					"beginCaptures": {
						"0": {
							"name": "storage.type.annotation.mad"
						}
					},
					"end": "(?=[\\n@#])",
					"patterns": [
						{
							"match": "\\?",
							"name": "keyword.operator.mad"
						},
						{
							"include": "#luadoc.type"
						}
					]
				},
				{
					"begin": "(?<=---\\s*)@field",
					"beginCaptures": {
						"0": {
							"name": "storage.type.annotation.mad"
						}
					},
					"end": "(?=[\\n@#])",
					"patterns": [
						{
							"begin": "(\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b|(\\[))(\\??)",
							"beginCaptures": {
								"2": {
									"name": "entity.name.variable.mad"
								},
								"3": {
									"name": "keyword.operator.mad"
								}
							},
							"end": "(?=[\\n#])",
							"patterns": [
								{
									"include": "#string"
								},
								{
									"include": "#luadoc.type"
								},
								{
									"match": "\\]",
									"name": "keyword.operator.mad"
								}
							]
						}
					]
				},
				{
					"begin": "(?<=---\\s*)@generic",
					"beginCaptures": {
						"0": {
							"name": "storage.type.annotation.mad"
						}
					},
					"end": "(?=[\\n@#])",
					"patterns": [
						{
							"begin": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b",
							"beginCaptures": {
								"0": {
									"name": "storage.type.generic.mad"
								}
							},
							"end": "(?=\\n)|(,)",
							"endCaptures": {
								"0": {
									"name": "keyword.operator.mad"
								}
							},
							"patterns": [
								{
									"match": ":",
									"name": "keyword.operator.mad"
								},
								{
									"include": "#luadoc.type"
								}
							]
						}
					]
				},
				{
					"begin": "(?<=---\\s*)@vararg",
					"beginCaptures": {
						"0": {
							"name": "storage.type.annotation.mad"
						}
					},
					"end": "(?=[\\n@#])",
					"patterns": [
						{
							"include": "#luadoc.type"
						}
					]
				},
				{
					"begin": "(?<=---\\s*)@overload",
					"beginCaptures": {
						"0": {
							"name": "storage.type.annotation.mad"
						}
					},
					"end": "(?=[\\n@#])",
					"patterns": [
						{
							"include": "#luadoc.type"
						}
					]
				},
				{
					"begin": "(?<=---\\s*)@deprecated",
					"beginCaptures": {
						"0": {
							"name": "storage.type.annotation.mad"
						}
					},
					"end": "(?=[\\n@#])"
				},
				{
					"begin": "(?<=---\\s*)@meta",
					"beginCaptures": {
						"0": {
							"name": "storage.type.annotation.mad"
						}
					},
					"end": "(?=[\\n@#])"
				},
				{
					"begin": "(?<=---\\s*)@private",
					"beginCaptures": {
						"0": {
							"name": "storage.type.annotation.mad"
						}
					},
					"end": "(?=[\\n@#])"
				},
				{
					"begin": "(?<=---\\s*)@protected",
					"beginCaptures": {
						"0": {
							"name": "storage.type.annotation.mad"
						}
					},
					"end": "(?=[\\n@#])"
				},
				{
					"begin": "(?<=---\\s*)@package",
					"beginCaptures": {
						"0": {
							"name": "storage.type.annotation.mad"
						}
					},
					"end": "(?=[\\n@#])"
				},
				{
					"begin": "(?<=---\\s*)@version",
					"beginCaptures": {
						"0": {
							"name": "storage.type.annotation.mad"
						}
					},
					"end": "(?=[\\n@#])",
					"patterns": [
						{
							"match": "\\b(5\\.1|5\\.2|5\\.3|5\\.4|JIT)\\b",
							"name": "support.class.mad"
						},
						{
							"match": ",|\\>|\\<",
							"name": "keyword.operator.mad"
						}
					]
				},
				{
					"begin": "(?<=---\\s*)@see",
					"beginCaptures": {
						"0": {
							"name": "storage.type.annotation.mad"
						}
					},
					"end": "(?=[\\n@#])",
					"patterns": [
						{
							"match": "\\b([a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*)",
							"name": "support.class.mad"
						},
						{
							"match": "#",
							"name": "keyword.operator.mad"
						}
					]
				},
				{
					"begin": "(?<=---\\s*)@diagnostic",
					"beginCaptures": {
						"0": {
							"name": "storage.type.annotation.mad"
						}
					},
					"end": "(?=[\\n@#])",
					"patterns": [
						{
							"begin": "([a-zA-Z_\\-0-9]+)[ \\t]*(:)?",
							"beginCaptures": {
								"1": {
									"name": "keyword.other.unit"
								},
								"2": {
									"name": "keyword.operator.unit"
								}
							},
							"end": "(?=\\n)",
							"patterns": [
								{
									"match": "\\b([a-zA-Z_\\*][a-zA-Z0-9_\\-]*)",
									"name": "support.class.mad"
								},
								{
									"match": ",",
									"name": "keyword.operator.mad"
								}
							]
						}
					]
				},
				{
					"begin": "(?<=---\\s*)@module",
					"beginCaptures": {
						"0": {
							"name": "storage.type.annotation.mad"
						}
					},
					"end": "(?=[\\n@#])",
					"patterns": [
						{
							"include": "#string"
						}
					]
				},
				{
					"match": "(?<=---\\s*)@(async|nodiscard)",
					"name": "storage.type.annotation.mad"
				},
				{
					"begin": "(?<=---)\\|\\s*[\\>\\+]?",
					"beginCaptures": {
						"0": {
							"name": "storage.type.annotation.mad"
						}
					},
					"end": "(?=[\\n@#])",
					"patterns": [
						{
							"include": "#string"
						}
					]
				}
			]
		},
		"luadoc.type": {
			"patterns": [
				{
					"begin": "\\bfun\\b",
					"beginCaptures": {
						"0": {
							"name": "keyword.control.mad"
						}
					},
					"end": "(?=[\\s#])",
					"patterns": [
						{
							"match": "[\\(\\),:\\?][ \\t]*",
							"name": "keyword.operator.mad"
						},
						{
							"match": "([a-zA-Z_][a-zA-Z0-9_\\.\\*\\[\\]\\<\\>\\,\\-]*)(?<!,)[ \\t]*(?=\\??:)",
							"name": "entity.name.variable.mad"
						},
						{
							"include": "#luadoc.type"
						},
						{
							"include": "#string"
						}
					]
				},
				{
					"match": "\\<[a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*\\>",
					"name": "storage.type.generic.mad"
				},
				{
					"match": "\\basync\\b",
					"name": "entity.name.tag.mad"
				},
				{
					"match": "[\\{\\}\\:\\,\\?\\|\\`][ \\t]*",
					"name": "keyword.operator.mad"
				},
				{
					"begin": "(?=[a-zA-Z_\\.\\*\"'\\[])",
					"end": "(?=[\\s\\)\\,\\?\\:\\}\\|#])",
					"patterns": [
						{
							"match": "([a-zA-Z0-9_\\.\\*\\[\\]\\<\\>\\,\\-]+)(?<!,)[ \\t]*",
							"name": "support.type.mad"
						},
						{
							"match": "(\\.\\.\\.)[ \\t]*",
							"name": "constant.language.mad"
						},
						{
							"include": "#string"
						}
					]
				}
			]
		}
	}
}
