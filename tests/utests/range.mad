--[=[
 o-----------------------------------------------------------------------------o
 |
 | Range module regression tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

	Purpose:
	- Provide regression test suites for the range module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertEquals, assertAlmostEquals, assertTrue, assertFalse,
			assertErrorMsgContains, assertNil, assertNaN, assertIsString
			in MAD.utest

local range, nrange, logrange, nlogrange  in MAD
local log, tiny, eps, huge, inf, nan      in MAD.gmath
local is_function, is_range, is_logrange  in MAD.typeid

-- regression test suite ------------------------------------------------------o

TestRange = {}

local values = {
  lim   = { tiny, eps, huge },
  num   = { tiny, 2^-64, 2^-63, 2^-53, eps, 2^-52, 2*eps, 2^-32, 2^-31, 1e-9,
          0.1-eps, 0.1, 0.1+eps, 0.5, 0.7-eps, 0.7, 0.7+eps, 1-eps, 1, 1+eps,
          1.1, 1.7, 2, 10, 1e2, 1e3, 1e6, 1e9, 2^31, 2^32, 2^52, 2^53,
          2^63, 2^64, huge },
	rng   = {
			 	  { 1 , 10, 0.1}, { 1 ,-10,-0.1}, {-1 , 10, 0.1}, {-1 ,-10,-0.1},
			    { 10, 1 ,-0.1}, { 10,-1 ,-0.1}, {-10, 1 , 0.1}, {-10,-1 , 0.1},
			    { 10, 10, 0.1}, {-10,-10,-0.1},
			    },
   nrng = {
          { 1  , 100, 100}, { 1, 100, 10 }   , { 100, 1 , 10 }, { 1,-100, 10 },
          { 100,-1  , 10 }, {-1, 100, 10 }   , {-100, 1 , 10 }, {-1,-100, 10 },
          {-100,-1  , 10 }, { 1, 0  , 1/eps }, { 0.5, 1  , 1/eps },
          },
  empty = {
				  { 1 , 10,-0.1}, { 1 ,-10, 0.1}, {-1 ,-10, 0.1}, {-1 , 10,-0.1},
				  { 10, 1 , 0.1}, { 10,-1 , 0.1}, {-10, 1 ,-0.1}, {-10,-1 ,-0.1},
				  },
  zeros = {
          { 0 , 0 , 0  }, {-0 ,-0 ,-0  }, { 1 , 1, 0  }, { 1 , 1,-0  },
          },
}

-- RawRange

function TestRange:testRawCtor()
  local a = 2
  assertTrue( is_range(0..9..0.5)      )
  assertTrue( is_range(0..9.. .5)      )
  assertTrue( is_range(0..0.9..0.5)    )
  assertTrue( is_range(0.. .9.. .5)    )
  assertTrue( is_range(0.1..0.9..0.5)  )
  assertTrue( is_range( .1.. .9.. .5)  )
  assertTrue( is_range(0..9..-0.5)     )
  assertTrue( is_range(0..9..- .5)     )
  assertTrue( is_range(0..-0.9..0.5)   )
  assertTrue( is_range(0..- .9.. .5)   )
  assertTrue( is_range(-0.1..0.9..0.5) )
  assertTrue( is_range(- .1.. .9.. .5) )

  assertIsString( 1..''    )
  assertIsString( 1..10..'')
  assertIsString( a..a..'' )
end

function TestRange:testReadonly()
  local f1, f2, f3
  local msg = {
    "attempt to write to constant location",
  }
  for _,v in ipairs(values.num) do
    f1=\r,v => r.start = v end
    assertErrorMsgContains( msg[1], f1,  1..10..0.1 , v )
    f2=\r,v => r.stop  = v end
    assertErrorMsgContains( msg[1], f2,  1..10..0.1 , v )
    f3=\r,v => r.step  = v end
    assertErrorMsgContains( msg[1], f3,  1..10..0.1 , v )
  end
end

function TestRange:testRanges()
  local r
  for _,v in ipairs(values.num) do
    r = 1 .. 10.. v  assertEquals( {r:ranges()}, {r.start, r.stop, r.step} )
    r = 10.. 1 ..-v  assertEquals( {r:ranges()}, {r.start, r.stop, r.step} )
  end
  for _,v in ipairs(values.lim) do
    r = 1 .. 10.. v  assertEquals( {r:ranges()}, {r.start, r.stop, r.step} )
    r = 10.. 1 ..-v  assertEquals( {r:ranges()}, {r.start, r.stop, r.step} )
    r = 1 .. v .. v  assertEquals( {r:ranges()}, {r.start, r.stop, r.step} )
    r = 1 ..-v ..-v  assertEquals( {r:ranges()}, {r.start, r.stop, r.step} )
    r = v .. v .. v  assertEquals( {r:ranges()}, {r.start, r.stop, r.step} )
    r =-v ..-v ..-v  assertEquals( {r:ranges()}, {r.start, r.stop, r.step} )
  end
  for _,v in ipairs(values.rng) do
    r = v[1]..v[2]..v[3] assertEquals( {r:ranges()}, {r.start,r.stop,r.step} )
  end
  for _,v in ipairs(values.empty) do
    r = v[1]..v[2]..v[3] assertEquals( {r:ranges()}, {r.start,r.stop,r.step} )
  end
  for _,v in ipairs(values.zeros) do
    r = v[1]..v[2]..v[3] assertEquals( {r:ranges()}, {r.start,r.stop,r.step} )
  end
end

function TestRange:testFields()
  local r
  assertEquals( {( 10..1 )        :ranges()}, { 10, 1  , 1}   )
  assertEquals( {( 0 ..1  .. eps) :ranges()}, { 0 , 1  , eps} )
  assertEquals( {( 1 ..0  ..-eps) :ranges()}, { 1 , 0  ,-eps} )
  assertEquals( {( 0 ..0.5.. eps) :ranges()}, { 0 , 0.5, eps} )
  assertEquals( {( 1 ..0.5..-eps) :ranges()}, { 1 , 0.5,-eps} )

  for _,v in ipairs(values.rng)do
    assertEquals( {(v[1]..v[2]..v[3]):ranges()}, { v[1], v[2], v[3] } )
  end
  for _,v in ipairs(values.empty) do
    assertEquals( {(v[1]..v[2]..v[3]):ranges()}, { v[1], v[2], v[3] } )
  end
  for _,v in ipairs(values.zeros) do
    assertEquals( {(v[1]..v[2]..v[3]):ranges()}, { v[1], v[2], v[3] } )
  end
  for _,v in ipairs(values.num) do
    assertEquals( {( 1 .. 10.. v):ranges()}, { 1 , 10, v} )
    assertEquals( {( 10.. 1 ..-v):ranges()}, { 10, 1 ,-v} )
  end
  for _,v in ipairs(values.lim) do
    assertEquals( {( 1 .. 10.. v):ranges()}, { 1 , 10, v} )
    assertEquals( {( 10.. 1 ..-v):ranges()}, { 10, 1 ,-v} )
    assertEquals( {( 1 ..-v ..-v):ranges()}, { 1 ,-v ,-v} )
    assertEquals( {( v .. v .. v):ranges()}, { v , v , v} )
    assertEquals( {(-v ..-v ..-v):ranges()}, {-v ,-v ,-v} )
    r = { (1..v..v):ranges() }
    assertEquals( r[1], 1 )
    assertAlmostEquals( r[2], v, eps )
    assertAlmostEquals( r[3], v, eps )
  end
end

function TestRange:testNanAndInf()
	local r
	r = {(1  .. 10 .. nan):ranges()}
  assertEquals( r[1], 1 )
  assertEquals( r[2], 10  )
  assertNaN( r[3] )
	r = {(1  ..-nan..-nan):ranges()}
	assertEquals( r[1], 1 )
  assertNaN( r[2] )
  assertNaN( r[3] )
  r = {(nan.. nan.. nan):ranges()}
  assertNaN( r[1] )
  assertNaN( r[2] )
  assertNaN( r[3] )

  assertEquals( {( 1  .. 10 .. inf):ranges()}, { 1  , 10 , inf} )
  assertEquals( {( 10 .. 1  ..-inf):ranges()}, { 10 , 1  ,-inf} )
  assertEquals( {( 1  .. inf.. inf):ranges()}, { 1  , inf, inf} )
  assertEquals( {( 1  ..-inf..-inf):ranges()}, { 1  ,-inf,-inf} )
  assertEquals( {( inf.. inf.. inf):ranges()}, { inf, inf, inf} )
  assertEquals( {(-inf..-inf..-inf):ranges()}, {-inf,-inf,-inf} )
end

-- Evaluation

function TestRange:testIsEmpty()
  for _,v in ipairs(values.empty) do
    assertTrue ( (v[1]..v[2]..v[3]):is_empty() )
  end
  for _,v in ipairs(values.zeros) do
    assertFalse( (v[1]..v[2]..v[3]):is_empty() )
  end
  for _,v in ipairs(values.rng) do
    assertFalse( (v[1]..v[2]..v[3]):is_empty() )
  end
  for _,v in ipairs(values.num) do
    if v~=0 then
      assertFalse( ( 1 .. 10..  v) :is_empty() )
      assertFalse( ( 10.. 1 .. -v) :is_empty() )
      assertTrue ( ( 1 .. 10.. -v) :is_empty() )
    end
  end
  for _,v in ipairs(values.lim) do
    assertFalse(  ( 1 .. 10.. v)  :is_empty() )
    assertFalse(  ( 10.. 1 ..-v)  :is_empty() )
    assertFalse(  ( 1 ..-v ..-v)  :is_empty() )
    assertFalse(  ( v .. v .. v)  :is_empty() )
    assertFalse(  (-v ..-v ..-v)  :is_empty() )
  end
end

function TestRange:testIsRrange()
  assertFalse( is_range('') )
  assertFalse( is_range(2)  )
  assertFalse( is_range(logrange(1)) )
  assertFalse( is_range(nlogrange(1,10,1)) )
  assertTrue ( is_range(1..10)    )
  end

function TestRange:testValue()
  assertNaN   ( ( 1  ..10.. inf):value( 0)   )
  assertNaN   ( ( 1  ..10..-inf):value( 0)   )
  assertNaN   ( ( 1  ..10.. 1 ) :value( nan) )
  assertNaN   ( ( 1  ..10.. 1 ) :value(-nan) )
  assertNaN   ( ( inf..10..-1 ) :value( inf) )
	assertEquals( ( inf..10.. 1 ) :value( inf) , inf  )
  assertEquals( ( 1..10..1 )    :value(-1 )  , 0    )
  assertEquals( ( 1..10..1 )    :value( 11)  , 12   )
  assertEquals( ( 1..10..0.1)   :value( 1.1) , 1.11 )
  assertEquals( ( 10..1..1)     :value( inf) , inf  )
  assertEquals( ( 10..1..1)     :value(-inf) ,-inf  )
  assertEquals( (0..10)         :value( tiny), tiny )
  assertEquals( (0..10)         :value(-tiny),-tiny )
  assertEquals( (0..10)         :value( huge), huge )
  assertEquals( (0..10)         :value(-huge),-huge )
  assertEquals( (1..0..-0.1)    :value(-eps) , 1    )
  assertEquals( (1..0..-0.1)    :value( eps) , 1    )
  assertEquals( ( 0..1  ..eps)  :value( 1  ),   eps )
  assertEquals( ( 0..0.5..eps)  :value( 2  ), 2*eps )
  assertEquals( ( 1 ..10..huge) :value( 0  ), 1 )
  assertEquals( ( 1 ..10..tiny) :value( 0  ), 1 )
  assertAlmostEquals( (2..-2..-0.1) :value( 22 )- -0.2 , 0, eps )

  for _,v in ipairs(values.empty) do
    assertEquals( (v[1]..v[2]..v[3]):value(0), v[1] )
  end
  for _,v in ipairs(values.zeros) do
    assertEquals( (v[1]..v[2]..v[3]):value(0), v[1] )
    assertEquals( (v[1]..v[2]..v[3]):value(1), v[1] )
  end
  for _,v in ipairs(values.rng) do
    assertEquals( (v[1]..v[2]..v[3]):value(0), v[1] )
  end
  for _,v in ipairs(values.num) do
    assertAlmostEquals( (0.. 1.. v) :value(1)-  v, 0, eps )
    assertAlmostEquals( (0..-1..-v) :value(1)- -v, 0, eps )
  end
end

function TestRange:testGet()
  local r, res, ref
  assertNil   ( (10.. 1 ..-1  ):get(11)  )
  assertNil   ( (1 .. 10.. 0.1):get(-1)  )
  assertNil   ( (1 .. 10.. 0.1):get(101) )
  assertEquals( (1 .. 20.. 0.1):get(1.1), 1.11 )

  for _,v in ipairs(values.empty) do
    assertNil ( (v[1]..v[2]..v[3]):get(0) )
  end
  for _,v in ipairs(values.zeros) do
    assertEquals( (v[1]..v[2]..v[3]):get(0), v[1] )
    assertEquals( (v[1]..v[2]..v[3]):get(1), v[1] )
  end
  for _,v in ipairs(values.rng) do
    r = (v[1]..v[2]..v[3])
    assertEquals( r:get(0), v[1] )
    assertAlmostEquals( r:get(#r-1) - v[2], 0, eps )
  end

  res = 0.5..0..-0.1
  ref = {0.5, 0.4, 0.3, 0.2, 0.1, 0}
  for i=1,#res do assertAlmostEquals(res:get(i-1) - ref[i], 0, eps) end

  res = 10..-1..-0.7
  ref = {10 , 9.3, 8.6, 7.9, 7.2, 6.5, 5.8, 5.1,
         4.4, 3.7, 3  , 2.3, 1.6, 0.9, 0.2,-0.5 }
  for i=1,#res do
    assertAlmostEquals(res[i] - ref[i], 0, 6*eps) -- 6 eps @ 1.6
  end
end

function TestRange:testIndex()
  local r, res, ref
  assertNil   ( (1 .. 10.. 0.1)[ 0]  )
  assertNil   ( (10.. 1 ..-1  )[ 11] )
  assertNil   ( (1 .. 10.. 0.1)[-1]  )
  assertEquals( (1 .. 20.. 0.1)[2.1], 1.11 )

  for _,v in ipairs(values.empty) do
    assertNil( (v[1]..v[2]..v[3])[1] )
  end
  for _,v in ipairs(values.zeros) do
    assertEquals( (v[1]..v[2]..v[3])[1], v[1] )
    assertEquals( (v[1]..v[2]..v[3])[2], v[1] )
  end
  for _,v in ipairs(values.rng) do
    r = v[1]..v[2]..v[3]
    assertEquals( r[1], v[1] )
    assertAlmostEquals( r[#r] - v[2], 0, eps )
  end

  res = 0.5..0..-0.1
  ref = {0.5, 0.4, 0.3, 0.2, 0.1, 0}
  for i=1,#res do assertAlmostEquals(res[i] - ref[i], 0, eps) end

  res = 10..-1..-0.7
  ref = {10 , 9.3, 8.6, 7.9, 7.2, 6.5, 5.8, 5.1,
         4.4, 3.7, 3  , 2.3, 1.6, 0.9, 0.2,-0.5 }
  for i=1,#res do
    assertAlmostEquals(res[i] - ref[i], 0, 6*eps) -- 6 eps @ 1.6
  end
end

function TestRange:testReverse()
  for _,v in ipairs(values.rng) do
    assertEquals( (v[1]..v[2]..v[3]):reverse(), v[2]..v[1]..-v[3] )
  end
  for _,v in ipairs(values.empty) do
    assertEquals( (v[1]..v[2]..v[3]):reverse(), v[2]..v[1]..-v[3] )
  end

  for _,v in ipairs(values.num) do
    assertEquals( ( 0.. 1.. v):reverse(),  1.. 0..-  v )
    assertEquals( ( 1.. 0..-v):reverse(),  0.. 1..- -v )
    assertEquals( ( 0.. 1.. v):reverse(),  range(1, 0,-  v ) )
    assertEquals( ( 1.. 0..-v):reverse(),  range(0, 1,- -v ) )
    assertEquals( ( 0.. v.. v):reverse(),  v.. 0..-  v )
    assertEquals( ( 0..-v..-v):reverse(), -v.. 0..- -v )
    assertEquals( ( v.. v.. v):reverse(),  v.. v..-  v )
    assertEquals( (-v..-v..-v):reverse(), -v..-v..- -v )
  end
  for _,v in ipairs(values.lim) do
    assertEquals( ( 0.. 1.. v):reverse(),  1.. 0..-  v )
  end
end

-- Comparision/Rounding

function TestRange:testEqual()
  local r, r1, rs
  for _,v in ipairs(values.empty) do
    r  = v[1]..v[2]..v[3]
    rs = {r:ranges()} assertTrue( rs[1]..rs[2]..rs[3] == r )
  end
  for _,v in ipairs(values.zeros) do
    r  = v[1]..v[2]..v[3]
    rs = {r:ranges()} assertTrue( rs[1]..rs[2]..rs[3] == r )
  end
  for _,v in ipairs(values.rng) do
    r  = v[1]..v[2]..v[3]
    rs = {r:ranges()} assertTrue( rs[1]..rs[2]..rs[3] == r )
  end
  for _,v in ipairs(values.num) do
    r  = 10.. 1 ..-v    rs = {r:ranges()} assertTrue( rs[1]..rs[2]..rs[3] == r )
    r  = 1 .. v .. v    rs = {r:ranges()} assertTrue( rs[1]..rs[2]..rs[3] == r )
    r  = 1 ..-v ..-v    rs = {r:ranges()} assertTrue( rs[1]..rs[2]..rs[3] == r )
    r  = v .. v .. v    rs = {r:ranges()} assertTrue( rs[1]..rs[2]..rs[3] == r )
    r  = v ..-v ..-v    rs = {r:ranges()} assertTrue( rs[1]..rs[2]..rs[3] == r )
    r  = v ..-v ..-v    rs = {r:ranges()} assertTrue( rs[1]..rs[2]..rs[3] == r )
    r  = 1 .. 10.. v    rs = {r:ranges()} assertTrue( rs[1]..rs[2]..rs[3] == r )
    r1 = 1..10..v
		if v > 0 then
  		assertTrue( r == r1 )
  		assertTrue( r.step / r1.step - 1 < 2*eps )
  	end
	end
end

function TestRange:testSize()
  assertEquals( ( inf.. inf..0)  :size(), inf )
  assertEquals( (-inf..-inf..0)  :size(), inf )
  assertEquals( (-inf.. inf..0)  :size(), inf )
  assertEquals( ( 1 .. 10.. huge):size(), 1   )
  assertEquals( ( 10..  1..-huge):size(), 1   )
  assertEquals( ( 1 .. 10.. tiny):size(), inf )
  assertEquals( ( 10..  1..-tiny):size(), inf )
  assertEquals( ( 1 .. 1 .. 0)   :size(), inf )
  assertEquals( ( 1 .. 10.. 0)   :size(), inf )
  assertEquals( ( 1 .. 10    )   :size(), 10  )
  assertEquals( (-10..-1     )   :size(), 10  )
  assertEquals( (-1 ..-10..-1)   :size(), 10  )
  assertEquals( ( 10.. 1 ..-1)   :size(), 10  )
  assertEquals( (-1 .. 10    )   :size(), 12  )
  assertEquals( (-10.. 1     )   :size(), 12  )
  assertEquals( ( 1 ..-10..-1)   :size(), 12  )
  assertEquals( ( 10..-1 ..-1)   :size(), 12  )

  for _,v in ipairs(values.zeros) do
    assertEquals( (v[1]..v[2]..v[3]):size(), inf )
  end
  for _,v in ipairs(values.empty) do
    assertEquals( (v[1]..v[2]..v[3]):size(), 0 )
  end
	for _,v in ipairs(values.num) do
		if v >= 10 then assertEquals( (1..10..v):size(), 1 ) end
  end
  for _,v in ipairs(values.rng) do
    if v[1] == v[2] then
      assertEquals( (v[1]..v[2]..v[3]):size(), 1   )
  	elseif v[1] < 0 and v[2] < 0 or v[1] > 0 and v[2] > 0 then
	    assertEquals( (v[1]..v[2]..v[3]):size(), 91  )
    else
    	assertEquals( (v[1]..v[2]..v[3]):size(), 111 )
    end
  end
  assertAlmostEquals( ( eps..1  .. eps):size() - 1/eps      , 0, eps )
  assertAlmostEquals( ( 1  ..eps..-eps):size() - 1/eps      , 0, eps )
  assertAlmostEquals( ( eps..0.5.. eps):size() - 0.5/eps    , 0, eps )
  assertAlmostEquals( ( 0.5..eps..-eps):size() - 0.5/eps    , 0, eps )
  assertAlmostEquals( ( 0  ..1  .. eps):size() - 1/eps - 1  , 0, eps )
  assertAlmostEquals( ( 1  ..0  ..-eps):size() - 1/eps - 1  , 0, eps )
  assertAlmostEquals( ( 0  ..0.5.. eps):size() - 0.5/eps - 1, 0, eps )
  assertAlmostEquals( ( 0.5..0  ..-eps):size() - 0.5/eps - 1, 0, eps )
  assertEquals( (1..10..1):size(), #(1..10..1) )
end

-- Iterations/Ipairs

function TestRange:testRangeIter()
  local s, r
  r = { ipairs(range(1,10,1)) }
  assertTrue( is_function(r[1]) )
  assertTrue( is_range(r[2])    )
  assertTrue( r[3] == 0         )

  r   = 1  .. 5         for i,v in ipairs(r) do      assertEquals(r[i], v) end
  r   = 0.5.. 0 ..-0.1  for i,v in ipairs(r) do      assertEquals(r[i], v) end
  r   = 10 ..-1 ..-0.7  for i,v in ipairs(r) do      assertEquals(r[i], v) end
  r,s = 1..10.. huge, 0 for i,v in ipairs(r) do s=s+1 ; assertEquals(s, 1) end
  r,s = 1..10..-huge, 0 for i,v in ipairs(r) do s=s+1 ; assertEquals(s, 1) end

  for _,v in ipairs(values.rng) do
    r = v[1]..v[2]..v[3] for i,v in ipairs(r) do assertEquals(r[i], v) end
  end
  for _,v in ipairs(values.empty) do
    r,s = v[1]..v[2]..v[3], 0 for i,v in ipairs(r) do s=s+1; assertEquals(s, 0) end
  end
end

-- AdjustRange

function TestRange:testConstructor()
	local a   = 2
	local msg = {
		"invalid argument #1 (finite number expected)",
		"invalid argument #2 (finite number expected)",
		"invalid argument #3 (finite number expected)",
	}
  assertErrorMsgContains( msg[1], range           )
  assertErrorMsgContains( msg[1], range, inf      )
	assertErrorMsgContains( msg[1], range,-inf      )
	assertErrorMsgContains( msg[1], range, nil, 1   )
	assertErrorMsgContains( msg[1], range, 1..10..2 )
	assertErrorMsgContains( msg[1], range, ''       )
	assertErrorMsgContains( msg[2], range, 1  , ''  )
	assertErrorMsgContains( msg[3], range, 1  , 10 , ''  )
	assertErrorMsgContains( msg[3], range, 1  , 10 , nan )
	assertErrorMsgContains( msg[3], range, 10 , 1  ,-nan )
	assertErrorMsgContains( msg[2], range, 1  , nan, nan )
	assertErrorMsgContains( msg[2], range, 1  ,-nan,-nan )
	assertErrorMsgContains( msg[1], range, nan, nan, nan )
	assertErrorMsgContains( msg[1], range,-nan,-nan,-nan )
	assertErrorMsgContains( msg[3], range, 1  , 10 , inf )
	assertErrorMsgContains( msg[3], range, 10 , 1  ,-inf )
	assertErrorMsgContains( msg[2], range, 1  , inf, inf )
	assertErrorMsgContains( msg[2], range, 1  ,-inf,-inf )
	assertErrorMsgContains( msg[1], range, inf, inf, inf )
	assertErrorMsgContains( msg[1], range,-inf,-inf,-inf )
  assertErrorMsgContains( msg[3], range,  1 , 10 , 0   )
  assertErrorMsgContains( msg[3], range,  1 , 10 ,-0   )
  assertEquals(  1.. 1.. 0  , range( 1 , 1 , 0) )
  assertEquals(  1.. 1..-0  , range( 1 , 1 ,-0) )
  assertEquals(  0.. 0.. 0  , range( 0 , 0 , 0) )
  assertEquals( -0..-0..-0  , range(-0 ,-0 ,-0) )
  assertEquals(  a.. a..huge, range( a , a , huge) )
  assertEquals( -a..-a..huge, range(-a ,-a , huge) )
  assertEquals(  1..10      , range( 1 , 10      ) )
  assertEquals(  a.. a..huge, range( a , a , huge) )
  assertEquals( -a..-a..huge, range(-a ,-a , huge) )

  for _,v in ipairs(values.rng) do
    assertTrue( is_range( range(v[1],v[2],v[3]) ) )
    assertEquals( range(v[1],v[2],v[3]), v[1]..v[2]..v[3]  )
  end
  for _,v in ipairs(values.empty) do
    assertTrue( is_range( range(v[1],v[2],v[3]) ) )
    assertEquals( range(v[1],v[2],v[3]), v[1]..v[2]..v[3] )
  end
  for _,v in ipairs(values.num) do
    assertEquals( range( 1 , 10, v), 1 ..10.. v )
    assertEquals( range( 10, 1 ,-v), 10..1 ..-v )
  end
  for _,v in ipairs(values.lim) do
    assertTrue( is_range(range( 1,  10, v)) )
    assertTrue( is_range(range( 10, 1 ,-v)) )
    assertEquals( range( 1 , 10, v ),  1.. 10.. v )
    assertEquals( range( 10, 1 ,-v ),  10..1 ..-v )
    assertEquals( range( 1 ,-v ,-v ),  1..-v ..-v )
    assertEquals( range( 1 , v , v ),  1.. v .. v )
    assertEquals( range( v , v , v ),  v.. v .. v )
    assertEquals( range(-v ,-v ,-v ), -v..-v ..-v )
  end
end

function TestRange:testCtorSingleArg()
  assertEquals( range( 1).start,  1 )
  assertEquals( range( 1).stop ,  1 )
  assertEquals( range( 1).step ,  1 )
  assertEquals( range(-2).start,  1 )
  assertEquals( range(-2).stop , -2 )
  assertEquals( range(-2).step ,  1 )

  for _,v in ipairs(values.num) do
    assertEquals( range( v).start, 1 )
    assertEquals( range( v).stop , v )
    assertEquals( range( v).step , 1 )
    assertEquals( range(-v).start, 1 )
    assertEquals( range(-v).stop ,-v )
    assertEquals( range(-v).step , 1 )
  end
end

function TestRange:testNConstructor()
  local r
  local msg = {
    "invalid argument #1 (finite number expected)",
    "invalid argument #2 (finite number expected)",
    "invalid argument #3 (positive number expected)",
  }
  assertErrorMsgContains( msg[3], nrange, 1  , 10 , ''   )
  assertErrorMsgContains( msg[3], nrange, 1  , 10 ,-1    )
  assertErrorMsgContains( msg[3], nrange, 1  , 10 ,-inf  )
  assertErrorMsgContains( msg[3], nrange, 1  , 10 , nan  )
  assertErrorMsgContains( msg[3], nrange, 10 , 1  ,-nan  )
  assertErrorMsgContains( msg[2], nrange, 1  , nan, nan  )
  assertErrorMsgContains( msg[2], nrange, 1  ,-nan,-nan  )
  assertErrorMsgContains( msg[1], nrange, nan, nan, nan  )
  assertErrorMsgContains( msg[1], nrange,-nan,-nan,-nan  )
  assertErrorMsgContains( msg[3], nrange, 1  , 10 ,-huge )
  assertErrorMsgContains( msg[3], nrange, 1  , 10 ,-tiny )
  assertErrorMsgContains( msg[3], nrange, 0  , 0  , 0    )
  assertErrorMsgContains( msg[3], nrange,-0  ,-0  ,-0    )
  assertErrorMsgContains( msg[3], nrange, 1  , 1  , 0    )
  assertErrorMsgContains( msg[3], nrange, 1  , 1  ,-0    )

  assertEquals( nrange(0,0,1):size(), 1 )
  assertEquals( nrange(1,1,1):size(), 1 )

  r = nrange(1 ,10,10) for i,v in ipairs(r) do assertEquals(r[i], v) end
  r = nrange(10,1 ,10) for i,v in ipairs(r) do assertEquals(r[i], v) end
end

function TestRange:testNCtorSingleArg()
  assertEquals( nrange(1).step , 0 )
  for _,v in ipairs(values.num) do
    assertEquals( nrange(v).start, 1 )
    assertEquals( nrange(v).stop , v )
    if v ~= 1 then
      assertEquals( nrange(v):size(), 100 )
    end
  end
  assertEquals( nrange(1):size(), inf )
end

function TestRange:testNanAndInfCtor()
  assertNaN   (  range( 1, 10, 1):value( nan) )
  assertNaN   ( nrange( 1, 10, 1):value( nan) )
  assertEquals( nrange( 1, 10, 1):value( inf), inf )
  assertTrue  ( is_range( nrange( 1, 10, inf) ) )
end

function TestRange:testNctorSinglePoint()
  local nr
  for _,v in ipairs(values.nrng) do
    nr = nrange(v[1], v[2], 1)
    assertEquals( nr:size()   , 1        )
    assertEquals( nr:get(0)   , nr.start )
    assertFalse ( nr:is_empty() )
    assertNil   ( nr:get(1)     )
  end
end

function TestRange:testAdjSize()
  local r, nr, s, i
  for _,v in ipairs(values.nrng) do
    nr = nrange(v[1], v[2], v[3])
    for i = 0,100 do
      nr = nrange(v[1],v[2], nr:size())
      assertEquals( nr:size(), v[3] )
      i = i + 1
    end
  end
  for _,v in ipairs(values.num) do
    r  =  range( 1, 100, v )
    s  = r:size()
    nr = nrange( 1, 100, s )
    if v ~= tiny then
      assertEquals( nr:size(), r:size() )
    end
  end

  for _,v in ipairs(values.zeros ) do
    assertEquals(  (v[1]..v[2]..v[3]  ):size(), inf )
    assertEquals( range(v[1],v[2],v[3]):size(), inf )
  end
  for _,v in ipairs(values.empty) do
    assertEquals( (v[1]..v[2]..v[3]   ):size(), 0 )
    assertEquals( range(v[1],v[2],v[3]):size(), 0 ) -- actual 1, err after adjustment
  end
  assertEquals( nrange( 2, 10, nil):size(), 100 )
  assertEquals( nrange( 2, 10, 1.1):size(), 2   )
  assertEquals( nrange( 1, 32, 9  ):size(), 9   )
  assertEquals(  range( 0 , 0 , 0 ):size(), inf )
  assertEquals(  range(-0 ,-0 ,-0 ):size(), inf )
  assertEquals(  range( 1 , 1 , 0 ):size(), inf )
  assertEquals(  range( 1 , 1 ,-0 ):size(), inf )
end

function TestRange:testAdjStep()
  local r, nr, s
  for _,v in ipairs(values.rng) do
    if v[1] ~= v[2] then
      r  = range( v[1], v[2], v[3] )
      s  = r:size()
      nr = nrange( v[1], v[2], s )
      assertTrue( r == nr )
      assertAlmostEquals( r.step  - nr.step, 0, eps )
     end
  end
  for _,v in ipairs(values.num) do
      assertAlmostEquals( range(1 ,10, v).step - (1 ..10.. v).step, 0, eps )
      assertAlmostEquals( range(10, 1,-v).step - (10..1 ..-v).step, 0, eps )
  end
  for _,v in ipairs(values.num) do
    r  =  range( 1, 100, v )
    s  = r:size()
    nr = nrange( 1, 100, s )
    assertAlmostEquals( r.step - v, 0, eps )
  end
  for _,v in ipairs(values.zeros ) do
    assertEquals(  (v[1]..v[2]..v[3]  ).step, 0 )
    assertEquals( range(v[1],v[2],v[3]).step, 0 )
  end
  for _,v in ipairs(values.empty) do
    r = (v[1]..v[2]..v[3]).step
    assertEquals( range(v[1],v[2],v[3]).step, v[3] )
  end

  assertEquals(  range( 0  , 0   , 0   ).step, 0    )
  assertEquals(  range(-0  ,-0   ,-0   ).step,-0    )
  assertEquals(  range( 1  , 1   , 0   ).step, 0    )
  assertEquals(  range( 1  , 1   ,-0   ).step,-0    )
  assertEquals( nrange( 1  , 100 )      .step, 1    )
  assertEquals( nrange( 100, 1   )      .step,-1    )
  assertEquals( nrange( 10 , 1  , 0.1  ).step,-huge )
  assertEquals( nrange(-1  ,-10 , 1    ).step,-huge )
  assertEquals( nrange( 1  , 10 , 1    ).step, huge )
  assertEquals( nrange( 1  , 1  , 1    ).step, huge )
  assertEquals( nrange( 1  , 10 , eps  ).step, huge )
  assertEquals( nrange( 1  , 10 , tiny ).step, huge )
  assertEquals( nrange( 1  , 0  , huge ).step,-0    )
  assertEquals( nrange( 1  , 10 , inf  ).step, 0    )
  assertEquals( nrange( 1  , 10 , 1+eps).step, 9    )
  assertEquals( nrange( 10 , 10 , 2    ).step, 0    )
  assertEquals( nrange( 10 , 1  , 1.1  ).step,-9    )

  assertAlmostEquals( nrange( 0, 1  , 1/eps).step -  eps, 0, eps )
  assertAlmostEquals( nrange( 1, 0  , 1/eps).step - -eps, 0, eps )
  assertAlmostEquals( nrange( 0, 0.5, 1/eps).step -  eps, 0, eps )
  assertAlmostEquals( nrange( 1, 0.5, 1/eps).step - -eps, 0, eps )
  assertAlmostEquals( nrange( 1, 10, 1e6).step, 9.000009000009e-06, eps )
  assertAlmostEquals( nrange( 1, 10, 1e9).step, 9.000000009e-09   , eps )
end

function TestRange:testAdjStop()
  local nr, r, s
  assertEquals( nrange( 1, 10, 1  ) :value(0)     , 1    )
  assertEquals( nrange( 1, 10, 1  ) :value(1)     , huge )
  assertEquals( nrange( 1, 10, 1  ) :value(2)     , inf  )
  assertEquals( nrange( 1, 10, huge):value(0)     , 1    )
  assertEquals( nrange( 1, 10, huge):value(huge-1), 10   )
  assertEquals( nrange( 1, 10, tiny):value(tiny-1),-huge )
  assertNaN   ( nrange( 1, 10, inf ):value(inf-1) )

  for _,v in ipairs(values.nrng) do
    nr = nrange( v[1], v[2], v[3] )
    assertEquals( nr:value(v[3]-1), nr.stop )
  end
  for _,v in ipairs(values.rng) do
    r = range( v[1], v[2], v[3] )
    s = r:size()
    assertEquals( r:value(s-1), r.stop )
  end
  for _,v in ipairs(values.num) do
    r = range( 1, 100, v )
    s = r:size()
    if v >= 100 then
      assertEquals( r:value(s-1), r.start )
    end
  end

  r = range( 0, 0 , 0    )                  assertEquals( r:size(), inf )
  r = range(-0,-0 ,-0    )                  assertEquals( r:size(), inf )
  r = range( 1, 1 , 0    )                  assertEquals( r:size(), inf )
  r = range( 1, 1 ,-0    )                  assertEquals( r:size(), inf )
  r = range( 1, 10, 1e-09)    s = r:size()  assertEquals( r:value(s-1), r.stop )
  r = range( 1, 10, 0.1  )    s = r:size()  assertEquals( r:value(s-1), r.stop )
  r = range( 1, 10, 0.5  )    s = r:size()  assertEquals( r:value(s-1), r.stop )
  r = range( 1, 10, 1    )    s = r:size()  assertEquals( r:value(s-1), r.stop )
  r = range( 1, 10, 0.1-eps)  s = r:size()  assertAlmostEquals( r:value(s-1) - r.stop, 0, eps )
  r = range( 1, 10, 0.1+eps)  s = r:size()  assertAlmostEquals( r:value(s-1) - r.stop, 0, eps )
  r = range( 1, 10, 1  -eps)  s = r:size()  assertAlmostEquals( r:value(s-1) - r.stop, 0, eps )
  r = range( 1, 10, 1  +eps)  s = r:size()  assertAlmostEquals( r:value(s-1) - r.stop, 0, eps )
  r = range( 1, 10, 0.5-eps)  s = r:size()  assertAlmostEquals( r:value(s-1) - r.stop, 0, eps )
  r = range( 1, 10, 0.5+eps)  s = r:size()  assertAlmostEquals( r:value(s-1) - r.stop, 0, eps )
end

-- Combination

function TestRange:testLast()
  assertEquals(  range( 1 , 1, 0 )   :last(),  1    )
  assertNil   (  range( 1 , 0 )      :last()        )
  assertEquals(  range( 20, 1 ,-2  ) :last(),  2    )
  assertEquals(  range( 1 )          :last(),  1    )
  assertEquals(  range( 1 , 20, huge):last(),  1    )
  assertEquals( nrange( 1 , 20, huge):last(),  20   )
  assertEquals( nrange( 1 , 20, tiny):last(),  1    )
  assertEquals(  range( 1 , 20, 0.5) :last(),  20   )
  assertEquals(  range( 1 , 20, 1  ) :last(),  20   )
  assertEquals(  range( 1 , 20, 1.7) :last(),  19.7 )
  assertEquals(  range( 1 , 20, 2  ) :last(),  19   )
  assertEquals(  range( 1 , 20, 10 ) :last(),  11   )
  for _,v in ipairs(values.zeros) do
    assertEquals( range(v[1],v[2],v[3]):last(), v[2] )
  end
  for _,v in ipairs(values.rng) do
    assertEquals( range(v[1],v[2],v[3]):last(), v[2] )
  end
  for _,v in ipairs(values.num) do
    if v == 0 then
      assertEquals( nrange( 1 , 20, v):last(), 1 )
    elseif v <= 1 then
      assertEquals( nrange( 1 , 20, v):last(), 1  )
      assertEquals( nrange( 20, 1 , v):last(), 20 )
    end
  end

  assertEquals(  range( 1 , 20, tiny):last(),  20 )
  assertEquals( nrange( 1 , 20, inf ):last(),  1  )

  for _,v in ipairs(values.empty) do
    assertEquals( (v[1]..v[2]..v[3]):size(), 0 )
    assertEquals( range(v[1], v[2], v[3]):size(), 0 )
    assertNil   (  range(v[1],v[2],v[3]):last() )
    assertEquals( {range(v[1],v[2],v[3]):bounds()}, {nil, nil, nil})
  end
  for _,v in ipairs(values.zeros) do
    assertEquals( (v[1]..v[2]..v[3])   :last(), v[1] )
    assertEquals( range(v[1],v[2],v[3]):last(), v[1] )
  end
end

function TestRange:testBounds()
  local r, b, a, v
  assertEquals( { range( 1 )          :bounds()}, { 1  , 1   , 1      } )
  assertEquals( { range( 1 , 0 )      :bounds()}, { nil, nil , nil    } )
  assertEquals( { range( 1 , 20, huge):bounds()}, { 1  , 1   , huge   } )
  assertEquals( { range( 1 , 20, tiny):bounds()}, { 1  , 20  , tiny   } )
  assertEquals( {nrange( 1 , 20, huge):bounds()}, { 1  , 20  , 19/huge} )
  assertEquals( {nrange( 1 , 20, tiny):bounds()}, { 1  , 1   , huge   } )
  assertEquals( { range( 1 , 20, 0.5) :bounds()}, { 1  , 20  , 0.5    } )
  assertEquals( { range( 1 , 20, 1  ) :bounds()}, { 1  , 20  , 1      } )
  assertEquals( { range( 1 , 20, 1.7) :bounds()}, { 1  , 19.7, 1.7    } )
  assertEquals( { range( 1 , 20, 2  ) :bounds()}, { 1  , 19  , 2      } )
  assertEquals( { range( 1 , 20, 10 ) :bounds()}, { 1  , 11  , 10     } )
  assertEquals( { range( 20, 1 ,-2  ) :bounds()}, { 2  , 20  , 2      } )

  for _,v in ipairs(values.zeros) do
    assertEquals( {range(v[1],v[2],v[3]):bounds()}, {v[1], v[1], 0})
  end
  for _,v in ipairs(values.empty) do
    assertEquals( {range(v[1],v[2],v[3]):bounds()}, {nil, nil, nil})
  end
  for _,v in ipairs(values.rng) do
    if v[3] < 0 then
      assertEquals( {range(v[1],v[2],v[3]):bounds()}, {v[2], v[1],-v[3]})
    else
      assertEquals( {range(v[1],v[2],v[3]):bounds()}, {v[1], v[2], v[3]})
    end
  end
  for _,v in ipairs(values.num) do
    if v == 0 then
      assertEquals( {nrange( 1 , 20, v):bounds()}, {nil, nil, nil} )
    elseif v <= 1 then
      assertEquals( {nrange( 1 , 20, v):bounds()}, { 1 , 1 , huge } )
      assertEquals( {nrange( 20, 1 , v):bounds()}, { 20, 20, huge } )
    end
  end
  for _,v in ipairs(values.num) do
    r = range( 1, 10, v)
    b = { r:bounds() }
    if v ~= tiny then
      assertEquals( r:value(r:size()-1), b[2] )
    end
  end

  v = {
    { 1 , 20, 0.7-eps}, { 1 , 20, 0.7    }, { 1 , 20, 0.7+eps},
    { 1 , 20, 1 - eps}, { 1 , 20, 1 + eps}, { 1 , 20, 1.1    },
    { 20, 1 ,-1.7    },
  }
  for _,v in ipairs(v) do
    r = range(v[1],v[2],v[3])
    b = { r:bounds() }
    a = b[1] + b[3] * (r:size()-1)
    assertAlmostEquals( b[2] - a, 0, eps )
  end
end

function TestRange:testOverlap()
  assertTrue ( range(1)         :overlap(1..1)        )
  assertFalse( range( 0,-10, 1) :overlap(0..9)        )
  assertFalse( range( 0, 10,-1) :overlap(0..9)        )
  assertFalse( range( 2, 10, 2) :overlap(12..20..2)   )
  assertTrue ( (1..9)           :overlap(1..1)        )
  assertTrue ( (1..9..0.7)      :overlap(9..1..-0.7)  )
  assertTrue ( (1..10) :overlap( nrange(1 , 10, 10) ) )
  assertTrue ( (1..10) :overlap( nrange(10,-1 , 10) ) )
  assertTrue ( range( 1 , 20, 1+eps):overlap(range( 1 , 20, 1.1 )) )

  for _,v in ipairs(values.rng) do
    assertTrue ( range(v[1],v[2],v[3]):overlap(-10..10) )
  end
  for _,v in ipairs(values.empty) do
    assertFalse( range(v[1],v[2],v[3]):overlap(-10..10) )
  end
  for _,v in ipairs(values.zeros) do
    assertFalse( range(v[1],v[2],v[3]):overlap(2..10) )
    assertTrue ( range(v[1],v[2],v[3]):overlap(0..1)  )
  end
end

-- performance test suite -----------------------------------------------------o

Test_Range = {}

function Test_Range:testRangeIter()
  local s = 4e-8
  local r = 0..s..eps
  local t0 = os.clock()
  for i,v in ipairs(r) do assert(r[i], v) end
  local dt = os.clock() - t0
  assertAlmostEquals( dt, 0.5, 1 )
end

function Test_Range:testGet()
  local s = 4e-8
  local res = 0..s..eps
  local ref = nrange(0, s, 180143986)
  local t0 = os.clock()
  for i=1,#res do assertAlmostEquals(res:get(i-1) - ref:get(i-1), 0, eps) end
  local dt = os.clock() - t0
  assertAlmostEquals( dt, 0.5, 1 )
end

function Test_Range:testIndex()
  local s = 4e-8
  local res = 0..s..eps
  local ref = nrange(0, s, 180143986)
  local t0 = os.clock()
  for i=1,#res do assertAlmostEquals(res[i] - ref[i], 0, eps) end
  local dt = os.clock() - t0
  assertAlmostEquals( dt, 0.5, 1 )
end

-- end ------------------------------------------------------------------------o