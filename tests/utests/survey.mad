--[=[
 o-----------------------------------------------------------------------------o
 |
 | Survey tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the survey module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNotNil, assertEquals, assertAlmostEquals, assertAllAlmostEquals,
      assertStrContains, assertErrorMsgContains                  in MAD.utest

local survey, plot, option, filesys                              in MAD
local fnil, ftrue, ffalse                                        in MAD.gfunc
local actionat, atmid1                                           in MAD.symint
local pi, eps                                                    in MAD.constant
local sinc, deg2rad                                              in MAD.gmath
local pause                                                      in MAD.utility
local sequence, sbend, quadrupole, srotation, yrotation          in MAD.element

local toolbox = require 'toolbox'

local refdir = \s -> 'survey_ref/'..(s or '')
local rundir = \s -> 'survey_run/'..(s or '')

-- helpers --------------------------------------------------------------------o

local doplot -- = true

if doplot then
  local pause, atexit in MAD.utility
  atexit(pause, true)
end

local srvcol = {'name','kind','s','l','angle','x','y','z','theta','phi','psi','slc'}

local srvpid = 0
local srvplt = plot {
  sid      = \ => srvpid=srvpid%25+1 return srvpid end,
  output   = 0,
  x1y1     = { z = {'x','y'} },
  xlabel   = "z [m]",
  ylabel   = "x,y [m]",
  prolog   = "set size ratio -1\nset size square\n",
  fontsize = 14,
  exec     = false,
}

-- regression test suite ------------------------------------------------------o

TestSurvey = {}

local function loadLHC()
  return toolbox.loadLHC()
end

function TestSurvey:setUp ()
  filesys.mkdir(rundir())
  self.optfmt = option.numfmt
  option.numfmt = "% -.10g"
end

function TestSurvey:tearDown ()
  option.numfmt = self.optfmt
end

function TestSurvey:testSurveyLHC1 ()
  local lhcb1 = loadLHC()
  local mtbl = survey { sequence=lhcb1 }
  mtbl:write(rundir('survey_lhcb1'))
  assertEquals(#mtbl, 13267)
end

function TestSurvey:testSurveyLHC2 ()
  local _, lhcb2 = loadLHC()
  local mtbl = survey { sequence=lhcb2 }
  mtbl:write(rundir('survey_lhcb2'))
  assertEquals(#mtbl, 13265)
end

function TestSurvey:testSurveySlicedLHC1 ()
  local lhcb1 = loadLHC()
  local mtbl = survey { sequence=lhcb1, nslice=3, save='atbody' }
  mtbl:write(rundir('survey_lhcb1_slice'))
  assertEquals(#mtbl, 22449)
end

function TestSurvey:testSurveySlicedLHC2 ()
  local _, lhcb2 = loadLHC()
  local mtbl = survey { sequence=lhcb2, nslice=3, save='atbody' }
  mtbl:write(rundir('survey_lhcb2_slice'))
  assertEquals(#mtbl, 22443)
end

function TestSurvey:testSurveyMidSliceLHC1 ()
  local lhcb1 = loadLHC() -- ; lhcb1:dumpseq(rundir('dump_lhcb1_slice'))
  local mtbl = survey { sequence=lhcb1, nslice=2, implicit=true, save='atslice' }
  -- mtbl:inscol('s', 's_madx', \i -> mtbl.s[i]-mtbl.l[i])
  mtbl:write(rundir('survey_lhcb1_midslc'))
  assertEquals(#mtbl, 13267)
end

function TestSurvey:testSurveyMidSliceLHC2 ()
  local _, lhcb2 = loadLHC() -- ; lhcb2:dumpseq(rundir('dump_lhcb2_slice'))
  local mtbl = survey { sequence=lhcb2, nslice=2, implicit=true, save='atslice' }
  mtbl:write(rundir('survey_lhcb2_midslc'))
  assertEquals(#mtbl, 13265)
end

function TestSurvey:testSurveyMidSliceBwdLHC1 ()
  local lhcb1 = loadLHC()
  local mtbl = survey { sequence=lhcb1, nslice=2, implicit=true, dir=-1, save='atslice' }
  mtbl:write(rundir('survey_lhcb1_midslc_bwd'))
  assertEquals(#mtbl, 13267)
end

function TestSurvey:testSurveyMidSliceBwdLHC2 ()
  local _, lhcb2 = loadLHC()
  local mtbl = survey { sequence=lhcb2, nslice=2, implicit=true, dir=-1, save='atslice' }
  mtbl:write(rundir('survey_lhcb2_midslc_bwd'))
  assertEquals(#mtbl, 13265)
end

function TestSurvey:testSurveyFwdBwdLHC1 ()
  local lhcb1 = loadLHC()
  local _, mflw = survey { sequence=lhcb1, dir=1, save=false }

  local eidx, spos, V, A in mflw
  assertEquals(eidx, #lhcb1)

  local _, mflw = survey { sequence=lhcb1, dir=-1, save=false, -- bwd
                           s0=spos, X0=V, A0=A }

  local eidx, spos, V, A in mflw
  assertEquals         ( eidx, 1 )
  assertAlmostEquals   ( spos, 0 )
  assertAllAlmostEquals( V:totable(), 0, 1e-9  )
  assertAllAlmostEquals( A:totable(), 0, 1e-14 )
end

function TestSurvey:testSurveyFwdBwdLHC2 ()
  local _, lhcb2 = loadLHC()
  local _, mflw = survey { sequence=lhcb2, dir=1, save=false }

  local eidx, spos, V, A in mflw
  assertEquals(eidx, #lhcb2)

  local _, mflw = survey { sequence=lhcb2, dir=-1, save=false, -- bwd
                           s0=spos, X0=V, A0=A }

  local eidx, spos, V, A in mflw
  assertEquals         ( eidx, 1 )
  assertAlmostEquals   ( spos, 0 )
  assertAllAlmostEquals( V:totable(), 0, 1e-9  )
  assertAllAlmostEquals( A:totable(), 0, 1e-14 )
end

function TestSurvey:testSurveyIterLHC1 ()
  local lhcb1 = loadLHC()
  local mtbl, mflw, elm = survey { sequence=lhcb1, nstep=0 }
  repeat
    mtbl, mflw, elm = survey { mflow=mflw, nstep=1 }
  until not elm
  mtbl:write(rundir('survey_lhcb1_iter'))
  assertEquals(#mtbl, 13267)
end

function TestSurvey:testSurveyIterLHC2 ()
  local _, lhcb2 = loadLHC()
  local mtbl, mflw, elm = survey { sequence=lhcb2, nstep=0 }
  repeat
    mtbl, mflw, elm = survey { mflow=mflw, nstep=1 }
  until not elm
  mtbl:write(rundir('survey_lhcb2_iter'))
  assertEquals(#mtbl, 13265)
 end

function TestSurvey:testSurveyFullRangeIterLHC1 ()
  local lhcb1 = loadLHC()
  local mtbl, mflw, elm = survey { sequence=lhcb1, range='#s/#e', nstep=0 }
  repeat
    mtbl, mflw, elm = survey { mflow=mflw, nstep=1 }
  until not elm
  mtbl:write(rundir('survey_lhcb1_range_iter'))
  assertEquals(#mtbl, 13267)
end

function TestSurvey:testSurveyFullRangeIterLHC2 ()
  local _, lhcb2 = loadLHC()
  local mtbl, mflw, elm = survey { sequence=lhcb2, range='#s/#e', nstep=0 }
  repeat
    mtbl, mflw, elm = survey { mflow=mflw, nstep=1 }
  until not elm
  mtbl:write(rundir('survey_lhcb2_range_iter'))
  assertEquals(#mtbl, 13265)
end

function TestSurvey:testSurveyRangeLHC1 ()
  local lhcb1 = loadLHC()
  local mtbl = survey { sequence=lhcb1, range={'IP2','IP3'} }
  mtbl:write(rundir('survey_lhcb1_range'))
  assertEquals(#mtbl, 1644)
end

function TestSurvey:testSurveyRangeLHC2 ()
  local _, lhcb2 = loadLHC()
  local mtbl = survey { sequence=lhcb2, range={'IP2','IP3'} }
  mtbl:write(rundir('survey_lhcb2_range'))
  assertEquals(#mtbl, 1662)
end

function TestSurvey:testSurveyRangeIterLHC1 ()
  local lhcb1 = loadLHC()
  local mtbl, mflw, elm = survey { sequence=lhcb1, range='IP2/IP3', nstep=0 }
  repeat
    mtbl, mflw, elm = survey { mflow=mflw, nstep=1 }
  until not elm
  mtbl:write(rundir('survey_lhcb1_range_iter'))
  assertEquals(#mtbl, 1644)
end

function TestSurvey:testSurveyRangeIterLHC2 ()
  local _, lhcb2 = loadLHC()
  local mtbl, mflw, elm = survey { sequence=lhcb2, range='IP2/IP3', nstep=0 }
  repeat
    mtbl, mflw, elm = survey { mflow=mflw, nstep=1 }
  until not elm
  mtbl:write(rundir('survey_lhcb2_range_iter'))
  assertEquals(#mtbl, 1662)
end

function TestSurvey:testSurveyRangeSetLHC1 ()
  local lhcb1 = loadLHC()
  local survey_ip23 = survey { sequence=lhcb1, range={'IP2','IP3'}, exec=false }
  lhcb1:setvar { survey_ip23 := survey_ip23 {} }
  local mtbl = lhcb1.survey_ip23
  mtbl:write(rundir('survey_lhcb1_range_method'))
  assertEquals(#mtbl, 1644)
  lhcb1:setvar { survey_ip23 = nil }
end

function TestSurvey:testSurveyRangeSetLHC2 ()
  local _, lhcb2 = loadLHC()
  local survey_ip23 = survey { sequence=lhcb2, range={'IP2','IP3'}, exec=false }
  lhcb2:setvar { survey_ip23 := survey_ip23 {} }
  local mtbl = lhcb2.survey_ip23
  mtbl:write(rundir('survey_lhcb2_range_method'))
  assertEquals(#mtbl, 1662)
  lhcb2:setvar { survey_ip23 = nil }
end

-- Chicane tests --------------------------------------------------------------o

function TestSurvey:testChicaneSBend ()
  local n, el, ang, tlt = 5, 1.5, pi/2, pi/6
  local cl=el/2

  local seq = sequence 'seq' { l=(2*n-1)*el,
    sbend 'm1' { at=cl+1*el, l=el, angle=-ang, tilt=tlt },
    sbend 'm2' { at=cl+3*el, l=el, angle= ang, tilt=tlt },
    sbend 'm3' { at=cl+5*el, l=el, angle= ang, tilt=tlt },
    sbend 'm4' { at=cl+7*el, l=el, angle=-ang, tilt=tlt },
  }

  local mtbl, mflw = survey { sequence=seq, nslice=self.nslice, save='atbody' }
  local fnam = string.format("survey_chicane_sbend%d", self.nslice or 1)
  mtbl:write(rundir(fnam)..'.tfs', srvcol)

  if doplot then
    srvplt {
      table   = mtbl,
      title   = "Chicane tilted by 30 deg",
      scrdump = rundir(fnam)..'.gp',
    }
  end

  local eidx, spos, V, A in mflw
  assertEquals         ( eidx, 6 )
  assertAlmostEquals   ( spos, 13.5, eps )
  assertAllAlmostEquals( V:totable(), {0,0,8.3197186342054881}, 1e-14  )
  assertAllAlmostEquals( A:totable(), 0, eps )
end

function TestSurvey:testChicaneSBend3 ()
  self.nslice = 3
  self:testChicaneSBend()
end

function TestSurvey:testChicanePatch ()
  local n, el, ang, tlt = 5, 1.5, pi/2, pi/6
  local cl, dl=el/2, el*sinc(ang/2)

  local bend = \i,a -> sequence 'bend' { at=cl+i*el,
    srotation 'mt1' { at= 0, angle=tlt },
    yrotation 'my1' { at= 0, angle=-a*ang/2 },
    yrotation 'my2' { at=dl, angle=-a*ang/2 },
    srotation 'mt2' { at=dl, angle=-tlt },
  }
  local seq = sequence 'seq' { l=(2*n-1)*el,
    bend(1,-1), bend(3,1), bend(5,1), bend(7,-1),
  }

  local mtbl, mflw = survey { sequence=seq }
  mtbl:write(rundir("survey_chicane_patch1.tfs"), srvcol)

  if doplot then
    srvplt {
      table   = mtbl,
      title   = "Chicane with patches tilted by 30 deg",
      scrdump = "survey_chicane_patch1.gp",
    }
  end

  local eidx, spos, V, A in mflw
  assertEquals         ( eidx, 18 )
  assertAlmostEquals   ( spos, 13.5, eps )
  assertAllAlmostEquals( V:totable(), {0,0,8.618769685734172}, 1e-14  )
  assertAllAlmostEquals( A:totable(), 0, eps )
end

function TestSurvey:testChicanePatch3 ()
  local n, el, ang, tlt = 5, 1.5, pi/2, pi/6
  local cl, dl=el/2, el*sinc(ang/2)

  local bend = \i,a -> sequence 'bend' { at=cl+i*el,
    srotation 'mt1' { at=0     , angle=tlt },
    yrotation 'my1' { at=el/6  , angle=-a*ang/3 },
    yrotation 'my2' { at=el/2  , angle=-a*ang/3 },
    yrotation 'my3' { at=5*el/6, angle=-a*ang/3 },
    srotation 'mt2' { at=el    , angle=-tlt },
  }
  local seq = sequence 'seq' { l=(2*n-1)*el,
    bend(1,-1), bend(3,1), bend(5,1), bend(7,-1),
  }

  local mtbl = survey { sequence=seq }
  mtbl:write(rundir("survey_chicane_patch3.tfs"), srvcol)

  if doplot then
    srvplt {
      table   = mtbl,
      title   = "Chicane with patches tilted by 30 deg",
      scrdump = "survey_chicane_patch3.gp",
    }
  end
end

function TestSurvey:testQuadMisalign ()
  local el = 1.5
  local seq = sequence 'seq' { l=2*el,
    quadrupole 'm1' { at=el, l=el, dx=0.1, dy=0.1 },
  }

  local mtbl, mflw = survey { sequence=seq, nslice=3, save='atall', misalign=true }
  mtbl:write(rundir("survey_quad_mis.tfs"), srvcol)

  if doplot then
    local mtbl2 = survey { sequence=seq, nslice=3, asave='atall' }
    srvplt {
      table   = mtbl,
      data    = { xr=mtbl2.x, yr=mtbl2.y, zr=mtbl2.z },
      x1y1     = { z={'x','y'}, zr={'xr','yr'} },
      title   = "Quad translated by 0.1,0.1,0",
      scrdump = rundir("survey_quad_mis.gp"),
    }
  end

  local eidx, spos, V, A in mflw
  assertEquals         ( eidx, 3 )
  assertAlmostEquals   ( spos, 3, eps )
  assertAllAlmostEquals( V:totable(), {0, 0, 3}, eps )
  assertAllAlmostEquals( A:totable(), {0, 0, 0}, eps )
end

function TestSurvey:testSBendMisalign ()
  local el, ang = 1.5, pi/2
  local seq = sequence 'seq' { l=2*el,
    sbend 'm1' { at=el, l=el, angle=ang, dx=0.1, dy=0.1 },
  }

  local mtbl, mflw = survey { sequence=seq, nslice=3, save='atall', misalign=true }
  mtbl:write(rundir("survey_sbend_mis.tfs"), srvcol)

  if doplot then
    local mtbl2 = survey { sequence=seq, nslice=3, save='atall' }
    srvplt {
      table   = mtbl,
      data    = { xr=mtbl2.x, yr=mtbl2.y, zr=mtbl2.z },
      x1y1     = { z={'x','y'}, zr={'xr','yr'} },
      title   = "SBend of pi/2 translated by 0.1,0.1,0",
      scrdump = rundir("survey_sbend_mis.gp"),
    }
  end

  local eidx, spos, V, A in mflw
  assertEquals         ( eidx, 3 )
  assertAlmostEquals   ( spos, 3, eps )
  local Vres = {-1.70492965855137180, 0, 1.70492965855137246}
  local Ares = {-1.57079632679489634, 0, 0}
  assertAllAlmostEquals( V:totable(), Vres, 2*eps )
  assertAllAlmostEquals( A:totable(), Ares, 2*eps )
end

function TestSurvey:testSBendMisalign2 ()
  local el, ang, tlt = 1.5, pi/2, pi/6
  local seq = sequence 'seq' { l=2*el,
    sbend 'm1' { at=el, l=el, angle=ang, dx=0.1, dy=0.1, tilt=tlt},
  }

  local mtbl, mflw = survey { sequence=seq, nslice=3, save='atall', misalign=true }
  mtbl:write(rundir("survey_sbend_mis2.tfs"), srvcol)

  if doplot then
    local mtbl2 = survey { sequence=seq, nslice=3, save='atall' }
    srvplt {
      table   = mtbl,
      data    = { xr=mtbl2.x, yr=mtbl2.y, zr=mtbl2.z },
      x1y1     = { z={'x','y'}, zr={'xr','yr'} },
      title   = "SBend of 90 deg tilted by 30 deg and translated by 0.1,0.1,0",
      scrdump = rundir("survey_sbend_mis2.gp"),
    }
  end

  local eidx, spos, V, A in mflw
  assertEquals         ( eidx, 3 )
  assertAlmostEquals   ( spos, 3, eps )
  local Vres = {-1.47651239597101691,-0.852464829275685787, 1.704929658551372460}
  local Ares = {-pi/2,0.523598775598298705,-0.523598775598298483}
  assertAllAlmostEquals( V:totable(), Vres, 2*eps )
  assertAllAlmostEquals( A:totable(), Ares, 2*eps )
end

function TestSurvey:testSBendMisalign3 ()
  local el, ang, tlt = 1.5, pi/2, pi/6
  local seq = sequence 'seq' { l=2*el,
    sbend 'm1' { at=el, l=el, angle=ang, dx=0.1, dy=0.1, dpsi=tlt},
  }

  local mtbl, mflw = survey { sequence=seq, nslice=3, save='atall', misalign=true }
  mtbl:write(rundir("survey_sbend_mis3.tfs"), srvcol)

  if doplot then
    local mtbl2 = survey { sequence=seq, nslice=3, save='atall' }
    srvplt {
      table   = mtbl,
      data    = { xr=mtbl2.x, yr=mtbl2.y, zr=mtbl2.z },
      x1y1     = { z={'x','y'}, zr={'xr','yr'} },
      title   = "SBend of 90 deg rotated by 30 deg and translated by 0.1,0.1,0",
      scrdump = rundir("survey_sbend_mis3.gp"),
    }
  end

  local eidx, spos, V, A in mflw
  assertEquals         ( eidx, 3 )
  assertAlmostEquals   ( spos, 3, eps )
  local Vres = {-1.704929658551372, 0, 1.704929658551372}
  local Ares = {-pi/2, 0, 0}
  assertAllAlmostEquals( V:totable(), Vres, 2*eps )
  assertAllAlmostEquals( A:totable(), Ares, 2*eps )
end

function TestSurvey:testSBendMisalign4 () -- example in slides
  local el, ang, tlt = 1.5, deg2rad(50), pi/2
  local seq = sequence 'seq' { l=2*el,
    sbend 'm1' { at=el, l=el, angle=ang, dphi=deg2rad(15), dy=0.1, tilt=tlt},
  }

  local mtbl, mflw = survey { sequence=seq, nslice=3, save='atall', misalign=true }
  mtbl:write(rundir("survey_sbend_mis4.tfs"), srvcol)

  if doplot then
    local mtbl2 = survey { sequence=seq, nslice=3, save='atall' }
    srvplt {
      table     = mtbl,
      data      = { xr=mtbl2.x, yr=mtbl2.y, zr=mtbl2.z },
      x1y1      = { z={'x','y'}, zr={'xr','yr'} },
      title     = "SBend of 90 deg tilted by 90 deg and misaligned by phi=15 deg, dy=0.1m",
      legendpos = "left bottom",
      prolog    = "set size ratio -1",
      scrdump   = rundir("survey_sbend_mis4.gp"),
    }
  end

  local eidx, spos, V, A in mflw
  assertEquals         ( eidx, 3 )
  assertAlmostEquals   ( spos, 3, eps )
--  MAD.utility.printf("{%-.17e,%-.17e,%-.17e}\n", V[1], V[2], V[3])
  local Vres = {0,-1.18853620298146767, 2.54882411256991182}
  local Ares = {0,0.872664625997164545,0}
  assertAllAlmostEquals( V:totable(), Vres, 2*eps )
  assertAllAlmostEquals( A:totable(), Ares, 2*eps )
end

function TestSurvey:testSBendMisalignRev () -- example in slides, reversed
  local el, ang, tlt = 1.5, deg2rad(50), pi/2
  local seq = sequence 'seq' { l=2*el, dir=-1,
    sbend 'm1' { at=el, l=el, angle=-ang, dphi=deg2rad(15), dy=0.1, tilt=-tlt},
  }

  local mtbl, mflw = survey { sequence=seq, nslice=3, save='atall', misalign=true }
  mtbl:write(rundir("survey_sbend_misrev.tfs"), srvcol)

  if doplot then
    local mtbl2 = survey { sequence=seq, nslice=3, save='atall' }
    srvplt {
      table     = mtbl,
      data      = { xr=mtbl2.x, yr=mtbl2.y, zr=mtbl2.z },
      x1y1      = { z={'x','y'}, zr={'xr','yr'} },
      title     = "SBend of 90 deg tilted by 90 deg and misaligned by phi=15 deg, dy=0.1m, Rev",
      legendpos = "left bottom",
      prolog    = "set size ratio -1",
      scrdump   = rundir("survey_sbend_misrev.gp"),
    }
  end

  local eidx, spos, V, A in mflw
  assertEquals         ( eidx, 3 )
  assertAlmostEquals   ( spos, 3, eps )
--  MAD.utility.printf("{%-.17e,%-.17e,%-.17e}\n", V[1], V[2], V[3])
  local Vres = {0,-1.18853620298146767, 2.54882411256991182}
  local Ares = {0,0.872664625997164545,0}
  assertAllAlmostEquals( V:totable(), Vres, 2*eps )
  assertAllAlmostEquals( A:totable(), Ares, 2*eps )
end

function TestSurvey:testSBendMisalignBwd () -- example in slides, backward
  local el, ang, tlt = 1.5, deg2rad(50), pi/2
  local seq = sequence 'seq' { l=2*el,
    sbend 'm1' { at=el, l=el, angle=ang, dphi=deg2rad(15), dy=0.1, tilt=tlt},
  }

  local s0 = 3
  local X0 = {0,-1.18853620298146767, 2.54882411256991182}
  local A0 = {0,-0.872664625997164545,0}
  local mtbl, mflw = survey { sequence=seq, s0=s0, X0=X0, A0=A0,
              nslice=3, save='atall', misalign=true, dir=-1 }
  mtbl:write(rundir("survey_sbend_misbwd.tfs"), srvcol)

  if doplot then
    local mtbl2 = survey { sequence=seq, s0=s0, X0=X0, A0=A0,
              nslice=3, save='atall', dir=-1 }
    srvplt {
      table     = mtbl,
      data      = { xr=mtbl2.x, yr=mtbl2.y, zr=mtbl2.z },
      x1y1      = { z={'x','y'}, zr={'xr','yr'} },
      title     = "SBend of 90 deg tilted by 90 deg and misaligned by phi=15 deg, dy=0.1m, Bwd",
      legendpos = "left bottom",
      prolog    = "set size ratio -1",
      scrdump   = rundir("survey_sbend_misbwd.gp"),
    }
  end

  local eidx, spos, V, A in mflw
  assertEquals         ( eidx, 1 )
  assertAlmostEquals   ( spos, 0, eps )
  assertAllAlmostEquals( V:totable(), 0, 4*eps )
  assertAllAlmostEquals( A:totable(), 0, 2*eps )
end

function TestSurvey:testSBendMisalignRevBwd () -- example in slides, reversed, backward
  local el, ang, tlt = 1.5, deg2rad(50), pi/2
  local seq = sequence 'seq' { l=2*el, dir=-1,
    sbend 'm1' { at=el, l=el, angle=-ang, dphi=deg2rad(15), dy=0.1, tilt=-tlt},
  }

  local s0 = 3
  local X0 = {0,-1.18853620298146767, 2.54882411256991182}
  local A0 = {0,-0.872664625997164545,0}
  local mtbl, mflw = survey { sequence=seq, s0=s0, X0=X0, A0=A0,
              nslice=3, save='atall', misalign=true, dir=-1 }
  mtbl:write(rundir("survey_sbend_misrevbwd.tfs"), srvcol)

  if doplot then
    local mtbl2 = survey { sequence=seq, s0=s0, X0=X0, A0=A0,
              nslice=3, save='atall', dir=-1 }
    srvplt {
      table     = mtbl,
      data      = { xr=mtbl2.x, yr=mtbl2.y, zr=mtbl2.z },
      x1y1      = { z={'x','y'}, zr={'xr','yr'} },
      title     = "SBend of 90 deg tilted by 90 deg and misaligned by phi=15 deg, dy=0.1m, RevBwd",
      legendpos = "left bottom",
      prolog    = "set size ratio -1",
      scrdump   = rundir("survey_sbend_misrevbwd.gp"),
    }
  end

  local eidx, spos, V, A in mflw
  assertEquals         ( eidx, 1 )
  assertAlmostEquals   ( spos, 0, eps )
  assertAllAlmostEquals( V:totable(), 0, 4*eps )
  assertAllAlmostEquals( A:totable(), 0, 2*eps )
end

function TestSurvey:testChicaneSBendMisalign ()
  local n, el, ang, tlt = 5, 1.5, pi/2, pi/6
  local cl=el/2

  local seq = sequence 'seq' { l=(2*n-1)*el,
    sbend 'm1' { at=cl+1*el, l=el, angle=-ang, tilt=tlt },
    sbend 'm2' { at=cl+3*el, l=el, angle= ang, tilt=tlt },
    sbend 'm3' { at=cl+5*el, l=el, angle= ang, tilt=tlt, dx=0.1, dy=0.1 },
    sbend 'm4' { at=cl+7*el, l=el, angle=-ang, tilt=tlt },
  }

  local mtbl, mflw = survey { sequence=seq, nslice=3, save='atall', misalign=true }
  mtbl:write(rundir("survey_chicane_sbend_mis.tfs"), srvcol)

  if doplot then
    local mtbl2 = survey { sequence=seq, nslice=3, save='atall' }
    srvplt {
      table   = mtbl,
      data    = { xr=mtbl2.x, yr=mtbl2.y, zr=mtbl2.z },
      x1y1    = { z={'x','y'}, zr={'xr','yr'} },
      title   = "Chicane tilted by 30 deg with misalignment",
      scrdump = rundir("survey_chicane_sbend_mis.gp"),
    }
  end

  local eidx, spos, V, A in mflw
  assertEquals         ( eidx, 6 )
  assertAlmostEquals   ( spos, 13.5, eps )
  local Vres = {-1.0407583140508e-16,-4.85722573273505986e-16, 8.31971863420548985}
  assertAllAlmostEquals( V:totable(), Vres, 2*eps )
  assertAllAlmostEquals( A:totable(), 0   , 2*eps )
end

function TestSurvey:testChicaneQuadMisalign ()
  local n, el, dphi = 5, 1.5, deg2rad(10)
  local cl=el/2

  local seq = sequence 'seq' { l=(2*n-1)*el,
    quadrupole 'm1' { at=cl+1*el, l=el, dphi= dphi },
    quadrupole 'm2' { at=cl+3*el, l=el, dphi=-dphi },
    quadrupole 'm3' { at=cl+5*el, l=el, dphi=-dphi },
    quadrupole 'm4' { at=cl+7*el, l=el, dphi= dphi },
  }

  local mtbl, mflw = survey { sequence=seq, nslice=3, save='atall', misalign=true }
  mtbl:write(rundir("survey_chicane_quad_mis.tfs"), srvcol)

  if doplot then
    local mtbl2 = survey { sequence=seq, nslice=3, save='atall' }
    srvplt {
      table   = mtbl,
      data    = { xr=mtbl2.x, yr=mtbl2.y, zr=mtbl2.z },
      x1y1    = { z={'x','y'}, zr={'xr','yr'} },
      title   = "Quad with 10 deg misalignment",
      scrdump = rundir("survey_chicane_quad_mis.gp"),
    }
  end

  local eidx, spos, V, A in mflw
  assertEquals         ( eidx, 6 )
  assertAlmostEquals   ( spos, 13.5, eps )
  assertAllAlmostEquals( V:totable(), {0,0,13.5}, 2*eps )
  assertAllAlmostEquals( A:totable(), 0, 2*eps )
end

-- From Irina's code ----------------------------------------------------------o

function TestSurvey:testFODO ()
  local drift, marker, quadrupole, sequence in MAD.element
  local lcell  = 20
  local lquad  = 5

  local kqf  =  1.4631475E-02
  local kqd  = -1.4643443E-02

  local ip   = marker 'ip' {}
  local qf   = quadrupole 'qf' { l = lquad, k1 := kqf, tilt = 4e-6 }
  local qd   = quadrupole 'qd' { l = lquad, k1 := kdf }

  local seq = sequence 'fodo1' { l = lcell, refer = 'entry',
    ip 'IP1' { at = 0 },
    qf 'QF1' { at = 0 },
    qd 'QD1' { at = 15 },
    ip 'IP2' { at = lcell },
  }
  assertEquals(seq.dir, 1)

  local actual, expected, margin

  local mtbl = survey { sequence=seq, X0={-1e-4, 2e-6, 0}, A0={0, 0, 3e-7} }

--check quad 'QF1'
  actual   = { mtbl.QF1.angle, mtbl.QF1.tilt, mtbl.QF1.x, mtbl.QF1.y, mtbl.QF1.z, mtbl.QF1.theta, mtbl.QF1.phi, mtbl.QF1.psi }
  expected = { 0             , 4e-6         , -1e-4     , 2e-6      , 5         , 0             , 0           , 3e-7         }
  margin   = { 0             , 0            , 1e-15     , 1e-15     , 0         , 0             , 0           , eps          }
  assertAllAlmostEquals (actual, expected, margin)
--check the whole cell
  actual   = { mtbl.angle[#mtbl], mtbl.tilt [#mtbl], mtbl.x[#mtbl], mtbl.y[#mtbl], mtbl.z[#mtbl], mtbl.theta[#mtbl], mtbl.phi[#mtbl], mtbl.psi[#mtbl]}
  expected = { 0                , 0                , -1e-4        , 2e-6         , lcell        , 0                , 0              , 3e-7           }
  margin   = { 0                , 0                , 1e-15        , 1e-15        , 0            , 0                , 0              , eps            }
  assertAllAlmostEquals (actual, expected, margin)
end

function TestSurvey:testFODODir()
  local drift, marker, quadrupole, sequence  in MAD.element
  local lcell  = 20
  local lquad  = 5

  local ip   = marker 'ip' {}
  local kqf  =  1.4631475E-02
  local kqd  = -1.4643443E-02
  local qf   = quadrupole 'qf'{ l=lquad, k1:= kqf, tilt=0.3}
  local qd   = quadrupole 'qd'{ l=lquad, k1:= kdf }

  local seq = sequence 'fodo1' {l = lcell, refer = 'entry',
    ip 'IP1' { at = 0     },
    qf 'QF1' { at = 0},
    qd 'QD1' { at = 15},
    ip 'IP2' { at = lcell },
  }
  assertEquals(seq.dir, 1)

  local mtbl = survey { sequence=seq, X0={0, 0, 0}, A0={0, 0, 0}}

  option.numfmt = "%-18.16g"
  mtbl:write(rundir('fodo_p1'))
  seq.dir = -1
  assertEquals(seq.dir, -1)
  option.numfmt = "%-18.16g"
  mtbl:write(rundir('fodo_m1'))
end

function TestSurvey:testFODOPatch ()
  local drift, marker, quadrupole, srotation, sequence in MAD.element
  local lcell = 20
  local lquad = 5
  local kqf =  1.4631475E-02
  local kqd = -1.4643443E-02

  local ip = marker 'ip' {}
  local qf = quadrupole 'qf'{ l=lquad, k1:=kqf, tilt=0.3 }
  local qd = quadrupole 'qd'{ l=lquad, k1:=kdf }
  local sr = srotation { tilt=0.03 }
  local seq = sequence 'fodo1' { l=lcell, refer='entry',
    ip 'IP1' { at = 0 },
    sr 'SR1' { at = 0 },
    qf 'QF1' { at = 0 },
    qd 'QD1' { at = 15},
    ip 'IP2' { at = lcell },
  }
  assertEquals(seq.dir, 1)

  local mtbl = survey { sequence=seq, X0={0.01, -0.02, 0}, A0={0, 0, 0}}
  local actual   = { mtbl.angle[#mtbl], mtbl.tilt[#mtbl], mtbl.x[#mtbl], mtbl.y[#mtbl], mtbl.z[#mtbl], mtbl.theta[#mtbl], mtbl.phi[#mtbl], mtbl.psi[#mtbl]}
  local expected = { 0                , 0               , 0.01         , -0.02        , lcell        , 0                , 0              , 0              }
  local margin   = { 0                , 0               , 1e-15        , 1e-15        , 0            , 0                , 0              , eps            }
  assertAllAlmostEquals (actual, expected, margin)

--dir =-1
  seq.dir = -1
  assertEquals(seq.dir, -1)
  actual   = { mtbl.angle[#mtbl], mtbl.tilt [#mtbl], mtbl.x[#mtbl], mtbl.y[#mtbl], mtbl.z[#mtbl], mtbl.theta[#mtbl], mtbl.phi[#mtbl], mtbl.psi[#mtbl]}
  expected = { 0                , 0                , 0.01         , -0.02        , lcell        , 0                , 0              , 0              }
  margin   = { 0                , 0                , 1e-15        , 1e-15        , 0            , 0                , 0              , eps            }
  assertAllAlmostEquals (actual, expected, margin)
end

function TestSurvey:testSPSLine ()
  local pi in math
  local marker, drift, monitor, hkicker, vkicker, multipole,
        sbend, quadrupole,  sextupole, patch, sequence in MAD.element

-- total length
  local circum = 6912.0
-- number of cells and therefore cell length
  local ncell  = 108
  local lcell  = circum/ncell
--lengths of elements and half lengths
  local lsb    = 3.       -- arc length of dipole
  local lquad  = 3.085
  local lquad2 = lquad/2.
  local lsex   = 1.0
--marker
  local ip = marker 'ip' {}
--drift (just to check if it works and gives the same results)
  local dr = drift 'dr' {}
--sbend
--  local asb = 0.010 -- angle
  local asb = 2.0*pi/(8*108)
--  local sb  = sbend 'sb'{ l:=lsb, angle = asb }
  local sb  = multipole 'sb' { knl = {asb} }
--quads
  local kqf =  1.4631475E-02
  local kqd = -1.4643443E-02
  local qf  = quadrupole 'qf' { l=lquad, k1:= kqf }
  local qd  = quadrupole 'qd' { l=lquad, k1:= kdf }
--sextupole
  local ksf =  2.0284442E-02
  local ksd = -3.8394267E-02
  local sf  = sextupole  'sf' {l=lsex,   k2:=ksf }
  local sd  = sextupole  'sd' {l=lsex,   k2:=ksd }
-- orbit correctors and beam position monitors
  local bpm = monitor 'bpm' {l=0.1}
  local ch  = hkicker 'ch'  {l=0.1}
  local cv  = vkicker 'vh'  {l=0.1}
--sequence
  local seq = sequence 'fodo1' {l = lcell, dir =1, refer = 'centre',
      ip  'IP1'  { at = 0            },
      qf  'QF1'  { at = lquad2       },
      sf  'SF1'  { at = lquad2 + 2.5 },
      ch  'CH1'  { at = lquad2 + 3.1 },
      bpm 'BPM1' { at = lquad2 + 3.2 },
      sb  'SB1'  { at = lquad2 + 3.5 },
      sb  'SB2'  { at = lquad2 + 9.9 },
      sb  'SB3'  { at = lquad2 + 22.1},
      sb  'SB4'  { at = lquad2 + 28.5},
      qd  'QD1'  { at = lquad2 + 32. },
      sd  'SD1'  { at = lquad2 + 34.5},
      cv  'CV1'  { at = lquad2 + 35.1},
      bpm 'BPM2' { at = lquad2 + 35.2},
      sb  'SB1'  { at = lquad2 + 35.5},
      sb  'SB2'  { at = lquad2 + 41.9},
      sb  'SB3'  { at = lquad2 + 54.1},
      sb  'SB4'  { at = lquad2 + 60.5},
      ip  'IP2'  { at = lcell        },
  }
  local mtbl = survey { sequence=seq,  X0={0, 0, 0}, A0={0, 0, 0}}
  option.numfmt = "%-18.16g"
  mtbl:write(rundir('sps_cell1'))
  seq.dir = -1

  mtbl = survey { sequence=seq, X0={0, 0, 0}, A0={0, 0, 0}}
  option.numfmt = "%-18.16g"
  mtbl:write(rundir('sps_cell2'))

  local actual   = { mtbl.angle[#mtbl], mtbl.tilt [#mtbl], mtbl.x[#mtbl], mtbl.y[#mtbl], mtbl.z[#mtbl], mtbl.theta[#mtbl], mtbl.phi[#mtbl], mtbl.psi[#mtbl]}
  local expected = { 0                , 0                , 0            , 0            , lcell        , 0                , 0              , 0              }
  local margin   = { 0                , 0                , 1e-15        , 1e-15        , 0            , 0                , 0              , 0              }
  assertAllAlmostEquals (actual, expected, margin)
end

-- end ------------------------------------------------------------------------o
