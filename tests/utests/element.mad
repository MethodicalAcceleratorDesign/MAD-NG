--[=[
 o-----------------------------------------------------------------------------o
 |
 | Elements tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the element module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNil, assertTrue, assertFalse, assertEquals, assertNotEquals
                                                                 in MAD.utest
local add, unm, mul                                              in MAD.gfunc
local is_table, is_object, is_element                            in MAD.typeid
local element                                                    in MAD

local thin_element, drift_element, thick_element, patch_element, -- frames
      sequence, assembly, bline,                                 -- assembler
      marker, slink,                                             -- special
      drift, collimator, instrument, placeholder, monitor,       -- drift
      sbend, rbend, quadrupole, sextupole, octupole,             -- thick
      decapole, dodecapole, kicker, solenoid, wiggler,
      elseparator, rfcavity,
      multipole, rfmultipole,                                    -- thin
      srotation, xrotation, yrotation, translate,
      changedir, changeref,                                      -- patches
      twcavity, crabcavity, hkicker, vkicker, hmonitor, vmonitor -- specializ.
      in element

-- regression test suite ------------------------------------------------------o

TestElement = {}

function TestElement:testDrift ()
  assertTrue(drift.is_drift)
  assertEquals(drift.kind, 'drift')
end

function TestElement:testSBend ()
  assertTrue(sbend.is_thick)
  assertEquals(sbend.kind, 'sbend')
end

function TestElement:testRBend ()
  assertTrue(rbend.is_thick)
  assertEquals(rbend.kind, 'rbend')
end

function TestElement:testQuadrupole ()
  assertTrue(quadrupole.is_thick)
  assertEquals(quadrupole.kind, 'quadrupole')
end

function TestElement:testSextupole ()
  assertTrue(sextupole.is_thick)
  assertEquals(sextupole.kind, 'sextupole')
end

function TestElement:testThinElement()
  assertTrue( multipole  .is_thin )
end

function TestElement:testDriftElement()
  assertTrue( drift      .is_drift )
  assertTrue( collimator .is_drift )
  assertTrue( instrument .is_drift )
  assertTrue( placeholder.is_drift )
  assertTrue( monitor    .is_drift )
end

function TestElement:testThickElement()
  assertTrue( sbend      .is_thick )
  assertTrue( rbend      .is_thick )
  assertTrue( quadrupole .is_thick )
  assertTrue( sextupole  .is_thick )
  assertTrue( octupole   .is_thick )
  assertTrue( decapole   .is_thick )
  assertTrue( dodecapole .is_thick )
  assertTrue( kicker     .is_thick )
  assertTrue( solenoid   .is_thick )
  assertTrue( wiggler    .is_thick )
  assertTrue( elseparator.is_thick )
  assertTrue( rfcavity   .is_thick )
  assertTrue( rfmultipole.is_thick )
!  assertTrue( twcavity   .is_thick )
end

function TestElement:testPatchElement()
  assertTrue( srotation.is_patch )
  assertTrue( xrotation.is_patch )
  assertTrue( yrotation.is_patch )
  assertTrue( translate.is_patch )
  assertTrue( changedir.is_patch )
  assertTrue( changeref.is_patch )
end

function TestElement:testSpecialElement()
  assertTrue( marker.is_special )
  assertTrue( slink .is_special )
end

function TestElement:testExternElement()
  assertTrue( sequence.is_extern )
  assertTrue( assembly.is_extern )
  assertTrue( bline   .is_extern )
end

function TestElement:testInstanceRfmultipole()
  assertTrue( crabcavity:is_instanceOf( rfmultipole ) )
end

function TestElement:testInstanceKicker()
  assertTrue( hkicker:is_instanceOf( kicker ) )
  assertTrue( vkicker:is_instanceOf( kicker ) )
end

function TestElement:testInstanceMonitor()
  assertTrue( hmonitor:is_instanceOf( monitor ) )
  assertTrue( vmonitor:is_instanceOf( monitor ) )
end

function TestElement:testKind()
  for _,e in pairs(element) do
    if is_element(e) then
      assertEquals( string.lower(e.name), e.kind )
    end
  end
end

function TestElement:testUniqueName()
  local t = {}
  for k,e in pairs(element) do
    if is_element(e) then
      assertNil( t[e.name] )
      t[e.name] = e
    end
  end
end

function TestElement:testAdd()
  local e1 = drift     'e1' {}
  local e2 = multipole 'e2' {}
  local bl = e1+e2
  assertEquals(       (e1+e2) .kind, 'bline' )
  assertEquals(  add  (e1,e2) .kind, 'bline' )
  assertEquals( (bline{e1+e2}).kind, 'bline' )
  assertEquals( (bline{e1,e2}).kind, 'bline' )

  assertEquals( bl[1].name    , e1.name )
  assertEquals( bl[2].name    , e2.name )
  assertEquals( bl[1].kind    , e1.kind )
  assertEquals( bl[2].kind    , e2.kind )
  assertTrue  ( bl[1].is_drift )
  assertTrue  ( bl[2].is_thin  )
end

function TestElement:testMul()
  local e1 = drift     'e1' {}
  local e2 = multipole 'e2' {}
  local bl = mul(3,e1+e2)
  assertEquals(    (2*e2).kind , 'bline' )
  assertEquals( mul(2,e2).kind , 'bline' )
  assertEquals( mul(3,e2).__rep, 3       )

  assertEquals( bl[1]   .name, 'bline' )
  assertEquals( bl[1][1].name, 'e1'    )
end

function TestElement:testUnm()
  local e1 = drift     'e1' {}
  local e2 = multipole 'e2' {}
  local bl = (e1+e2)
  assertEquals(   (-e1)   .kind, 'bline' )
  assertEquals( unm(e1)   .kind, 'bline' )

  assertEquals( unm(e1)[1].name, 'e1'    )
  assertEquals( unm(e1)[1].kind, 'drift' )
  assertEquals( unm(bl)[1].name, 'bline' )
  assertNil   ( unm(bl)[2] )
  assertEquals( unm(e1).__rep  , -1      )
end

function TestElement:testSelect()
  assertFalse( multipole:is_selected() )  multipole:select  ()
  assertTrue ( multipole:is_selected() )  multipole:deselect()
  assertFalse( multipole:is_selected() )
end

-- end ------------------------------------------------------------------------o
