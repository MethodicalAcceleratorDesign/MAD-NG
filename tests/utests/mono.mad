--[=[
 o-----------------------------------------------------------------------------o
 |
 | Monomial module regression tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the monomial module.

 o-----------------------------------------------------------------------------o
]=]


local _C, monomial, tostring, totable                               in MAD
local min, max                                                      in MAD.gmath
local assertTrue, assertFalse, assertEquals, assertAlmostEquals, 
      assertNil                                                     in MAD.utest
local is_monomial, is_number                                        in MAD.typeid

-- locals ---------------------------------------------------------------------o

local mono = {
  monomial "000000",

  monomial "100000", monomial "010000", monomial "001000",
  monomial "000100", monomial "000010", monomial "000001",

  monomial "110000", monomial "000011", monomial "010100", monomial "001010",
  monomial "100100", monomial "001001", monomial "010010", monomial "100001",

  monomial "111000", monomial "000111", monomial "011100", monomial "001110",
  monomial "100101", monomial "101001", monomial "011010", monomial "010110",

  monomial "101101",
}

local mono_gt = {
  monomial "111111",

  monomial "211111", monomial "121111", monomial "112111",
  monomial "111211", monomial "111121", monomial "111112",

  monomial "221111", monomial "111122", monomial "121211", monomial "112121",
  monomial "211211", monomial "112112", monomial "121121", monomial "211112",

  monomial "222111", monomial "111222", monomial "122211", monomial "112221",
  monomial "211212", monomial "212112", monomial "122121", monomial "121221",

  monomial "212212",
}

local mono_cut = {
  monomial "0",

  monomial "1"   , monomial "01"   , monomial "001"   ,
  monomial "0001", monomial "00001", monomial "000001",

  monomial "11"  , monomial "000011", monomial "0101" , monomial "00101" ,
  monomial "1001", monomial "001001", monomial "01001", monomial "100001",

  monomial "111"   , monomial "000111", monomial "0111" , monomial "00111",
  monomial "100101", monomial "101001", monomial "01101", monomial "01011",

  monomial "101101",
}

local mono_cut_lengths = {1, 1, 2, 3, 4, 5, 
                           6, 2, 6, 4, 5, 4, 
                           6, 5, 6, 3, 6, 4,
                           5, 6, 6, 5, 5, 6}

-- regression test suites -----------------------------------------------------o

TestMono = {}

function TestMono:testEqual ()
  for i,m in ipairs(mono) do
    assertTrue(m == m)
    assertTrue(m == mono_cut[i])
    assertTrue(_C.mad_mono_eq(m.n, m._dat, m._dat))
    assertTrue(_C.mad_mono_eq(mono_cut[i].n, mono_cut[i]._dat, mono_cut[i]._dat))
  end
end

function TestMono:testConstructor ()
  for i in ipairs(1..9) do          --Up to 9 cause 10 = a
    local mAct = monomial(i)
    local mAct2 = monomial(i, 3)
    local mStr = ""
    local mTbl = {}
    local mTbl2 = {}
    for j in ipairs(1..i) do
      mStr = mStr .. "0"
      mTbl[j] = 0
      mTbl2[j] = 3
    end
    assertEquals(mAct, monomial(mStr))
    assertEquals(mAct, monomial(mTbl))
    assertEquals(mAct2, monomial(mTbl2))
    mStr = ""
    mTbl = {}
    for j in ipairs(1..i) do
      mStr = mStr .. tostring(j)
      mTbl[j] = j
    end
    assertEquals(monomial(mStr), monomial(mTbl))
  end
end

function TestMono:testSize  ()
  for i,m in ipairs(mono) do
    assertEquals(#m, 6)
    assertEquals(m.n, 6)
    assertEquals(#mono_cut[i], mono_cut_lengths[i])
    assertEquals(mono_cut[i].n, mono_cut_lengths[i])
  end
end 

function TestMono:testSame  ()
  local mExp = monomial "00000"
  for i,m in ipairs(mono) do
    assertEquals(m:same(), mExp)
  end
  for i,m in ipairs(mono_cut) do
    local mTbl = {}
    for j = 1, mono_cut_lengths[i] do
      mTbl[j] = 0
    end
    assertEquals(m:same(), monomial(mTbl))
  end
end

function TestMono:testFill  ()
  for i,m in ipairs(mono) do
    assertEquals(m:copy():fill(2), monomial "222222")
    assertEquals(m:copy():fill(21), monomial "LLLLLL")
    assertEquals(m:copy():fill(42), monomial "gggggg")
    assertEquals(m:copy():fill({21, 61, 2, 16, 54, 38}), monomial "Lz2Gsc")
    assertEquals(m:copy():fill("aBc1iX"), monomial "aBc1iX")
    local m100 = m:copy():fill(100)
    local m245 = m:copy():fill(245)
    for j = 1, #m do
      assertEquals(m100[j], 100)
      assertEquals(m245[j], 245)
    end
  end
  for i,m in ipairs(mono_cut) do
    local mTbl = {}
    local mStr = ""
    for j = 1, mono_cut_lengths[i] do
      mTbl[j] = 13
      mStr = mStr .. "D"
    end
    assertEquals(m:copy():fill(13), monomial(mTbl))
    assertEquals(m:copy():fill(13), monomial(mStr))
  end
end

function TestMono:testCopy  () --Change to rely on something other than fill?
  for i,m in ipairs(mono) do
    local newM = m:copy()
    assertTrue(newM == m)
    m:fill(2)
    assertFalse(newM == m)
    mono[i] = newM --Reset mono (I need to test reference semantic without failing other tests)
  end
  for i,m in ipairs(mono_cut) do
    local newM = m:copy()
    assertTrue(newM == m)
    newM:fill(2)
    assertFalse(newM == m)
  end
end

function TestMono:testOrd()
  assertEquals(monomial({213, 71, 161, 105, 137, 182}):ord(), 869)
  assertEquals(monomial({21, 61, 2, 16, 54, 38}):ord(), 192)
  assertEquals(monomial(6, 2):ord(), 12)
  assertEquals(monomial(5, 21):ord(), 105)
  assertEquals(monomial("aBc1iX"):ord(), 163)
end

function TestMono:testOrdp()
  for i,m in ipairs(mono) do
    assertEquals(m:ordp(), 0)
  end 
  local mono1 = monomial({213, 71, 161, 105, 137, 182})
  local mono2 = monomial({21, 61, 2, 16, 54, 38})
  assertEquals(mono1:ordp(), 6374484690210)
  assertEquals(mono2:ordp(), 84115584)
  assertEquals(mono1:ordp(2), 4698141)
  assertEquals(mono2:ordp(2), 2268)
end

function TestMono:testOrdpf()
  for i,m in ipairs(mono) do
    assertEquals(m:ordpf(), 1)
  end 
  local mono1 = monomial({1, 2, 3, 4, 5, 6})
  local mono2 = monomial({10, 11, 1, 2, 0, 5})
  assertEquals(mono1:ordpf(), 24883200)
  assertEquals(mono2:ordpf(), 34764020121600000)
  assertEquals(mono1:ordpf(2), 720)
  assertEquals(mono2:ordpf(2), 3628800)
end

function TestMono:testToString()
  assertEquals(tostring(monomial(6, 2)), "222222")
  assertEquals(tostring(monomial(5, 21), ","), "L,L,L,L,L")
  assertEquals(tostring(monomial(7, 42), " "), "g g g g g g g")
  assertEquals(tostring(monomial({21, 61, 2, 16, 54, 38})), "Lz2Gsc")
  assertEquals(tostring(monomial("aBc1iX")), "aBc1iX")
end

function TestMono:testToTable()
  assertEquals(totable(monomial(6, 2)), {2, 2, 2, 2, 2, 2})
  assertEquals(totable(monomial(5, 21), ","), {21, 21, 21, 21, 21})
  assertEquals(totable(monomial({21, 100, 232, 16, 54, 38})), {21, 100, 232, 16, 54, 38})
  assertEquals(totable(monomial("aBc1iX")), {36, 11, 38, 1, 44, 33})
end

function TestMono:testConcat()
  for i,m in ipairs(mono) do
    assertEquals(m:concat(m), monomial(tostring(m) .. tostring(m)))
    assertEquals(m .. mono_cut[i], monomial(tostring(m) .. tostring(mono_cut[i])))
    assertEquals(mono_cut[i]:concat(m), monomial(tostring(mono_cut[i]) .. tostring(m)))
    assertEquals(mono_cut[i] .. mono_cut[i], monomial(tostring(mono_cut[i]) .. tostring(mono_cut[i])))
  end
  assertEquals(monomial ("aBc1iX") .. monomial("Lz2Gsc"), monomial("aBc1iXLz2Gsc"))
  assertEquals(monomial(5, 21):concat(monomial(6, 2)), monomial("LLLLL222222"))
  
end

function TestMono:testIndex()
  local vals1 = {213, 71, 161, 105, 137, 182}
  local vals2 = {5, 147, 211, 182, 156, 33}
  local vals3 = {36, 11, 38, 1, 44, 33, 21, 61, 2, 16, 54, 38}
  local mono1 = monomial(vals1)
  local mono2 = monomial(vals2)
  local mono3 = monomial ("aBc1iXLz2Gsc")
  local monoList = {mono1, mono2, mono3}
  local valsList = {vals1, vals2, vals3}
  for i,m in ipairs(monoList) do
    for j, v in ipairs(m) do 
      assertEquals(m[j], valsList[i][j])
    end
  end
  assertNil(mono1[0])
  assertNil(mono1[7])
  assertNil(mono2[0])
  assertNil(mono2[7])
  assertNil(mono3[0])
  assertNil(mono3[13])
end

function TestMono:testLesserThan ()
  for i,m in ipairs(mono) do
    assertTrue(m < mono_gt[i])
    assertTrue(mono_cut[i] < mono_gt[i])
    assertTrue(_C.mad_mono_lt(m.n, m._dat, mono_gt[i]._dat))
  end
end

function TestMono:testGreaterThan ()
  for i,m in ipairs(mono) do
    assertTrue(mono_gt[i] > m)
    assertTrue(mono_gt[i] > mono_cut[i])
    assertTrue(_C.mad_mono_lt(m.n, m._dat, mono_gt[i]._dat)) --No gt -> using lt but in reverse
  end
end

function TestMono:testLesserEqual ()
  for i,m in ipairs(mono) do
    assertTrue(m <= m)
    assertTrue(m <= mono_cut[i])
    assertTrue(m <= mono_gt[i])
    assertTrue(mono_cut[i] <= mono_gt[i])
    assertTrue(_C.mad_mono_le(m.n, m._dat, m._dat))
    assertTrue(_C.mad_mono_le(m.n, m._dat, mono_gt[i]._dat))
  end
end

function TestMono:testGreaterEqual ()
  for i,m in ipairs(mono) do
    assertTrue(m >= m)
    assertTrue(m >= mono_cut[i])
    assertTrue(mono_gt[i] >= m)
    assertTrue(mono_gt[i] >= mono_cut[i])
    assertTrue(_C.mad_mono_le(m.n, m._dat, m._dat))
    assertTrue(_C.mad_mono_le(m.n, m._dat, mono_gt[i]._dat)) --No ge -> using le but in reverse
  end
end

function TestMono:testAdd()
  local additionList = {1, 2, 3, 7, 12, 15}
  local additionMono = monomial(additionList)
  for i,m in ipairs(mono) do
    assertEquals(m:add(monomial("111111")), mono_gt[i])
    local addedMono = additionMono + m
    local addedList = {}
    for j, v in ipairs(m) do
      addedList[j] = v + additionList[j]
    end
    assertEquals(totable(addedMono), addedList)
  end
  assertEquals(monomial("IJKLMN") + monomial("IJKLMN"), monomial("acegik"))
end


function TestMono:testSubtract()
  local subtractionList = {1, 2, 3, 7, 12, 15}
  local subtractionMono = monomial(subtractionList)
  for i,m in ipairs(mono) do
    assertEquals(mono_gt[i]:sub(monomial("111111")), m)
    assertEquals(m - monomial("111111"), monomial("000000")) --Checking that 0 - 1 = 0 
    assertEquals(m - monomial("aaaaaa"), monomial("000000")) --Checking that 0 - 36 = 0 
    local subtractedMono = subtractionMono - m
    local subtractedList = {}
    for j, v in ipairs(m) do
      subtractedList[j] = subtractionList[j] - v
    end
    assertEquals(totable(subtractedMono), subtractedList)
  end
  assertEquals(monomial("acegikn") - monomial("IJKLMNO"), monomial("IJKLMNP"))
  assertEquals(monomial("IJKLMN") - monomial("acegik"), monomial("000000"))
end

function TestMono:testMin ()
  local vs = { [2]=1, [8]=1, [16]=1 }
  for i,m in ipairs(mono) do
    local v = vs[i] or 0
    assertTrue(m:min() == 0)
    assertTrue(mono_cut[i]:min() == v)
    assertTrue(mono_gt[i]:min() == 1)
    assertTrue(_C.mad_mono_min(m.n, m._dat) == 0)
    assertTrue(_C.mad_mono_min(mono_cut[i].n, mono_cut[i]._dat) == v)
    assertTrue(_C.mad_mono_min(mono_gt[i].n, mono_gt[i]._dat) == 1)
  end
end

function TestMono:testMax ()
  for i,m in ipairs(mono) do
    local v = i>1 and 1 or 0
    assertTrue(m:max() == v)
    assertTrue(mono_cut[i]:max() == v)
    assertTrue(mono_gt[i]:max() == v+1)
    assertTrue(_C.mad_mono_max(m.n, m._dat) == v)
    assertTrue(_C.mad_mono_max(mono_cut[i].n, mono_cut[i]._dat) == v)
    assertTrue(_C.mad_mono_max(mono_gt[i].n, mono_gt[i]._dat) == v+1)
  end
end

function TestMono:testReverse()
  for i,m in ipairs(mono) do
    for j, v in ipairs(m) do 
      assertEquals(m:reverse()[j], m[#m-j+1])
    end
  end
  for i,m in ipairs(mono_cut) do
    for j, v in ipairs(m) do 
      assertEquals(m:reverse()[j], m[#m-j+1])
    end
  end
end

-- function TestMono:testRevCompare ()
--   for i,m in ipairs(mono) do
--     assertTrue(_C.mad_mono_rcmp_ref(m.n, m._dat, m._dat) ==
--                _C.mad_mono_rcmp    (m.n, m._dat, m._dat))
--     assertTrue(_C.mad_mono_rcmp_ref(m.n, m._dat, mono_gt[i]._dat) ==
--                _C.mad_mono_rcmp    (m.n, m._dat, mono_gt[i]._dat))
--     assertTrue(_C.mad_mono_rcmp_ref(m.n, mono_gt[i]._dat, m._dat) ==
--                _C.mad_mono_rcmp    (m.n, mono_gt[i]._dat, m._dat))
--   end
-- end

-- performance tests ----------------------------------------------------------o

Test_Mono = {}

-- end ------------------------------------------------------------------------o


