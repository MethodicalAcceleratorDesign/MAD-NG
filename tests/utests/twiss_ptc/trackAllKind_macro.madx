! used by trackAllKind.madx

prpt(TTTT): macro = {
  create, table=TTTT_cfg, column={
    "cfgid","model","energy","tilt","tpath","method","nslice","eon","x0i"
  } ;

  create, table=TTTT, column={
     _name,"cfgid",
     "c10","c20","c30","c40","c50","c60",
     "c11","c12","c13","c14","c15","c16",
     "c21","c22","c23","c24","c25","c26",
     "c31","c32","c33","c34","c35","c36",
     "c41","c42","c43","c44","c45","c46",
     "c51","c52","c53","c54","c55","c56",
     "c61","c62","c63","c64","c65","c66"} ;

  create, table=TTTT_tmp, column={
     _name,
     "c10","c20","c30","c40","c50","c60",
     "c11","c12","c13","c14","c15","c16",
     "c21","c22","c23","c24","c25","c26",
     "c31","c32","c33","c34","c35","c36",
     "c41","c42","c43","c44","c45","c46",
     "c51","c52","c53","c54","c55","c56",
     "c61","c62","c63","c64","c65","c66"} ;

  ptc_select, table=TTTT_tmp, column="c10", polynomial=1, monomial="000000";
  ptc_select, table=TTTT_tmp, column="c11", polynomial=1, monomial="100000";
  ptc_select, table=TTTT_tmp, column="c12", polynomial=1, monomial="010000";
  ptc_select, table=TTTT_tmp, column="c13", polynomial=1, monomial="001000";
  ptc_select, table=TTTT_tmp, column="c14", polynomial=1, monomial="000100";
  ptc_select, table=TTTT_tmp, column="c15", polynomial=1, monomial="000010";
  ptc_select, table=TTTT_tmp, column="c16", polynomial=1, monomial="000001";

  ptc_select, table=TTTT_tmp, column="c20", polynomial=2, monomial="000000";
  ptc_select, table=TTTT_tmp, column="c21", polynomial=2, monomial="100000";
  ptc_select, table=TTTT_tmp, column="c22", polynomial=2, monomial="010000";
  ptc_select, table=TTTT_tmp, column="c23", polynomial=2, monomial="001000";
  ptc_select, table=TTTT_tmp, column="c24", polynomial=2, monomial="000100";
  ptc_select, table=TTTT_tmp, column="c25", polynomial=2, monomial="000010";
  ptc_select, table=TTTT_tmp, column="c26", polynomial=2, monomial="000001";

  ptc_select, table=TTTT_tmp, column="c30", polynomial=3, monomial="000000";
  ptc_select, table=TTTT_tmp, column="c31", polynomial=3, monomial="100000";
  ptc_select, table=TTTT_tmp, column="c32", polynomial=3, monomial="010000";
  ptc_select, table=TTTT_tmp, column="c33", polynomial=3, monomial="001000";
  ptc_select, table=TTTT_tmp, column="c34", polynomial=3, monomial="000100";
  ptc_select, table=TTTT_tmp, column="c35", polynomial=3, monomial="000010";
  ptc_select, table=TTTT_tmp, column="c36", polynomial=3, monomial="000001";

  ptc_select, table=TTTT_tmp, column="c40", polynomial=4, monomial="000000";
  ptc_select, table=TTTT_tmp, column="c41", polynomial=4, monomial="100000";
  ptc_select, table=TTTT_tmp, column="c42", polynomial=4, monomial="010000";
  ptc_select, table=TTTT_tmp, column="c43", polynomial=4, monomial="001000";
  ptc_select, table=TTTT_tmp, column="c44", polynomial=4, monomial="000100";
  ptc_select, table=TTTT_tmp, column="c45", polynomial=4, monomial="000010";
  ptc_select, table=TTTT_tmp, column="c46", polynomial=4, monomial="000001";

  ptc_select, table=TTTT_tmp, column="c50", polynomial=5, monomial="000000";
  ptc_select, table=TTTT_tmp, column="c51", polynomial=5, monomial="100000";
  ptc_select, table=TTTT_tmp, column="c52", polynomial=5, monomial="010000";
  ptc_select, table=TTTT_tmp, column="c53", polynomial=5, monomial="001000";
  ptc_select, table=TTTT_tmp, column="c54", polynomial=5, monomial="000100";
  ptc_select, table=TTTT_tmp, column="c55", polynomial=5, monomial="000010";
  ptc_select, table=TTTT_tmp, column="c56", polynomial=5, monomial="000001";

  ptc_select, table=TTTT_tmp, column="c60", polynomial=6, monomial="000000";
  ptc_select, table=TTTT_tmp, column="c61", polynomial=6, monomial="100000";
  ptc_select, table=TTTT_tmp, column="c62", polynomial=6, monomial="010000";
  ptc_select, table=TTTT_tmp, column="c63", polynomial=6, monomial="001000";
  ptc_select, table=TTTT_tmp, column="c64", polynomial=6, monomial="000100";
  ptc_select, table=TTTT_tmp, column="c65", polynomial=6, monomial="000010";
  ptc_select, table=TTTT_tmp, column="c66", polynomial=6, monomial="000001";
}

tsav(TTTT): macro = {
  tsav.__i = 1 ;
  tsav.__n = table(TTTT_tmp, tablelength) ;
  while (tsav.__i <= tsav.__n) {
    setvars, table=TTTT_tmp, row=tsav.__i ;
    ! reverse time (ptc_select bug) (fixed post 5.08.01 release)
    ! c15=-c15; c25=-c25; c35=-c35; c45=-c45; c65=-c65;
    ! c50=-c50; c51=-c51; c52=-c52; c53=-c53; c54=-c54; c56=-c56;
    fill, table=TTTT ;
    tsav.__i = tsav.__i+1 ;
  }
}

totcfgrun = 0 ;

rchk(TTTT, MMMM): macro = {
  rchk.__i = 1 ;
  rchk.__n = table(TTTT_cfg, tablelength) ;

  ! loop over settings
  cfgrun = 0 ;
  while (rchk.__i <= rchk.__n) {
    setvars, table=TTTT_cfg, row=rchk.__i ; ! load settings

    e_on  = eon ;
    e_tlt = tilt*pi/8 ;
    f_tlt = (1-notilt)*pi ;

    if (onlycfgid == 0 || onlycfgid == rchk.__i) {
    if (e_on >= nooff && e_tlt <= f_tlt) {
      printf, text="mmmm: cfg=%4g, x0i=%g, e_on=%g, e_tlt=%g", value={rchk.__i, x0i, e_on, e_tlt} ;

          if (x0i == 1) { x= 0; px=  0; y= 0; py=  0; t= 0; pt=  0; }
      elseif (x0i == 2) { x=x0; px=px0; y=y0; py=py0; t= 0; pt=  0; } ! 4D
      elseif (x0i == 3) { x=x0; px=px0; y=y0; py=py0; t= 0; pt=pt0; } ! 5D
      elseif (x0i == 4) { x=x0; px=px0; y=y0; py=py0; t=t0; pt=pt0; } ! 6D
      else              { print, text="invalid X0 initialisation!"; }

      beam, sequence=seqMMMM, particle=proton, energy=energy ;
      use , sequence=seqMMMM ;

      assign, echo="/dev/null" ;
      ptc_create_universe ;
      ptc_create_layout, model=model, method=method, nst=nslice, time=true, exact=true ;
      if (tpath == 0) {
        ptc_setswitch, debuglevel=debug, mapdump=mapdump, exact_mis=true, fringe=true, time=true, totalpath=false ;
      } else {
        ptc_setswitch, debuglevel=debug, mapdump=mapdump, exact_mis=true, fringe=true, time=true, totalpath=true ;
      }
      if (mapdump > 0) { printf, text="%%%% mmmm CFGID=%g", value={cfgid} ; }
      if (dotwiss > 0 || mapdump == 0) {
        if (x0i == 1) { option -warn; }
        ptc_twiss, closed_orbit=false, no=no, icase=icase, !slice_magnets=true,
                   x=x, px=px, y=y, py=py, t=t, pt=pt, betx=10, bety=10, betz=10 ;
        if (x0i == 1) { option  warn; }
      } else {
        ptc_normal,closed_orbit=false, no=no, icase=icase,
                   x=x, px=px, y=y, py=py, t=t, pt=pt ;
      }
      ptc_end ;
      assign, echo=terminal;

      exec, tsav(TTTT) ;
      cfgrun = cfgrun + 1 ;
    }}
    rchk.__i = rchk.__i+1 ;
  }

  ! save results in table
  totcfgrun = totcfgrun + cfgrun ;
  tbllen = table(TTTT, tablelength) ;
  printf, text="#totcases=%g, #cases=%g, #tbl=%g", value={totcfgrun, cfgrun, tbllen} ;

  if (singlefile == 0) {
    write , table=TTTT, file="seqxmmmm.txt" ;
    shrink, table=TTTT, row=0 ; ! clear table
    print, text="results saved to seqxmmmm.txt" ;
  } else {
    write , table=TTTT, file="tttt.txt" ;
    print, text="results saved to tttt.txt" ;
  }
}