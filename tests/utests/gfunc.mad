--[=[
 o-----------------------------------------------------------------------------o
 |
 | Gfunc regression tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the gfunc module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNil, assertNotNil, assertTrue, assertFalse, assertEquals,
      assertAlmostEquals, assertErrorMsgContains in MAD.utest

local rep in MAD.utility
local nan in MAD.gmath
local ident, fnil, first, second, swap, compose, bottom,
      ftrue, ffalse, fzero, fone, swapv, third, narg, 
      bind1st, bind2nd, bind3rd, bind2st, bind3st, 
      chain, achain, ochain in MAD.gfunc

-- regression test suite ------------------------------------------------------o

TestGfunc = {}

function TestGfunc:testNarg()
  local f=\ (1,2,3)
  assertEquals( narg(1)     , 1   )
  assertEquals( narg(1,nil) , 2   )
  assertEquals({narg(nil,1)}, {2} )
  assertEquals( narg(1,2)   , 2   )
  assertEquals( narg(1,2,3) , 3   )
  assertEquals( narg(f())   , 3   )
end

function TestGfunc:testIdent()
  local f=\ (1,2,3)
  assertEquals( ident(1)     , 1     )
  assertEquals( ident(1,nil) , 1     )
  assertEquals({ident(nil,1)}, {nil,1} )
  assertEquals( ident(1,2)   , 1,2   )
  assertEquals( ident(1,2,3) , 1,2,3 )
  assertEquals( ident(f())   , 1,2,3 )
end

function TestGfunc:testFnil()
  local f=\ (1,2,3)
  assertNil( fnil(1)     )
  assertNil( fnil(1,nil) )
  assertNil( fnil(nil,1) )
  assertNil( fnil(1,2)   )
  assertNil( fnil(1,2,3) )
  assertNil( fnil(f())   )
end

function TestGfunc:testFtrue()
  local f=\ (1,2,3)
  assertTrue( ftrue(1)     )
  assertTrue( ftrue(1,nil) )
  assertTrue( ftrue(nil,1) )
  assertTrue( ftrue(1,2)   )
  assertTrue( ftrue(1,2,3) )
  assertTrue( ftrue(f())   )
end

function TestGfunc:testFfalse()
  local f=\ (1,2,3)
  assertFalse( ffalse(1)     )
  assertFalse( ffalse(1,nil) )
  assertFalse( ffalse(nil,1) )
  assertFalse( ffalse(1,2)   )
  assertFalse( ffalse(1,2,3) )
  assertFalse( ffalse(f())   )
end

function TestGfunc:testFzero()
  local f=\ (1,2,3)
  assertEquals( fzero(1)    , 0 )
  assertEquals( fzero(1,nil), 0 )
  assertEquals( fzero(nil,1), 0 )
  assertEquals( fzero(1,2)  , 0 )
  assertEquals( fzero(1,2,3), 0 )
  assertEquals( fzero(f())  , 0 )
end

function TestGfunc:testFone()
  local f=\ (0,1,2,3)
  assertEquals( fone(0)    , 1 )
  assertEquals( fone(1,nil), 1 )
  assertEquals( fone(nil,1), 1 )
  assertEquals( fone(1,2)  , 1 )
  assertEquals( fone(1,2,3), 1 )
  assertEquals( fone(f())  , 1 )
end

function TestGfunc:testFirst()
  local f=\ (1,2,3)
  assertEquals( first(1)    , 1   )
  assertEquals( first(1,nil), 1   )
  assertEquals( first(nil,1), nil )
  assertEquals( first(1,2)  , 1   )
  assertEquals( first(1,2,3), 1   )
  assertEquals( first(f())  , 1   )
end

function TestGfunc:testSecond()
  local f=\ (1,2,3)
  assertEquals( second(1)    , nil )
  assertEquals( second(1,nil), nil )
  assertEquals( second(nil,1), 1   )
  assertEquals( second(1,2)  , 2   )
  assertEquals( second(1,2,3), 2   )
  assertEquals( second(f())  , 2   )
end

function TestGfunc:testThird()
  local f=\ (1,2,3)
  assertEquals( third(1)        , nil )
  assertEquals( third(1,2)      , nil )
  assertEquals( third(1,2,nil)  , nil )
  assertEquals( third(nil,nil,1), 1   )
  assertEquals( third(1,2,3)    , 3   )
  assertEquals( third(4,3,2,1)  , 2   )
  assertEquals( third(f())      , 3   )
end

function TestGfunc:testSwap()
  local f=\ (1,2,3)
  assertEquals( {swap(1)}    , {nil,1} )
  assertEquals( {swap(nil,1)}, {1}     )
  assertEquals( {swap(1,2)}  , {2,1} )
  assertEquals( {swap(1,2,3)}, {2,1} )
  assertEquals( {swap(f())}  , {2,1} )
end

function TestGfunc:testSwapv()
  local f=\ (1,2,3,4,5)
  assertEquals( {swapv(1)}    , {nil,1} )
  assertEquals( {swapv(nil,1)}, {1,nil} )
  assertEquals( {swapv(1,2)}  , {2,1} )
  assertEquals( {swapv(1,2,3)}, {2,1,3} )
  assertEquals( {swapv(3,1,2,4)}, {1,3,2,4} )
  assertEquals( {swapv(f())}  , {2,1,3,4,5} )
end

--[[
function TestGfunc:testRep()
  local msg = {
    "invalid argument #2 (size or nil expected)",
  }

  assertEquals( #rep(9), 2^31 )
  assertEquals(  rep(9)[1], 9 )
  assertEquals(  rep(9)[1e9], 9 )
  assertEquals(  rep(9)[-1], 9 )
  assertEquals(  rep(9)[nil], 9 )

  assertErrorMsgContains(msg[1], rep, 9, -1)
  assertEquals( rep(9,0), {} )
  assertEquals( rep(9,1), {9} )
  assertEquals( rep(9,2), {9,9} )
  assertEquals( rep(9,3), {9,9,9} )

  assertEquals( #rep(9,0), 0 )
  assertEquals( #rep(9,3), 3 )
  assertEquals( #rep(9,500), 500 )
  assertEquals( #rep(9,1e9), 1e9 )

  assertEquals( rep(9,  1)[ 1] , 9 )
  assertEquals( rep(9,500)[500], 9 )
  assertNil   ( rep(9,1e9)[-1] )
  assertNil   ( rep(9,1e9)[ 0] )
  assertEquals( rep(9,1e9)[ 1] , 9 )
  assertEquals( rep(9,1e9)[1e9], 9 )
  assertNil   ( rep(9,1e9)[1e9+1]  )

  for _,v in ipairs(rep(3,10)) do assertEquals( v, 3 ) end
  for _,v in  pairs(rep(3,10)) do assertEquals( v, 3 ) end

  local a
  a=rep(3)    for i=1,10 do assertEquals( a[i], 3 ) end
  a=rep(3,10) for i=1,#a do assertEquals( a[i], 3 ) end
end
]]

function TestGfunc:testCompose()
  local id, id1, id4 = \n,...(n+1,...), \...(1,...), \n n
  local f = compose(id4,compose(id,compose(id,compose(id,id1))))
  assertEquals ( f(0  ), 4 )
  assertEquals ( f(1  ), 4 )
  assertEquals ( f(nan), 4 )
  assertEquals ( f(nil), 4 )
end

function TestGfunc:testChain()
  local tbl = {}
  local f  = \n => tbl[1] = n return 1 end
  local g =  \n => if n < 4 then tbl[2] = tbl[1]*3 return 1 else return nil end end 
  local functor = chain(f, g)
  assertEquals( functor(1), 1)
  assertEquals(tbl, {1, 3}) --Does f then g
  assertEquals( functor(3), 1)
  assertEquals(tbl, {3, 9}) --Does f then g
  assertNil   ( functor(4)    ) --returns g
  assertEquals(tbl, {4, 9}) --Does f and g, even if g is nil
  functor = chain(g, f)
  assertEquals( functor(1), 1)
  assertEquals(tbl, {1, 12}) --Does g then f
  assertEquals( functor(4), 1)  --returns f
  assertEquals(tbl, {4, 12}) --Does g then f
end

function TestGfunc:testAchain()
  local tbl = {}
  local f  = \n => tbl[1] = n return 1 end
  local g =  \n => if n < 4 then tbl[2] = tbl[1]*3 return 1 else return nil end end 
  local functor = achain(f, g)
  assertEquals( functor(1), 1)
  assertEquals(tbl, {1, 3}) --Does f then g
  assertEquals( functor(3), 1)
  assertEquals(tbl, {3, 9}) --Does f then g
  assertNil   ( functor(4)    )
  assertEquals(tbl, {4, 9}) --Does f and g, even if g is nil
  functor = achain(g, f)
  assertEquals( functor(1), 1)
  assertEquals(tbl, {1, 12}) --Does g then f
  assertNil   ( functor(4)    ) 
  assertEquals(tbl, {1, 12}) --Does not do f if g nil
end

function TestGfunc:testOchain() --for ochain(f, g) return f(...), unless nil, then return g(...)
  local tbl = {}
  local f  = \n => tbl[1] = n return 1 end
  local g =  \n => if n < 4 then tbl[2] = tbl[1]*3 return 1 else return nil end end 
  local functor = ochain(f, g)
  assertEquals( functor(1), 1)
  assertEquals(tbl, {1}) --Does f not g
  assertEquals( functor(3), 1)
  assertEquals(tbl, {3}) --Does f not g
  functor = ochain(g, f)
  assertEquals( functor(1), 1)
  assertEquals(tbl, {3, 9}) --Does g not f
  assertEquals( functor(4), 1) 
  assertEquals(tbl, {4, 9}) --Does f if g nil
end

function TestGfunc:testComposeBottom()
  local id, id1, id4, _ = \n,...(n+1,...), \...(1,...), \n n, bottom
  local f = id4^id^id^id^id1^_
  assertEquals ( f(0  ), 4 )
  assertEquals ( f(1  ), 4 )
  assertEquals ( f(nan), 4 )
  assertEquals ( f(nil), 4 )
end

function TestGfunc:testBind1st()
  local f=\a,b,c -> a * b + c - b
  local functor = bind1st(f,2)
  assertEquals( functor(3, 4, 4), 7  )
  assertEquals( functor(2, 9, 5), 11 )
  functor = bind1st(f, 6)
  assertEquals( functor(2, 3, 8), 13 )
  assertEquals( functor(1, 1, 4), 6  )
end

function TestGfunc:testBind2nd()
  local f=\a,b,c -> a * b + c - b
  local functor = bind2nd(f,2)
  assertEquals( functor(3, 4, 7), 8  )
  assertEquals( functor(2, 9, 7), 11 )
  functor = bind2nd(f, 6)
  assertEquals( functor(2, 3, 4), 9  )
  assertEquals( functor(1, 1, 1), 1  )
end


function TestGfunc:testBind3rd()
  local f=\a,b,c -> a * b + c - b
  local functor = bind3rd(f,2)
  assertEquals( functor(3, 4, 4), 10  )
  assertEquals( functor(2, 9, 1), 11 )
  functor = bind3rd(f, 6)
  assertEquals( functor(2, 3, 1), 9  )
  assertEquals( functor(1, 1, 1), 6  )
end

function TestGfunc:testBind2st()
  local f=\a,b,c -> a * b + c - b
  local functor = bind2st(f,2,3)
  assertEquals( functor(10, 6, 1), 13 )
  assertEquals( functor(5, 6, 1) , 8  )
  functor = bind2st(f, 4, 9)
  assertEquals( functor(8, 5, 3) , 35 )
  assertEquals( functor(2, 5, 8) , 29 )
end

function TestGfunc:testBind3st()
  local f=\a,b,c -> a * b + c - b
  local functor = bind3st(f,1,5,10)
  assertEquals( functor(9, 3, 10), 10 )
  assertEquals( functor(1, 10, 8), 10 )
  functor = bind3st(f, 3, 1, 7)
  assertEquals( functor(7, 8, 9) , 9 )
  assertEquals( functor(4, 1, 1) , 9 )
end

-- performance test suite -----------------------------------------------------o

Test_Gfunc = {}

function Test_Gfunc:testCompose()
  local f, g, h, _ = \x,y (x+y,x-y), \x,y x*y, \x,y x^2-y^2, bottom
  local gf = g^f^_
  local p  = \x,y gf(x,y) == h(x,y)
  local t0 = os.clock()
  for i=1,94906266 do assert(p(i-1,i), i) end
  local dt = os.clock() - t0
  assertAlmostEquals( dt , 0.5, 1 )
  assertTrue ( p(94906266-1, 94906266  ) )
  assertFalse( p(94906266  , 94906266+1) )
end

-- end ------------------------------------------------------------------------o
