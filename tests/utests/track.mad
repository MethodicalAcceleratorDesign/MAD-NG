--[=[
 o-----------------------------------------------------------------------------o
 |
 | Track tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: I. Tecker, irina.tecker at cern.ch
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the track module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNil, assertNotNil, assertTrue, assertEquals, assertAllAlmostEquals in MAD.utest
local functor in MAD.gfunc
local printf in MAD.utility
local track, beam, option in MAD

-- regression test suite ------------------------------------------------------o

TestTrack = {}

local function pinfo (e,m,l,s)
  printf("%s:%s: %.8g, %.8g, %.8g, %.8g, %.8g\n",
   e and e.name or 'drift', s, l, m.x, m.px, m.y, m.py)
end

local function loadFiveCell()
  assertNotNil(require 'fivecell_gen'     )
  assertNotNil(require 'fivecell_set'     ) -- side effect from LHC...
  assertNotNil(require 'fivecell_undefvar')
  local fivecell in MADX
  assertEquals(#fivecell, 79)
  assertEquals(fivecell.mb[1].kind, 'sbend')
  return fivecell
end

local function loadLHC()
  assertNotNil(require 'lhc_as-built_gen')
  assertNotNil(require 'lhc_as-built_set')
  assertNotNil(require 'lhc_undefvar'    )
  assertNotNil(require 'opt_inj_gen'     )

  local lhcb1, lhcb2 in MADX
  assertEquals(#lhcb1, 6675)
  assertEquals(#lhcb2, 6674)
  return lhcb1, lhcb2
end

function TestTrack:setUp ()
  self.fmt = option.format
  option.format = "%-18.10g" -- MAD-X default output
end

function TestTrack:tearDown ()
  option.format = self.fmt
  if MADX:is_open_env() == true then
    MADX:reset_env()
  end
end

function TestTrack:testTrackLHC1()
  local lhcb1, lhcb2 = loadLHC()
  local beam = beam { particle='proton', energy=450 }
  lhcb1:deselect()[#lhcb1]:select()
  local tbl, map = track { sequence=lhcb1, beam=beam } --, out_action=functor(pinfo) } --, save='none' }
--  assertEquals(#tbl, 13267)
--  local t0 = os.clock()
--  for i=1,9 do track { sequence=lhcb1, beam=beam, table=tbl } end
--  local t1 = os.clock()
  tbl:write('track_lhcb1') -- , {'name', 's', 'l', 'x', 'px', 'y', 'py', 't', 'pt'})
-- 10 turns with save = 'none' takes 1.52 sec -> 0.15 sec/turn
--  print('LHC track time', t1-t0)
  option.format = fmt
 end

function TestTrack:testTrackQUADY2()
 local quadrupole, sequence in MAD.element
 local beam in MAD
 local fmt = MAD.option.format
 MAD.option.format = "%-18.12g" -- MAD-X default output
 local beam = beam { particle='proton', energy=450 }
 local seq = sequence 'seq' { refer = 'entry',
   quadrupole 'qf' { l=3, k1 := kqf }
 }
 for k=-10,10, 1 do
   kqf = k*0.1
   local tbl = track { sequence=seq, beam=beam, method='simple', nst=5, X0= {-1e-3, 2e-4 ,3e-3, 0,0, 5e-3}}
--   local n = #tbl
--   for i=1,n do
--     print('\n MADNG_QUAD', tbl.s[i], kqf,tbl.x[i],tbl.px[i],tbl.y[i],tbl.py[i],tbl.t[i],tbl.pt[i])
--   end
 end
 option.format = fmt
end

function TestTrack:testTrackQUADY6()
 local quadrupole, sequence in MAD.element
 local beam in MAD
 local fmt = MAD.option.format
 MAD.option.format = "%-18.12g" -- MAD-X default output
 local beam = beam { particle='proton', energy=450 }
 local seq = sequence 'seq' { refer = 'entry',
   quadrupole 'qf' { l=3, k1 := kqf }
 }
 for k=-10,10, 1 do
   kqf = k*0.1
   local tbl = track { sequence=seq, beam=beam, method='yoshida6', nst=3, X0= {-1e-3, 2e-4 ,3e-3, 0,-1e-3, 5e-3}}
--   local n = #tbl
--   for i=1,n do
--     print('\n MADNG_QUAD', tbl.s[i], kqf,tbl.x[i],tbl.px[i],tbl.y[i],tbl.py[i],tbl.t[i],tbl.pt[i])
--   end
 end
 option.format = fmt
end

function TestTrack:testTrackSEXT()

 local sextupole, sequence in MAD.element
 local beam in MAD
 local fmt = MAD.option.format
 MAD.option.format = "%-18.12g" -- MAD-X default output
 local beam = beam { particle='proton', energy=450 }
 local seq = sequence 'seq' { refer = 'entry',
   sextupole 'sf' { l=3, k2 := ksf }
 }
 for k=-1,1,0.1 do
   ksf = k
   local tbl = track { sequence=seq, beam=beam, method='yoshida4', nst=100, X0= {-1e-3, 2e-4 ,3e-3, 7e-8,0, 5e-3}}
--   local n = #tbl
--   for i=1,n do
--     print('\n MADNG_SEXT', tbl.s[i], ksf,tbl.x[i],tbl.px[i],tbl.y[i],tbl.py[i],tbl.t[i],tbl.pt[i])
--   end
 end
 option.format = fmt
end

function TestTrack:testTrackSBEND()

 local sbend, sequence  in MAD.element
 local abs, beam in MAD
 local fmt = MAD.option.format
 MAD.option.format = "%-18.12g"
 local beam = beam { particle='proton', energy=450 }
 local ksb
 local seq = sequence 'seq' { refer = 'entry',
   sbend 'sb' { l=3, angle := ksb, k0 := ksb/3 }
 }
 for k=-1,1,0.15 do
    ksb = k
    local tbl = track { sequence=seq, beam=beam, method='yoshida6', nst=5, X0= {-1e-3, 3e-3,7e-5,-3e-4, 0, 0}}
--    local n = #tbl
--    for i=1,n do
--    print('\n MADNG_SBEND', tbl.s[i], ksb,tbl.x[i],tbl.px[i],tbl.y[i],tbl.py[i],tbl.t[i],tbl.pt[i])
--    end
 end
 option.format = fmt
end

function TestTrack:testTrackMULT1()

  local multipole, sequence  in MAD.element
  local beam in MAD
  local fmt = MAD.option.format
  MAD.option.format = "%-18.12g" -- MAD-X default output
  local beam = beam { particle='proton', energy=450 }

  local seq = sequence 'seq' {l=1, refer = 'entry',
     multipole 'mlt' { knl = { 0.01,0.02,0.03, 0.04},  ksl= {-0.01, 0.05}, dknl={0, 0.03}, dksl={0, -3e-6}, lrad=1 }
  }

  local tbl = track { sequence=seq, beam=beam, method='simple', nst=1, X0= {1e-3, -5e-3, 1e-3, 4e-6, 0, 0}}

  actual   = { tbl.x[#tbl], tbl.px [#tbl]   , tbl.y[#tbl], tbl.py[#tbl]    , tbl.t[#tbl]     , tbl.pt[#tbl]}
  expected = { 0.001       , -0.00500010298667, 0.001       , 0.000103927013333, 2.00000434744e-05, 0      }
  margin   = { 1e-14       , 1e-14            , 1e-14       , 1e-14            , 1e-14            , 1e-14  }
  assertAllAlmostEquals (actual, expected, margin)

 option.format = fmt
end

function TestTrack:testTrackMULT2()

  local multipole, sequence  in MAD.element
  local beam in MAD
  local fmt = MAD.option.format
  MAD.option.format = "%-18.12g" -- MAD-X default output
 local beam = beam { particle='proton', energy=450 }

 local seq = sequence 'seq' {l=1, refer = 'entry',
     multipole 'qfm' { knl = { 0.05, knl1, 0.07, 0.09},  ksl= {0.01, -0.03, ksl2} }
 }
 for k=-1, 1, 0.1 do
   knl1 = k
   ksl2 = k*0.1
   local tbl = track { sequence=seq, beam=beam, method='yoshida6', nst=5, X0= {-1e-3, 3e-3,7e-5,-3e-4, -1e-3, 0}}
--   local n = #tbl
--     for i=1,n do
--     print('\n MADNG_MULT', tbl.s[i], knl1,tbl.x[i],tbl.px[i],tbl.y[i],tbl.py[i],tbl.t[i],tbl.pt[i])
--   end
 end
 option.format = fmt
end

function TestTrack:testTrackSOLD()

  local solenoid, sequence  in MAD.element
  local beam in MAD
  local fmt = MAD.option.format
  MAD.option.format = "%-18.12g" -- MAD-X default output
  local beam = beam { particle='proton', energy=450 }

 local seq = sequence 'seq' {l=3, refer = 'entry',
       solenoid 'SL'  {l=3, ks := msol }
 }
 for k=-1, 1, 0.1 do
   msol = k*0.01
   local tbl = track { sequence=seq, beam=beam, method='yoshida6', nst=7, X0= {-1e-3, 2e-4, 3e-3, 0, 0, 1e-6}}
--   local n = #tbl
--   for i=1,n do
--     print('\n MADNG_SOLD', tbl.s[i], msol ,tbl.x[i],tbl.px[i],tbl.y[i],tbl.py[i],tbl.t[i],tbl.pt[i])
--   end
 end
 option.format = fmt
end

function TestTrack:testTrackHKICK()

  local lhcb1, lhcb2 = loadLHC()
  local hkicker, sequence  in MAD.element
  local beam in MAD
  local fmt = MAD.option.format
  MAD.option.format = "%-18.12g" -- MAD-X default output
  local beam = beam { particle='proton', energy=450 }
  local seq = sequence 'seq' {l=3, refer = 'entry',
     hkicker 'hk' { l=3, kick :=kk }
 }
  for k=-1, 1, 0.1 do
   kk = k*0.03
   local tbl = track { sequence=seq, beam=beam, method='yoshida6', nst=6, X0= {-1e-3, 2e-4, 3e-3, 0, 0, 1e-6}}
--   local n = #tbl
--     for i=1,n do
--     print('\n MADNG_HKICK', tbl.s[i], kk,tbl.x[i],tbl.px[i],tbl.y[i],tbl.py[i],tbl.t[i],tbl.pt[i])
--   end
  end
 option.format = fmt
end

function TestTrack:testTrackMKICK()

  local lhcb1, lhcb2 = loadLHC()
  local hkicker, sequence  in MAD.element
  local beam in MAD
  local fmt = MAD.option.format
  MAD.option.format = "%-18.12g" -- MAD-X default output
  local beam = beam { particle='proton', energy=450 }
  local seq = sequence 'seq' {l=1, refer = 'entry',
     hkicker 'hk' { kick :=kk }
  }
  for k=-1, 1, 0.1 do
    kk = k*0.5
    local tbl = track { sequence=seq, beam=beam, method='simple', nst=1, X0= {-1e-3, 0, 3e-3, 0, 0, 5e-3}}
--    local n = #tbl
--     for i=1,n do
--      print('\n MADNG_MHKICK', tbl.s[i], kk,tbl.x[i],tbl.px[i],tbl.y[i],tbl.py[i],tbl.t[i],tbl.pt[i])
--    end
  end
  option.format = fmt
end

-- function TestTrack:testTrackFiveCell()
--   local fivecell = loadFiveCell()
--   local beam = beam { particle='proton', energy=450 }
--   local tbl = track { sequence=fivecell, beam=beam }
--   assertEquals(#tbl, 141)
--   tbl:write('track_fivecell') -- , {'name', 's', 'l', 'x', 'px', 'y', 'py', 't', 'pt'})
-- end

-- end ------------------------------------------------------------------------o
