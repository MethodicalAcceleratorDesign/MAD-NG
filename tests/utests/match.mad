--[=[
 o-----------------------------------------------------------------------------o
 |
 | Match tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the match module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNotNil, assertEquals, assertAlmostEquals, assertAllAlmostEquals,
      assertTrue, assertStrContains, assertErrorMsgContains      in MAD.utest

local beam, sequence, twiss, match, plot, vector,
      option, filesys, atexit                                    in MAD
local ftrue                                                      in MAD.gfunc
local marker, drift, sbend, quadrupole, multipole                in MAD.element
local eps, inf, pi                                               in MAD.constant
local abs, sqrt, exp, sin, cos, randtn, randseed                 in MAD.gmath
local printf                                                     in MAD.utility

local refdir = \s -> 'match_ref/'..(s or '')
local rundir = \s -> 'match_run/'..(s or '')

-- helpers --------------------------------------------------------------------o

local doplot != true

if doplot then
  local pause, atexit in MAD.utility
  atexit(pause, true)
end

-- Tests ----------------------------------------------------------------------o

TestMatch = {}

function TestMatch:setUp ()
  filesys.mkdir(rundir())
  self.optfmt = option.numfmt
  self.optdbg = option.debug
  option.numfmt = "%-.10g"
  option.debug = 1
end

function TestMatch:tearDown ()
  option.numfmt = self.optfmt
  option.debug  = self.optdbg
end

-- FODO matching --------------------------------------------------------------o

function TestMatch:testMatchThinFODO ()
  local knobs = { k1qf =  0.2828427125,   --  0.3037241107,
                  k1qd = -0.2828427125, } -- -0.3037241107, }

  local function thinFODO () -- TODO: simplify the fodo
    local seq
    local nsl = 1 -- 10 -- for madx row by row compatibility
    local nth = 10
    local dl  = 1/nth
    local mk1 = marker    'mk1' {}
    local mk2 = marker    'mk2' {}
    local df1 = drift     'df1' { l=4, nslice=nsl }
    local df2 = drift     'df2' { l=4, nslice=nsl }
    local mq1 = multipole 'mq1' { knl := {0, knobs.k1qf/nth} }
    local mq2 = multipole 'mq2' { knl := {0, knobs.k1qd/nth} }

    seq = sequence 'seq' { l=10, refer='entry', -- dir=-1,
                  mq1 {at=0+dl/2              },
        (nth/2-1)*mq1 {at=dl    , from='prev' },
                  mk1 {at=0+dl/2, from='prev' },
                  mq1 {at=0+dl/2, from='prev' },
        (nth/2-1)*mq1 {at=dl    , from='prev' },
  --                df1 {at=1}, -- for madx row by row compatibility

                  mq2 {at=5+dl/2              },
        (nth/2-1)*mq2 {at=dl    , from='prev' },
                  mk2 {at=0+dl/2, from='prev' },
                  mq2 {at=0+dl/2, from='prev' },
        (nth/2-1)*mq2 {at=dl    , from='prev' },
  --                df2 {at=6}, -- for madx row by row compatibility
    }
    seq.beam  = beam

    return seq
  end

  local fodo = thinFODO()

  -- match test
  local status, fmin, ncall = match {
    command := twiss { sequence=fodo, observe=1 },
    variables = {
      { var = 'knobs.k1qf', min= 0.2, max= 0.4 },
      { var = 'knobs.k1qd', min=-0.4, max=-0.2 },
    },
    equalities = {
      { kind = 'mu1', expr = \t -> t.mu1[#t]-0.25 },
      { kind = 'mu2', expr = \t -> t.mu2[#t]-0.25 },
    },
    objective = { fmin = 1e-8 },
    maxcall=50, !info=2, !debug=2
  }

--  print('status=', status, 'fmin=', fmin, 'ncall=', ncall)
--  print('k1_qf=', knobs.k1qf, 'k1_qd=', knobs.k1qd)

  assertEquals      (status    ,  'FMIN')
  assertEquals      (ncall     ,  10    )
  assertAlmostEquals(fmin      ,  7.8313796403e-13, 1e-16)
  assertAlmostEquals(knobs.k1qf,  0.30372411066520, 1e-12)
  assertAlmostEquals(knobs.k1qd, -0.30372411066521, 1e-12)
end

function TestMatch:testMatchFODO ()
  -- classes
  local mb = sbend { l=2, angle=2*pi/50 }
  local mq = quadrupole { l=1 }
  local var = { k1f=0.28, k1d=-0.28 }

  -- sequence
  local seq = sequence 'seq' {
    l=10, refer='entry', beam=beam,
    mq 'mq1' { at=0, k1 := var.k1f },
    mb 'mb1' { at=2, k0 =\s s.angle/s.l },
    mq 'mq2' { at=5, k1 := var.k1d },
    mb 'mb2' { at=7, k0 =\s s.angle/s.l },
  }

  -- twiss
  if doplot then
    local mtbl = twiss {sequence=seq, nslice=10, save='atbody'}
    plot { table=mtbl, sequence=seq, fontsize=18, styles='lines',
           x1y1 = { s={'beta11','beta22'} },
           x1y2 = { s={'mu1'   ,'mu2'   } } }
  end

  -- match phase advance
  local status, fmin, ncall = match {
    command := twiss { sequence=seq, observe=1 },
    variables = {
      { var = 'var.k1f', min= 0.2, max= 0.4 },
      { var = 'var.k1d', min=-0.4, max=-0.2 },
    },
    equalities = {
      { expr = \t -> assert(t).mu1[#t]-0.25 },
      { expr = \t -> assert(t).mu2[#t]-0.25 },
    },
    objective = { fmin = 1e-8 },
    maxcall=100, !info=2, !debug=2
  }

!  printf("var.k1f = % -.16e\n", var.k1f)
!  printf("var.k1d = % -.16e\n", var.k1d)

  -- check results
  assertEquals      (status ,  'FMIN')
  assertEquals      (ncall  ,  10    )
  assertAlmostEquals(fmin   ,  3.3094182479e-13, 1e-16)
  assertAlmostEquals(var.k1f,  0.29599989525034, 1e-12)
  assertAlmostEquals(var.k1d, -0.30241971341642, 1e-12)

  if doplot then
    -- plot betas and phases
    local mtbl = twiss {sequence=seq, nslice=10, save='atbody'}
    plot { table=mtbl, sequence=seq, fontsize=18, styles='lines',
           x1y1 = { s={'beta11','beta22'} },
           x1y2 = { s={'mu1'   ,'mu2'   } } }
  end
end

function TestMatch:testMatchFODOLocVar ()
  -- classes
  local mb = sbend { l=2, angle=2*pi/50 }
  local mq = quadrupole { l=1 }
  local k1f= 0.28
  local k1d=-0.28

  -- sequence
  local seq = sequence 'seq' {
    l=10, refer='entry', beam=beam,
    mq 'mq1' { at=0, k1 := k1f },
    mb 'mb1' { at=2, k0 =\s s.angle/s.l },
    mq 'mq2' { at=5, k1 := k1d },
    mb 'mb2' { at=7, k0 =\s s.angle/s.l },
  }

  -- twiss
  if doplot then
    local mtbl = twiss {sequence=seq, nslice=10, save='atbody'}
    plot { table=mtbl, sequence=seq, fontsize=18, styles='lines',
           x1y1 = { s={'beta11','beta22'} },
           x1y2 = { s={'mu1'   ,'mu2'   } } }
  end

  -- match phase advance
  local status, fmin, ncall = match {
    command := twiss { sequence=seq, observe=1 },
    variables = { !nowarn=true,
      { var = 'k1f', min= 0.2, max= 0.4 },
      { var = 'k1d', min=-0.4, max=-0.2 },
      get = \x => x[1], x[2] = k1f, k1d end, -- explicit get/set avoid
      set = \x => k1f, k1d = x[1], x[2] end, -- to flush the JIT...
    },
    equalities = {
      { expr = \t -> assert(t).mu1[#t]-0.25 },
      { expr = \t -> assert(t).mu2[#t]-0.25 },
    },
    objective = { fmin = 1e-8 },
    maxcall=50, !info=2, !debug=2
  }

  -- check results
  assertEquals      (status,  'FMIN')
  assertEquals      (ncall ,  10    )
  assertAlmostEquals(fmin  ,  3.3094182479e-13, 1e-16)
  assertAlmostEquals(k1f   ,  0.29599989525034, 1e-12)
  assertAlmostEquals(k1d   , -0.30241971341642, 1e-12)


  if doplot then
    -- plot betas and phases
    local mtbl = twiss {sequence=seq, nslice=10, save='atbody'}
    plot { table=mtbl, sequence=seq, fontsize=18, styles='lines',
           x1y1 = { s={'beta11','beta22'} },
           x1y2 = { s={'mu1'   ,'mu2'   } } }
    plot { table=mtbl, sequence=seq, fontsize=18, !styles='lines',
           x1y1 = { s={'beta11','beta22'} },
           x1y2 = { s={'mu1'   ,'mu2'   } } }
  end
end

function TestMatch:testMatchFODONoVar ()
  -- classes
  local mb = sbend { l=2, angle=2*pi/50 }
  local mq = quadrupole { l=1 }

  -- sequence
  local seq = sequence 'seq' {
    l=10, refer='entry', beam=beam,
    mq 'mq1' { at=0, k1 = 0.28 },
    mb 'mb1' { at=2, k0 =\s s.angle/s.l },
    mq 'mq2' { at=5, k1 = -0.28 },
    mb 'mb2' { at=7, k0 =\s s.angle/s.l },
  }

  -- twiss
  if doplot then
    local mtbl = twiss {sequence=seq, nslice=10, save='atbody'}
    plot { table=mtbl, sequence=seq, fontsize=18, styles='lines',
           x1y1 = { s={'beta11','beta22'} },
           x1y2 = { s={'mu1'   ,'mu2'   } } }
  end

  -- match phase advance
  local status, fmin, ncall = match {
    command := twiss { sequence=seq, observe=1 },
    variables = {
      { var = 'seq.mq1.k1', min= 0.2, max= 0.4 },
      { var = 'seq.mq2.k1', min=-0.4, max=-0.2 },
    },
    equalities = {
      { expr = \t -> t['$end'].mu1-0.25 },
      { expr = \t -> t['$end'].mu2-0.25 },
    },
    objective = { fmin = 1e-8 },
    maxcall=50, !info=2, !debug=2
  }

  -- check results
  assertEquals      (status    ,  'FMIN')
  assertEquals      (ncall     ,  10    )
  assertAlmostEquals(fmin      ,  3.3094182479e-13, 1e-16)
  assertAlmostEquals(seq.mq1.k1,  0.29599989525034, 1e-12)
  assertAlmostEquals(seq.mq2.k1, -0.30241971341642, 1e-12)

  if doplot then
    -- plot betas and phases
    local mtbl = twiss {sequence=seq, nslice=10, save='atbody'}
    plot { table=mtbl, sequence=seq, fontsize=18, styles='lines',
           x1y1 = { s={'beta11','beta22'} },
           x1y2 = { s={'mu1'   ,'mu2'   } } }
    plot { table=mtbl, sequence=seq, fontsize=18, !styles='lines',
           x1y1 = { s={'beta11','beta22'} },
           x1y2 = { s={'mu1'   ,'mu2'   } } }
  end
end

-- FODO matching --------------------------------------------------------------o

local function testMatchFODO (var, mth)
  -- classes
  local mb = sbend { l=2, angle=2*pi/50 }
  local mq = quadrupole { l=1 }

  -- sequence
  local seq = sequence 'seq' {
    l=10, refer='entry', beam=beam,
    mq 'mq1' { at=0, k1 := var.k1f },
    mb 'mb1' { at=2, k0 =\s s.angle/s.l },
    mq 'mq2' { at=5, k1 := var.k1d },
    mb 'mb2' { at=7, k0 =\s s.angle/s.l },
  }

  -- match phase advance
  return match {
    command := twiss { sequence=seq, observe=1 },
    variables = {
      { var = 'var.k1f', min= 0.2, max= 0.4 },
      { var = 'var.k1d', min=-0.4, max=-0.2 },
    },
    equalities = {
      { expr = \t -> assert(t).mu1[#t]-0.25 },
      { expr = \t -> assert(t).mu2[#t]-0.25 },
    },
    objective = { method=mth, fmin=1e-8 },
    maxcall=100, !info=5, debug=2
  }
end

function TestMatch:testMatchFODOJAC ()
  local var = { k1f=0.28, k1d=-0.28 }
  local status, fmin, ncall = testMatchFODO(var, 'LD_JACOBIAN')
  !print(status, fmin, ncall)
  assertEquals      (status ,  'FMIN')
  assertEquals      (ncall  ,  10    ) -- 4 iterations
  assertAlmostEquals(fmin   ,  3.3094182479e-13, 1e-16)
  assertAlmostEquals(var.k1f,  0.29599989525067, 1e-12)
  assertAlmostEquals(var.k1d, -0.30241971341675, 1e-12)
end

function TestMatch:testMatchFODOLMD ()
  local var = { k1f=0.28, k1d=-0.28 }
  local status, fmin, ncall = testMatchFODO(var, 'LD_LMDIF')
  !print(status, fmin, ncall)
  assertEquals      (status ,  'FMIN')
  assertEquals      (ncall  ,  10    ) -- 4 iterations
  assertAlmostEquals(fmin   ,  2.3459915619e-10, 1e-16)
  assertAlmostEquals(var.k1f,  0.29599989548381, 1e-12)
  assertAlmostEquals(var.k1d, -0.30241971364244, 1e-12)
end

-- Fitting data ---------------------------------------------------------------o

local function fitdat (mthd, noise)
  local n, k, a, f1, f2 = 1000, pi/1000, 5, 3, 7
  local d = vector(n):seq():map\i -> a*sin(i*k*f1)*cos(i*k*f2)
  if noise then d=d:map \x -> x+randtn(noise) end

  local p, m = { a=1, f1=1, f2=1 }, vector(n)
  local status, fmin, ncall = match {
    command := m:seq():map\i -> p.a*sin(i*k*p.f1)*cos(i*k*p.f2),
    variables = {
      { var = 'p.a' , min=1, max=10 },
      { var = 'p.f1', min=1, max=10 },
      { var = 'p.f2', min=1, max=10 },
    },
    equalities = {{ expr = \m -> ((d-m):norm()) }},
    objective = { method=mthd, fmin=1e-9, bisec=noise and 5 },
    maxcall=3000, !info=1, !debug=2
  }

  if true then
    local x = vector(n):seq():map\i -> i*k
    local mth = { LD_JACOBIAN='jac', LD_LMDIF='lmd' }
    m:seq():map(\i -> p.a*sin(i*k*p.f1)*cos(i*k*p.f2),'in')
    plot {
      data={x=x,d=d,m=m,e=d-m}, x1y1={x={'d','m'}}, !x1y2={x={'e'}},
      title='Fitting d(x) = a*sin(x*f1)*cos(x*f2) via a, f1, f2',
      legend={d='data',m='model'}, linewidths=noise and {d=1,m=2} or {d=2,m=1},
      xlabel='x = i*{/Symbol p}/n  with  i = 0..n-1', ylabel='d(x), m(x)',
      xrange={0,pi}, yrange={-6,6}, !y2range={-1e-9, 1e-9},
      !y2label='e(x) = d(x) - m(x)',
      colors={d='royalblue', m='red', e='green'}, styles='lines', fontsize=14,
      output='match-fit'..mth[mthd]..(noise and 'noise' or '')..'.pdf'
    }
  end

  return status, fmin, ncall, p
end

function TestMatch:testMatchFitJAC ()
  local status, fmin, ncall, p = fitdat('LD_JACOBIAN')
  local fmt = "ncall=%d, fmin=%.16e, a=%.16e, f1=%.16e, f2=%.16e\n"
  !printf(fmt, ncall, fmin, p.a, p.f1, p.f2)
  assertEquals      (status, 'FMIN')                                  -- SUCCESS
  assertEquals      (ncall , 2574  )
  assertAlmostEquals(fmin  , 0, 1e-9)
  assertAlmostEquals(p.a   , 4.99999999994103, 1e-12)
  assertAlmostEquals(p.f1  , 3.00000000000120, 1e-12)
  assertAlmostEquals(p.f2  , 7.00000000000105, 1e-12)
end

function TestMatch:testMatchFitLMD ()
  local status, fmin, ncall, p = fitdat('LD_LMDIF')
  local fmt = "ncall=%d, fmin=%.16e, a=%.16e, f1=%.16e, f2=%.16e\n"
  !printf(fmt, ncall, fmin, p.a, p.f1, p.f2)
  assertEquals      (status, 'FMIN')                                  -- SUCCESS
  assertEquals      (ncall , 2539  )
  assertAlmostEquals(fmin  , 0, 1e-10)
  assertAlmostEquals(p.a   , 4.99999999999609, 1e-12)
  assertAlmostEquals(p.f1  , 2.99999999999993, 1e-12)
  assertAlmostEquals(p.f2  , 6.99999999999990, 1e-12)
end

function TestMatch:testMatchFitJACNoise ()
  local rng=randseed(12345678) -- reset seed
  local status, fmin, ncall, p = fitdat('LD_JACOBIAN', 2)
  local fmt = "ncall=%d, fmin=%.16e, a=%.16e, f1=%.16e, f2=%.16e\n"
  !printf(fmt, ncall, fmin, p.a, p.f1, p.f2)
  assertEquals      (status, 'XTOL')                                  -- SUCCESS
  assertEquals      (ncall , 704)
  assertAlmostEquals(fmin  , 26.9086, 1e-4)
  assertAlmostEquals(p.a   , 4.98470, 1e-5)
  assertAlmostEquals(p.f1  , 3.00369, 1e-5)
  assertAlmostEquals(p.f2  , 6.99932, 1e-5)
end

function TestMatch:testMatchFitLMDNoise ()
  local rng=randseed(12345678) -- reset seed
  local status, fmin, ncall, p = fitdat('LD_LMDIF', 2)
  local fmt = "ncall=%d, fmin=%.16e, a=%.16e, f1=%.16e, f2=%.16e\n"
  !printf(fmt, ncall, fmin, p.a, p.f1, p.f2)
  assertEquals      (status, 'XTOL')                                  -- SUCCESS
  assertEquals      (ncall , 404)
  assertAlmostEquals(fmin  , 26.9003, 1e-4)
  assertAlmostEquals(p.a   , 5.04532, 1e-5)
  assertAlmostEquals(p.f1  , 3.00129, 1e-5)
  assertAlmostEquals(p.f2  , 7.00007, 1e-5)
end

local function fitdat2 (mthd)
  local x = vector{0.038, 0.194, 0.425, 0.626 , 1.253 , 2.500 , 3.740 }
  local y = vector{0.050, 0.127, 0.094, 0.2122, 0.2729, 0.2665, 0.3317}
  local p = { v=0.9, k=0.2 }
  local n = #x

  local function eqfun (_, r, jac)
    assert(jac, "unexpected missing Jacobian")
    local v, k in p
    for i=1,n do
      r  [  i  ] = y[i] - v*x[i]/(k+x[i])
      jac[2*i-1] =         -x[i]/(k+x[i])
      jac[2*i  ] =        v*x[i]/(k+x[i])^2
    end
  end

  local status, fmin, ncall = match {
    variables = { tol=5e-3,
      { var = 'p.v', min=0.1, max=2 },
      { var = 'p.k', min=0.1, max=2 },
    },
    equalities = { nequ=n, exec=eqfun, disp=false },
    objective  = { method=mthd },
    maxcall=20, !info=4, !debug=2
  }

  if true then
    local mth = { LD_JACOBIAN='jac', LD_LMDIF='lmd' }
    local m = x:map\x -> p.v*x/(p.k+x)
    plot {
      data={x=x,y=y,m=m}, x1y1={x={'y','m'}},
      title='Fitting y(x) = v*x/(k+x) via v, k',
      legend={y='data',m='model'},
      xlabel='x', ylabel='y(x), m(x)',
      xrange={0,4}, yrange={0,0.35},
      datastyles = {
        y = {style="points", color="royalblue", pointsize=1, pointtype=13     },
        m = {style="lines" , color="red"      , linewidth=2, smooth="csplines"}
      },
      output='match-fit2'..mth[mthd]..'.pdf'
    }
  end

  return status, fmin, ncall, p
end

function TestMatch:testMatchFit2JAC ()
  local status, fmin, ncall, p = fitdat2('LD_JACOBIAN')
  !printf("ncall=%d, fmin=%.16e, v=%.16e, k=%.16e\n", ncall, fmin, p.v, p.k)
  assertEquals      (status, 'XTOL')                                  -- SUCCESS
  assertEquals      (ncall , 6     )
  assertAlmostEquals(fmin  , 3.3475e-2, 1e-6)
  assertAlmostEquals(p.v   , 0.362    , 1e-3)
  assertAlmostEquals(p.k   , 0.556    , 1e-3)
end

function TestMatch:testMatchFit2LMD ()
  local status, fmin, ncall, p = fitdat2('LD_LMDIF')
  !printf("ncall=%d, fmin=%.16e, v=%.16e, k=%.16e\n", ncall, fmin, p.v, p.k)
  assertEquals      (status, 'XTOL')                                  -- SUCCESS
  assertEquals      (ncall , 6     )
  assertAlmostEquals(fmin  , 3.3475e-2, 1e-6)
  assertAlmostEquals(p.v   , 0.362    , 1e-3)
  assertAlmostEquals(p.k   , 0.556    , 1e-3)
end

-- Function matching ----------------------------------------------------------o

-- Example from NLOpt tutorial

local function testFuncFn (x, fgrd)
  if fgrd then fgrd:fill{0; 0.5/sqrt(x[2])} end
  return sqrt(x[2])
end

local function testFuncLe (x, c, cjac)
  c:fill{8*x[1]^3-x[2]; (1-x[1])^3-x[2]}
  if cjac then
    cjac:fill{24*x[1]^2, -1; -3*(1-x[1])^2, -1}
  end
end

local function testMatchFunc1 (x, mth) --, fref)
  return match {
    variables = { rtol=1e-4,
      { var = 'x[1]', min = -inf },
      { var = 'x[2]', min =  0   },
    },
    inequalities = { exec=testFuncLe, nequ=2 },
    objective    = { exec=testFuncFn, method=mth },
    maxcall=100, !info=4, debug=2
  }
end

local function testMatchFunc2 (x, mth, fmin)
  return match {
    variables = {
      { var = 'x[1]', min = -inf },
      { var = 'x[2]', min =  0   },
    },
    inequalities = { exec=testFuncLe, nequ=2 },
    objective    = { exec=testFuncFn, method=mth, fmin=sqrt(8/27), tol=1e-3 },
    maxcall=100, !info=4, debug=2
  }
end

-- Example from Octave tutorial
-- Note: Octave succeeds to find a solution but reports roundoff error...

local function testMatchFunc3 (x, mth)
  return match {
    variables = { min=-2, max=2,
      { var = 'x[1]' },
      { var = 'x[2]' },
      { var = 'x[3]' },
      { var = 'x[4]' },
      { var = 'x[5]' },
    },
    equalities = {
      { expr := x:sumsqr() - 10         },
      { expr := x[2]*x[3] - 5*x[4]*x[5] },
      { expr := x[1]^3+x[2]^3+1         },
    },
    objective = {
      exec := exp(x:prod()) - 0.5*(x[1]^3+x[2]^3+1)^2,
      method=mth, tol=1e-8, grad=true
    },
    maxcall=1000, !info=5, debug=2
  }
end

-- Example #71 from Hock-Schittkowsky test suite (all algos fail)

local function testMatchFunc4 (x, mth)
  local xres = vector {1, 4.7429994, 3.8211503, 1.3794082}
  local fref = 17.0140173
  local status, fmin, ncall = match {
    variables = { min=1, max=5,
      { var = 'x[1]' },
      { var = 'x[2]' },
      { var = 'x[3]' },
      { var = 'x[4]' },
    },
    equalities = { tol=5e-7,
      { expr := x[1]^2+x[2]^2+x[3]^2+x[4]^2 - 40 },
    },
    inequalities = { tol=5e-7,
      { expr := 25 - x[1]*x[2]*x[3]*x[4] },
!     { expr := 1 - x[1] },
!     { expr := 1 - x[2] },  -- useless constraints
!     { expr := 1 - x[3] },  -- useless constraints
!     { expr := 1 - x[4] },  -- useless constraints
!     { expr := x[1] - 2 },  -- useless constraints
!     { expr := x[2] - 5 },  -- useless constraints
!     { expr := x[3] - 5 },  -- useless constraints
!     { expr := x[4] - 2 },  -- useless constraints
    },
    objective = {
      exec := x[1]*x[4] * (x[1]+x[2]+x[3]) + x[3],
      method=mth, tol=1e-8, grad=true
    },
    maxcall=500, !info=2, !debug=2
  }
  return status, fmin, ncall, fref, xres
end

-- Trivial MAD-X example from IPAC 2006 paper

local function testMatchFunc5 (x, mth)
  local xres = vector {1, 4.7429994, 3.8211503, 1.3794082}
  local fref = 17.0140173
  local status, fmin, ncall = match {
    variables = {
      { var = 'x[1]' },
    },
    -- Some algorithms do not accept more constraints than variables...
    equalities = {
      { expr := (x[1]-3.5)*(x[1]+2)*(x[1]-4) },
      { expr := (x[1]-3.5)*(x[1]-1.4)*(x[1]+3.5) },
    },
    objective = { method=mth, fmin=1e-12, },
    !info=2, debug=2,
  }
  return status, fmin, ncall, fref, xres
end

--testMatchFunc6 was added on 27 Mar 2020 in "ongoing cleanup of matching functions tests"

--testMatchFunc7 was added and testMatchFuncCOB6 and testMatchFuncSPQ6 were changed from working with testMatchFunc6 to testMatchFunc7 and so their names were changed to testMatchFuncCOB7 and testMatchFuncSPQ7 (14 Apr 2020,  "adjust tests to new algorithms and policy")

--in "update examples to new conventions" on 11 Jun 2020 testMatchFunc5 and testMatchFunc7 were commented out

--in "fix" (aca10ec) on 3 Jul 2020, testMatchFunc5 and testMatchFunc7 were deleted along with testMatchFuncCOB7. 
--testMatchFunc6 was then renamed to testMatchFunc5. 
--testMatchFuncJAC6, testMatchFuncSPQ7, testMatchFuncMMA6 and testMatchFuncLMD6 were not changed or deleted and therefore use functions that do not exist

-- Constrained Optimization BY Linear Approximations (Simplex) ----------------o

function TestMatch:testMatchFuncCOB1 ()
  local fref = sqrt(8/27)
  local r = vector {1/3, 8/27}
  local x = vector {1.234, 5.678}
  local status, fmin, ncall = testMatchFunc1(x, 'LN_COBYLA')
-- print(status, fmin, ncall, fref) ; x:print('x')
  assertEquals(status, 'XTOL')                                        -- SUCCESS
  assertEquals(ncall , 31    )
  assertAlmostEquals(fmin, fref, 2e-7)
  assertAlmostEquals(x[1], r[1], 2e-7)
  assertAlmostEquals(x[2], r[2], 2e-7) -- err=0.00016 > 0.0001
end

function TestMatch:testMatchFuncCOB2 ()
  local fref = sqrt(8/27)
  local r = vector {1/3, 8/27}
  local x = vector {1.234, 5.678}
  local status, fmin, ncall = testMatchFunc2(x, 'LN_COBYLA')
-- print(status, fmin, ncall, fref) ; x:print('x')
  assertEquals(status, 'FTOL')                                        -- SUCCESS
  assertEquals(ncall , 28    )
  assertAlmostEquals(fmin, fref, 2e-7)
  assertAlmostEquals(x[1], r[1], 2e-7)
  assertAlmostEquals(x[2], r[2], 2e-7)
end

function TestMatch:testMatchFuncCOB3 ()
  local fref = 0.053950
  local r = vector {-1.71714, 1.59571, 1.82725, -0.763643, -0.763643}
  local x = vector {-1.8, 1.7, 1.9, -0.8, -0.8}
  local status, fmin, ncall = testMatchFunc3(x, 'LN_COBYLA')
-- print(status, fmin, ncall, fref) ; x:print('x')
  assertEquals(status, 'FTOL')                                        -- SUCCESS
! assertEquals(ncall , 181   ) -- unstable
  assertAlmostEquals(fmin, fref, 2e-4)
  assertAlmostEquals(x[1], r[1], 2e-4)
  assertAlmostEquals(x[2], r[2], 2e-4)
  assertAlmostEquals(x[3], r[3], 2e-4)
  assertAlmostEquals(x[4], r[4], 2e-4)
  assertAlmostEquals(x[5], r[5], 2e-4)
end

function TestMatch:testMatchFuncCOB4 () -- difficult problem...
  local fref = 17.014016822208
  local r = vector {1, 4.7429994, 3.8211503, 1.3794082}
  local x = vector {1, 5, 5, 1}
  local status, fmin, ncall = testMatchFunc4(x, 'LN_COBYLA')
--  print(status, fmin, ncall, fref) ; x:print('x')
  assertEquals(status, 'FTOL')                                        -- SUCCESS
  assertEquals(ncall , 122   )
  assertAlmostEquals(fmin, fref, 3e-7)
  assertAlmostEquals(x[1], r[1], 1e-8)
  assertAlmostEquals(x[2], r[2], 2e-4)
  assertAlmostEquals(x[3], r[3], 3e-4)
  assertAlmostEquals(x[4], r[4], 3e-5)
end

function TestMatch:testMatchFuncCOB5 () -- MAD-X example
  local x = vector {0}
  local status, fmin, ncall = testMatchFunc5(x, 'LN_COBYLA')
--  print(status, fmin, ncall) ; x:print('x')
  assertEquals(status, 'FMIN')                                        -- SUCCESS
  assertEquals(ncall , 20    )
  assertAlmostEquals(fmin, 0  , 1e-12)
  assertAlmostEquals(x[1], 3.5, 1e-12)
end

-- Method of Moving Asymptotes ------------------------------------------------o

function TestMatch:testMatchFuncMMA1 ()
  local fref = sqrt(8/27)
  local r = vector {1/3, 8/27}
  local x = vector {1.234, 5.678}
  local status, fmin, ncall = testMatchFunc1(x, 'LD_MMA')
-- print(status, fmin, ncall, fref) ; x:print('x')
  assertEquals(status, 'XTOL')                                        -- SUCCESS
  assertEquals(ncall , 33    )
  assertAlmostEquals(fmin, fref, 5e-9)
  assertAlmostEquals(x[1], r[1], 2e-9)
  assertAlmostEquals(x[2], r[2], 5e-9)
end

function TestMatch:testMatchFuncMMA2 ()
  local fref = sqrt(8/27)
  local r = vector {1/3, 8/27}
  local x = vector {1.234, 5.678}
  local status, fmin, ncall = testMatchFunc2(x, 'LD_MMA')
-- print(status, fmin, ncall, fref) ; x:print('x')
  assertEquals(status, 'FMIN')                                        -- SUCCESS
  assertEquals(ncall , 30    )
  assertAlmostEquals(fmin, fref, 3e-5)
  assertAlmostEquals(x[1], r[1], 1e-5)
  assertAlmostEquals(x[2], r[2], 3e-5)
end

function TestMatch:testMatchFuncMMA3 ()
  local fref = 0.053950
  local r = vector {-1.71714, 1.59571, 1.82725, -0.763643, -0.763643}
  local x = vector {-1.8, 1.7, 1.9, -0.8, -0.8}
  local status, fmin, ncall = testMatchFunc3(x, 'LD_MMA')
--  print(status, fmin, ncall, fref) ; x:print('x')
  assertEquals(status, 'MAXCALL')                                     -- FAILURE
! assertEquals(ncall , 181      ) -- unstable
  assertAlmostEquals(fmin , fref, 2e-4)
  assertAlmostEquals(x[1] , r[1], 2e-4)
  assertAlmostEquals(x[2] , r[2], 2e-4)
  assertAlmostEquals(x[3] , r[3], 2e-4)
  assertAlmostEquals(x[4] , r[4], 2e-4)
  assertAlmostEquals(x[5] , r[5], 2e-4)
end

function TestMatch:testMatchFuncMMA4 () -- difficult problem...
  local x = vector {1, 5, 5, 1}
  local status, fmin, ncall = testMatchFunc4(x, 'LD_MMA')
--  print(status, fmin, ncall, fref) ; x:print('x')
  assertEquals(status, 'XTOL')                                        -- FAILURE
end

function TestMatch:testMatchFuncMMA5 () -- difficult problem...
  local x = vector {1, 5, 5, 1}
  local status, fmin, ncall = testMatchFunc5(x, 'LD_MMA')
--  print(status, fmin, ncall, fref) ; x:print('x')
  assertEquals(status, 'MAXCALL')                                     -- FAILURE
  assertEquals(ncall , 2500)
end

function TestMatch:testMatchFuncMMA6 () -- MAD-X example
  local x = vector {0}
  local status, fmin, ncall = testMatchFunc6(x, 'LD_MMA')
-- print(status, fmin, ncall, fref) ; x:print('x')
  assertEquals      (status, 'FMIN')                                  -- SUCCESS
  assertEquals      (ncall , 118   )
  assertAlmostEquals(fmin  , 0  , 1e-12)
  assertAlmostEquals(x[1]  , 3.5, 1e-12)
end

-- Sequential Least-Squares Quadratic Programming -----------------------------o

function TestMatch:testMatchFuncSQP1 ()
  local x = vector {1.234, 5.678}
  local status, fmin, ncall = testMatchFunc1(x, 'LD_SLSQP')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'XTOL')                                  -- SUCCESS
  assertEquals      (ncall , 22    )
  assertAlmostEquals(fmin  , sqrt(8/27), 1e-2)
  assertAlmostEquals(x[1]  ,      1/3  , 1e-2)
  assertAlmostEquals(x[2]  ,      8/27 , 1e-2) -- err=0.00016 > 0.0001
end

function TestMatch:testMatchFuncSQP2 ()
  local x = vector {1.234, 5.678}
  local status, fmin, ncall = testMatchFunc2(x, 'LD_SLSQP')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'FMIN')                                  -- SUCCESS
  assertEquals      (ncall , 42    )
  assertAlmostEquals(fmin  , sqrt(8/27), 1e-3)
  assertAlmostEquals(x[1]  ,      1/3  , 1e-3)
  assertAlmostEquals(x[2]  ,      8/27 , 1e-3) -- err=0.00016 > 0.0001
end

function TestMatch:testMatchFuncSQP3 ()
  local x = vector {-1.8, 1.7, 1.9, -0.8, -0.8}
  local status, fmin, ncall = testMatchFunc3(x, 'LD_SLSQP')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'FTOL')                                  -- SUCCESS
  assertEquals      (ncall ,  48   )          -- 9 iterations 9x(1+5)
  assertAlmostEquals(fmin  ,  0.053950, 1e-6) -- values from example
  assertAlmostEquals(x[1]  , -1.717143, 1e-6) -- -1.71714
  assertAlmostEquals(x[2]  ,  1.595709, 1e-6) --  1.59571
  assertAlmostEquals(x[3]  ,  1.827247, 1e-6) --  1.82725
  assertAlmostEquals(x[4]  , -0.763643, 1e-6) -- -0.763643
  assertAlmostEquals(x[5]  , -0.763643, 1e-6) -- -0.763643
end

function TestMatch:testMatchFuncSQP4 () -- difficult problem...
  local x = vector {1, 5, 5, 1}
  local status, fmin, ncall = testMatchFunc4(x, 'LD_SLSQP')
-- print(status, fmin, ncall, fmin) ; x:print('x')
-- results are completely wrong
  assertEquals(status, 'ROUNDOFF')                                    -- FAILURE
! assertEquals(ncall , 425       ) -- unstable
end

function TestMatch:testMatchFuncSQP5 () -- difficult problem...
  local x = vector {1, 5, 5, 1}
  local status, fmin, ncall = testMatchFunc5(x, 'LD_SLSQP')
-- print(status, fmin, ncall, fmin) ; x:print('x')
!  assertEquals      (status, 'ROUNDOFF') -- unstable                 -- SUCCESS
!  assertEquals      (ncall , 265       ) -- unstable
  assertAlmostEquals(x[1], 1.0000000, 2e-5) -- 1.0000000
  assertAlmostEquals(x[2], 4.7429998, 3e-4) -- 4.7429994 -- side effects?
  assertAlmostEquals(x[3], 3.8211499, 4e-4) -- 3.8211503
  assertAlmostEquals(x[4], 1.3794083, 2e-4) -- 1.3794082
end

function TestMatch:testMatchFuncSPQ7 () -- MAD-X example
  local x = vector {0}
  local status, fmin, ncall = testMatchFunc7(x, 'LD_SLSQP')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'FMIN')                                  -- SUCCESS
  assertEquals      (ncall , 20    )
  assertAlmostEquals(fmin  , 0  , 1e-12)
  assertAlmostEquals(x[1]  , 3.5, 1e-12)
end

-- Jacobian -------------------------------------------------------------------o

function TestMatch:testMatchFuncJAC1 ()
  local x = vector {1.234, 5.678}
  local status, fmin, ncall = testMatchFunc1(x, 'LD_JACOBIAN')
  print(status, fmin, ncall) ; x:print('x')
  assertEquals(status, 'XTOL')                                        -- SUCCESS
  assertEquals(ncall , 8     )
  assertAlmostEquals(fmin, sqrt(8/27), 1e-16)
  assertAlmostEquals(x[1], 1/3       , 1e-16)
  assertAlmostEquals(x[2], 8/27      , 1e-16)
end

function TestMatch:testMatchFuncJAC2 ()
  local x = vector {1.234, 5.678}
  local status, fmin, ncall = testMatchFunc2(x, 'LD_JACOBIAN')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'FMIN')                                  -- SUCCESS
  assertEquals      (ncall , 6     )
  assertAlmostEquals(fmin  , sqrt(8/27), 1e-3)
  assertAlmostEquals(x[1]  ,      1/3  , 1e-3)
  assertAlmostEquals(x[2]  ,      8/27 , 1e-3) -- err=0.00016 > 0.0001
end

function TestMatch:testMatchFuncJAC3 ()
  local x = vector {-1.8, 1.7, 1.9, -0.8, -0.8}
  local status, fmin, ncall = testMatchFunc3(x, 'LD_JACOBIAN')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'FTOL')                                  -- SUCCESS
  assertEquals      (ncall ,  25   )          -- 5 iterations
  assertAlmostEquals(fmin  ,  0.053996, 1e-5) -- find another minimum (close)...
  assertAlmostEquals(x[1]  , -1.72693 , 1e-5) -- fstp=-5.12167e-11
  assertAlmostEquals(x[2]  ,  1.60702 , 1e-5) -- cval= 4.40930e-14
  assertAlmostEquals(x[3]  ,  1.80897 , 1e-5)
  assertAlmostEquals(x[4]  , -0.762504, 1e-5)
  assertAlmostEquals(x[5]  , -0.762504, 1e-5)
end

function TestMatch:testMatchFuncJAC4 () -- difficult problem... or ill posed?
  local x = vector {1, 5, 5, 1}
  local status, fmin, ncall = testMatchFunc4(x, 'LD_JACOBIAN')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals       (status, 'XTOL')                                 -- FAILURE
  assertEquals       (ncall , 31) -- not a Least-Squares problem
end

function TestMatch:testMatchFuncJAC5 () -- difficult problem...
  local x = vector {1, 5, 5, 1}
  local status, fmin, ncall = testMatchFunc5(x, 'LD_JACOBIAN')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'ROUNDOFF') !'FTOL_REACHED')             -- SUCCESS
  assertEquals      (ncall , 142        )
  assertAlmostEquals(x[1], 1.00000, 5e-4) -- 1.0000000
  assertAlmostEquals(x[2], 4.74296, 5e-4) -- 4.7429994
  assertAlmostEquals(x[3], 3.82120, 5e-4) -- 3.8211503
  assertAlmostEquals(x[4], 1.37940, 5e-4) -- 1.3794082
end

function TestMatch:testMatchFuncJAC6 () -- MAD-X example
  local x = vector {0}
  local status, fmin, ncall = testMatchFunc6(x, 'LD_JACOBIAN')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'FMIN')                                  -- SUCCESS
  assertEquals      (ncall , 17        )
  assertAlmostEquals(fmin  , 0  , 1e-12)
  assertAlmostEquals(x[1]  , 3.5, 1e-12)
end

-- Levengberg-Marquardt -------------------------------------------------------o

function TestMatch:testMatchFuncLMD1 ()
  local x = vector {1.234, 5.678}
  local status, fmin, ncall = testMatchFunc1(x, 'LD_LMDIF')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals(status, 'XTOL')                                  -- SUCCESS
  assertEquals(ncall , 10     )
  assertAlmostEquals(fmin, sqrt(8/27), 1e-11)
  assertAlmostEquals(x[1],      1/3  , 1e-11)
  assertAlmostEquals(x[2],      8/27 , 1e-11)
end

function TestMatch:testMatchFuncLMD2 ()
  local x = vector {1.234, 5.678}
  local status, fmin, ncall = testMatchFunc2(x, 'LD_LMDIF')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'FMIN')                                  -- SUCCESS
  assertEquals      (ncall , 9     )
  assertAlmostEquals(fmin  , sqrt(8/27), 1e-8)
  assertAlmostEquals(x[1]  ,      1/3  , 1e-8)
  assertAlmostEquals(x[2]  ,      8/27 , 1e-8)
end

function TestMatch:testMatchFuncLMD3 ()
  local x = vector {-1.8, 1.7, 1.9, -0.8, -0.8}
  local status, fmin, ncall = testMatchFunc3(x, 'LD_LMDIF')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'FTOL')                                  -- SUCCESS
  assertEquals      (ncall ,  25   )          -- 5 iterations
  assertAlmostEquals(fmin  ,  0.053996, 5e-6) -- find another minimum (close)...
  assertAlmostEquals(x[1]  , -1.72693 , 5e-6) -- fstp=-5.12167e-11
  assertAlmostEquals(x[2]  ,  1.60702 , 5e-6) -- cval= 4.40930e-14
  assertAlmostEquals(x[3]  ,  1.80897 , 5e-6)
  assertAlmostEquals(x[4]  , -0.762504, 5e-6)
  assertAlmostEquals(x[5]  , -0.762504, 5e-6)
end

function TestMatch:testMatchFuncLMD4 () -- difficult problem... or ill posed?
  local x = vector {1, 5, 5, 1}
  local status, fmin, ncall = testMatchFunc4(x, 'LD_LMDIF')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals(status, 'ROUNDOFF')                                    -- FAILURE
  assertEquals(ncall , 35) -- not a Least-Squares problem
end

function TestMatch:testMatchFuncLMD5 () -- difficult problem...
  local x = vector {1, 5, 5, 1}
  local status, fmin, ncall = testMatchFunc5(x, 'LD_LMDIF')
-- print(status, fmin, ncall, fmin) ; x:print('x')
! assertEquals      (status, 'XTOL')      -- unstable                 -- SUCCESS
! assertEquals      (ncall , 394   )      -- unstable
  assertAlmostEquals(x[1], 1.00000, 3e-4) -- 1.0000000
  assertAlmostEquals(x[2], 4.74166, 3e-4) -- 4.7429994
  assertAlmostEquals(x[3], 3.82290, 3e-4) -- 3.8211503
  assertAlmostEquals(x[4], 1.37917, 3e-4) -- 1.3794082
end

function TestMatch:testMatchFuncLMD6 () -- MAD-X example
  local x = vector {0}
  local status, fmin, ncall = testMatchFunc6(x, 'LD_LMDIF')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'FMIN')                                  -- SUCCESS
  assertEquals      (ncall , 17    )
  assertAlmostEquals(fmin  , 0  , 1e-12)
  assertAlmostEquals(x[1]  , 3.5, 1e-12)
end

-- end ------------------------------------------------------------------------o
