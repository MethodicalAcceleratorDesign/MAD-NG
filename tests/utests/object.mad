--[=[
 o-----------------------------------------------------------------------------o
 |
 | Object model regression tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the object module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNil, assertTrue, assertFalse, assertEquals, assertNotEquals,
      assertAlmostEquals, assertStrContains, assertErrorMsgContains
      in require 'luaunit'

local Object in MAD
local is_number, is_function, is_table, is_object, is_instanceOf, is_readonly
      in MAD.typeid


-- regression test suite ------------------------------------------------------o

TestObject = {}

function TestObject:testConstructor()
  local p0 = Object 'p0' {}
  local p1 = Object {}
  local p2 = Object 'p2'
  local p3 = Object
  local p4 = Object('p4',{})

  local p00 = p0 'p00' {}
  local p01 = p0 {}
  local p02 = p0 'p02'
  local p03 = p0
  local p04 = p0('p04',{})

  local get = \s,k s[k]
  local set = \s,k,v => s[k]=v end
  local msg = {
    "forbidden read access to incomplete object",
    "forbidden write access to incomplete object",
    "forbidden write access to readonly object",
    "invalid argument #1 to constructor (string or raw table expected)",
    "invalid argument #2 to constructor (raw table expected)",
  }

  -- invalid ctor argument
  assertErrorMsgContains(msg[4], Object, true)
  assertErrorMsgContains(msg[4], Object, 1)
  assertErrorMsgContains(msg[4], Object, \ ())
  assertErrorMsgContains(msg[4], Object, Object)
  assertErrorMsgContains(msg[5], Object, 'p', true)
  assertErrorMsgContains(msg[5], Object, 'p', 1)
  assertErrorMsgContains(msg[5], Object, 'p', '1')
  assertErrorMsgContains(msg[5], Object, 'p', \ ())
  assertErrorMsgContains(msg[5], Object, 'p', Object)

  -- ctor equivalence
  assertEquals(p04, Object 'p04' {})
  assertEquals(p04, p0 'p04' {})

  -- read
  assertNil( p0.a )
  assertNil( p1.a )
  assertErrorMsgContains(msg[1], get, p2, a)
  assertNil( p3.a )
  assertNil( p4.a )

  -- write
  p0.a = ''   assertEquals( p0.a, '' )
  p1.a = ''   assertEquals( p1.a, '' )
  assertErrorMsgContains(msg[2], set, p2, a, '')
  assertErrorMsgContains(msg[3], set, p3, a, '')
  p4.a = ''   assertEquals( p4.a, '' )

  -- read child
  assertEquals( p00.a, '' )
  assertEquals( p01.a, '' )
  assertErrorMsgContains(msg[1], get, p02, a)
  assertEquals( p03.a, '' )
  assertEquals( p04.a, '' )

  -- write child
  p00.a = '0'   assertEquals( p00.a, '0' )
  p01.a = '0'   assertEquals( p01.a, '0' )
  assertErrorMsgContains(msg[2], set, p02, a, '')
  p03.a = '0'   assertEquals( p03.a, '0' )
  p04.a = '0'   assertEquals( p04.a, '0' )
end

function TestObject:testIsObject()
  local p0 = Object 'p0' {}
  local p1 = Object {}
  local p2 = Object 'p2'
  local p3 = Object

  local p00 = p0 'p00' {}
  local p01 = p0 {}
  local p02 = p0 'p02'
  local p03 = p0

  assertTrue ( is_object(p0) )
  assertTrue ( is_object(p1) )
  assertTrue ( is_object(p2) )
  assertTrue ( is_object(p3) )
  assertTrue ( is_object(p00) )
  assertTrue ( is_object(p01) )
  assertTrue ( is_object(p02) )
  assertTrue ( is_object(p03) )
  assertFalse( is_object(nil)  )
  assertFalse( is_object(1)    )
  assertFalse( is_object({})   )
  assertFalse( is_object(\ ()) )
end

function TestObject:testIsReadonly()
  local p0 = Object 'p0' {}
  local p1 = Object {}
  local p2 = Object 'p2'
  local p3 = Object

  local p00 = p0 'p00' {}
  local p01 = p0 {}
  local p02 = p0 'p02'
  local p03 = p0

  local msg = {
    "invalid argument #1 (forbidden access to 'Object')",
    "invalid argument #2 (boolean or nil expected)",
    "invalid argument #1 (forbidden access to 'ro_obj')",
  }

  assertFalse( is_readonly(p0)  )
  assertFalse( is_readonly(p1)  )
  assertFalse( is_readonly(p2)  )
  assertTrue ( is_readonly(p3)  )
  assertFalse( is_readonly(p00) )
  assertFalse( is_readonly(p01) )
  assertFalse( is_readonly(p02) )
  assertFalse( is_readonly(p03) )
  assertTrue ( is_readonly(p03:set_readonly(true)) )
  p0:set_readonly(true)
  assertTrue ( p0:is_readonly()  )
  assertFalse( p00:is_readonly() )
  assertErrorMsgContains(msg[1], Object.set_readonly, Object, true)
  assertErrorMsgContains(msg[1], Object.set_readonly, Object, false)
  assertErrorMsgContains(msg[2], p0.set_readonly, p0, 1)
  assertErrorMsgContains(msg[2], p00.set_readonly, p0, '')
end

function TestObject:testInheritance()
  local p0 = Object {}
  local p1 = p0 { x=3, y=2, z=1  }
  local p2 = p1 { x=2, y=1 }
  local p3 = p2 { x=1  }
  local p4 = p3 { }
  local vs = {'x','y','z'}

  assertEquals   ( p0:get(vs), {} )
  assertEquals   ( p0        , {} )

  assertEquals   ( p1:get(vs), { x=3, y=2, z=1 } )
  assertEquals   ( p1        , { x=3, y=2, z=1 } )
  assertNotEquals( p1        , { x=3, y=2 } )

  assertEquals   ( p2:get(vs), { x=2, y=1, z=1 } )
  assertEquals   ( p2        , { x=2, y=1 } )
  assertNotEquals( p2        , { x=2 } )

  assertEquals   ( p3:get(vs), { x=1, y=1, z=1 } )
  assertEquals   ( p3        , { x=1 } )
  assertNotEquals( p3        , { x=1, y=1 } )

  assertEquals   ( p4:get(vs), { x=1, y=1, z=1 } )
  assertEquals   ( p4        , {} )
  assertNotEquals( p4        , { x=1 } )

  assertEquals   ( {p1.x, p1.y, p1.z}, {3,2,1})
  assertEquals   ( {p2.x, p2.y, p2.z}, {2,1,1})
  assertEquals   ( {p3.x, p3.y, p3.z}, {1,1,1})
  assertEquals   ( {p4.x, p4.y, p4.z}, {1,1,1})

  p2:set{x=5, y=6}  p4:set{y=5, z=6}

  assertEquals   ( p0:get(vs), {} )
  assertEquals   ( p0        , {} )

  assertEquals   ( p1:get(vs), { x=3, y=2, z=1 } )
  assertEquals   ( p1        , { x=3, y=2, z=1 } )
  assertNotEquals( p1        , { x=3, y=2 } )

  assertEquals   ( p2:get(vs), { x=5, y=6, z=1 } )
  assertEquals   ( p2        , { x=5, y=6 } )
  assertNotEquals( p2        , { x=5 } )
  assertNotEquals( p2        , { x=2, y=1 } )

  assertEquals   ( p3:get(vs), { x=1, y=6, z=1 } )
  assertEquals   ( p3        , { x=1 } )
  assertNotEquals( p3        , { x=1, y=6 } )
  assertNotEquals( p3        , { x=1, y=1 } )

  assertEquals   ( p4:get(vs), { x=1, y=5, z=6 } )
  assertEquals   ( p4        , { y=5, z=6 } )
  assertNotEquals( p4        , { x=1 } )

  assertEquals   ( {p1.x, p1.y, p1.z}, {3,2,1})
  assertEquals   ( {p2.x, p2.y, p2.z}, {5,6,1})
  assertEquals   ( {p3.x, p3.y, p3.z}, {1,6,1})
  assertEquals   ( {p4.x, p4.y, p4.z}, {1,5,6})
end

function TestObject:testIsInstanceOf()
  local p0 = Object {}
  local p1 = p0 { }
  local p2 = p1 { }
  local p3 = p1 { }
  local p4 = p3 { }

  local msg = {
    "invalid argument #2 (object expected)",
  }

  assertTrue ( Object:is_instanceOf(Object) )

  assertTrue ( p0:is_instanceOf(Object) )
  assertTrue ( p0:is_instanceOf(p0) )
  assertFalse( p0:is_instanceOf(p1) )
  assertFalse( p0:is_instanceOf(p2) )
  assertFalse( p0:is_instanceOf(p3) )
  assertFalse( p0:is_instanceOf(p4) )

  assertTrue ( p1:is_instanceOf(Object) )
  assertTrue ( p1:is_instanceOf(p0) )
  assertTrue ( p1:is_instanceOf(p1) )
  assertFalse( p1:is_instanceOf(p2) )
  assertFalse( p1:is_instanceOf(p3) )
  assertFalse( p1:is_instanceOf(p4) )

  assertTrue ( p2:is_instanceOf(Object) )
  assertTrue ( p2:is_instanceOf(p0) )
  assertTrue ( p2:is_instanceOf(p1) )
  assertTrue ( p2:is_instanceOf(p2) )
  assertFalse( p2:is_instanceOf(p3) )
  assertFalse( p2:is_instanceOf(p4) )

  assertTrue ( p3:is_instanceOf(Object) )
  assertTrue ( p3:is_instanceOf(p0) )
  assertTrue ( p3:is_instanceOf(p1) )
  assertFalse( p3:is_instanceOf(p2) )
  assertTrue ( p3:is_instanceOf(p3) )
  assertFalse( p3:is_instanceOf(p4) )

  assertTrue ( p4:is_instanceOf(Object) )
  assertTrue ( p4:is_instanceOf(p0) )
  assertTrue ( p4:is_instanceOf(p1) )
  assertFalse( p4:is_instanceOf(p2) )
  assertTrue ( p4:is_instanceOf(p3) )
  assertTrue ( p4:is_instanceOf(p4) )

  assertFalse( is_instanceOf(0 , p0) )
  assertFalse( is_instanceOf('', p0) )
  assertFalse( is_instanceOf({}, p0) )

  assertErrorMsgContains(msg[1], is_instanceOf, p0, 0)
  assertErrorMsgContains(msg[1], is_instanceOf, p0, '')
  assertErrorMsgContains(msg[1], is_instanceOf, p0, {})
end

function TestObject:testValueSemantic()
  local p0 = Object {}
  local p1 = p0 { x=3, y=2, z=\s 2*s.y }
  local p2 = p1 { x=2, y=\s 3*s.x }
  local p3 = p2 { x:=5 }
  local p4 = p3 { }
  local vs = {'x','y','z'}

  assertEquals   ( p0 , {} )
  assertEquals   ( p1:get(vs)      , { x=3, y=2, z=4 } )
  assertNotEquals( p1:get(vs,false), { x=3, y=2, z=4 } )
  assertNotEquals( p1:get(vs)      , { x=3, y=2 } )
  assertEquals   ( p2:get(vs)      , { x=2, y=6, z=12 } )
  assertNotEquals( p2:get(vs,false), { x=2, y=6, z=12 } )
  assertNotEquals( p2:get(vs)      , { x=2, y=6 } )
  assertNotEquals( p2:get(vs)      , { x=3, y=2 } )
  assertEquals   ( p3:get(vs)      , { x=5, y=15, z=30 } )
  assertNotEquals( p3:get(vs,false), { x=5, y=15, z=30 } )
  assertNotEquals( p3:get(vs)      , { x=5, y=15 } )
  assertNotEquals( p3:get(vs)      , { x=2, y=6 } )
  assertEquals   ( p4:get(vs)      , { x=5, y=15, z=30 } )
  assertNotEquals( p4:get(vs,false), { x=5, y=15, z=30 } )
  assertNotEquals( p4:get(vs)      , { x=5, y=15 } )

  p1.z = 6
  assertEquals   ( p1:get(vs)      , { x=3, y=2, z=6 } )
  assertEquals   ( p1:get(vs,false), { x=3, y=2, z=6 } )
  assertNotEquals( p1:get(vs)      , { x=3, y=2 } )
  assertEquals   ( p2:get(vs)      , { x=2, y=6, z=6 } )
  assertNotEquals( p2:get(vs,false), { x=2, y=6, z=6 } )
  assertNotEquals( p2:get(vs)      , { x=2, y=6 } )
  assertEquals   ( p3:get(vs)      , { x=5, y=15, z=6 } )
  assertNotEquals( p3:get(vs,false), { x=5, y=15, z=6 } )
  assertEquals   ( p3:get(vs)      , { x=5, y=15, z=6 } )
  assertEquals   ( p4:get(vs)      , { x=5, y=15, z=6 } )
  assertNotEquals( p4:get(vs,false), { x=5, y=15, z=6 } )
  assertNotEquals( p4:get(vs)      , { x=5, y=15 } )

  p2.y = 5
  assertEquals   ( p2:get(vs)      , { x=2, y=5, z=6 } )
  assertEquals   ( p2:get(vs,false), { x=2, y=5, z=6 } )
  assertNotEquals( p2:get(vs)      , { x=2, y=5 } )
  assertEquals   ( p3:get(vs)      , { x=5, y=5, z=6 } )
  assertNotEquals( p3:get(vs,false), { x=5, y=5, z=6 } )
  assertEquals   ( p3:get(vs)      , { x=5, y=5, z=6 } )
  assertEquals   ( p4:get(vs)      , { x=5, y=5, z=6 } )
  assertNotEquals( p4:get(vs,false), { x=5, y=5, z=6 } )
  assertNotEquals( p4:get(vs)      , { x=5, y=5 } )

  p3.x = 3
  assertEquals   ( p3:get(vs)      , { x=3, y=5, z=6 } )
  assertEquals   ( p3:get(vs,false), { x=3, y=5, z=6 } )
  assertNotEquals( p3:get(vs)      , { x=3, y=5 } )
  assertEquals   ( p4:get(vs)      , { x=3, y=5, z=6 } )
  assertEquals   ( p4:get(vs,false), { x=3, y=5, z=6 } )
  assertNotEquals( p4:get(vs)      , { x=3, y=5 } )
end

function TestObject:testArrayValueSemantic()
  local p0 = Object {}
  local p1 = p0 { x=3, y=2, z=\s { x=3*s.x, y=2*s.y } }
  local p2 = p1 { x=2, y=\s 2*s.x }
  local p3 = p2 { x:=5 }
  local p4 = p3 {}
  local vs = {'x','y','z'}

  assertEquals   ( p0 , {} )
  assertEquals   ( p1:get(vs)      , { x=3, y=2, z={x=9, y=4} } )
  assertNotEquals( p1:get(vs,false), { x=3, y=2, z={x=9, y=4} } )
  assertNotEquals( p1:get(vs)      , { x=3, y=2 } )
  assertEquals   ( p2:get(vs)      , { x=2, y=4, z={x=6,y=8} } )
  assertNotEquals( p2:get(vs,false), { x=2, y=6, z={x=6,y=8} } )
  assertNotEquals( p2:get(vs)      , { x=2, y=6 } )
  assertNotEquals( p2:get(vs)      , { x=3, y=2 } )
  assertEquals   ( p3:get(vs)      , { x=5, y=10, z={x=15,y=20} } )
  assertNotEquals( p3:get(vs,false), { x=5, y=10, z={x=15,y=20} } )
  assertNotEquals( p3:get(vs)      , { x=5, y=15 } )
  assertNotEquals( p3:get(vs)      , { x=2, y=6 } )
  assertEquals   ( p4:get(vs)      , { x=5, y=10, z={x=15,y=20} } )
  assertNotEquals( p4:get(vs,false), { x=5, y=15, z={x=15,y=20} } )
  assertNotEquals( p4:get(vs)      , { x=5, y=15 } )

  p1:set { x:=7 }
  assertEquals   ( p1:get(vs)      , { x=7, y=2, z={x=21,y=4} } )
  assertNotEquals( p1:get(vs,false), { x=7, y=2, z={x=21,y=4} } )
  assertNotEquals( p1:get(vs)      , { x=7, y=2 } )
  assertNotEquals( p1:get(vs)      , { y=2 } )
  assertEquals   ( p2:get(vs)      , { x=2, y=4, z={x=6,y=8} } )
  assertNotEquals( p2:get(vs,false), { x=2, y=4, z={x=6,y=8} } )
  assertNotEquals( p2:get(vs)      , { x=2, y=6 } )
  assertEquals   ( p3:get(vs)      , { x=5, y=10, z={x=15,y=20} } )
  assertNotEquals( p3:get(vs,false), { x=5, y=15, z=6 } )
  assertNotEquals( p3:get(vs)      , { x=5, y=15 } )
  assertEquals   ( p4:get(vs)      , { x=5, y=10, z={x=15,y=20} } )
  assertNotEquals( p4:get(vs,false), { x=5, y=15, z={x=15,y=20} } )
  assertNotEquals( p4:get(vs)      , { x=5, y=15 } )
end

function TestObject:testSpecialVariable()
  local p0 = Object 'p0' {}
  local p1 = p0 { x=3, y=\s 2*s.x, z=\s { x=3*s.x, y=2*s.y } }
  local p2 = p1 { x=2, y=\s 4*s.x }
  local p3 = p2 { x:=5 }
  local p4 = p3 {}

  assertTrue     ( p0.parent == Object )
  assertTrue     ( p1.parent == p0 )
  assertTrue     ( p2.parent == p1 )
  assertTrue     ( p3.parent == p2 )
  assertTrue     ( p4.parent == p3 )
  assertTrue     ( p0.parent == p0.__par )
  assertTrue     ( p1.parent == p1.__par )
  assertTrue     ( p2.parent == p2.__par )
  assertTrue     ( p3.parent == p3.__par )
  assertTrue     ( p4.parent == p4.__par )

  assertEquals   ( p0.name , 'p0' )
  assertEquals   ( p1.name , 'p0' )
  assertEquals   ( p0      , { __id='p0' } )
  assertEquals   ( p1.__id , 'p0' )

  assertEquals   ( p0.parent.name , 'Object' )
  assertTrue     ( p0.parent:is_readonly() )
  assertFalse    ( p0:is_readonly() )

  assertEquals   ( p1.__var.x      , p1.x )
  assertEquals   ( p1.__var.y(p1)  , p1.y )
  assertNotEquals( p1.__var.y(p2)  , p1.y )
  assertEquals   ( p1.__var.z(p1).x, p1.z.x )
  assertEquals   ( p1.__var.z(p1).y, p1.z.y )
  assertNotEquals( p1.__var.z(p2).y, p1.z.y )

  assertEquals   ( p2.__var.x      , p2.x )
  assertEquals   ( p2.__var.y(p2)  , p2.y )
  assertNotEquals( p2.__var.y(p1)  , p2.y )
  assertEquals   ( p2.__var.z(p2).x, p2.z.x )
  assertEquals   ( p2.__var.z(p2).y, p2.z.y )
  assertNotEquals( p2.__var.z(p3).y, p2.z.y )

  assertEquals   ( p3.__var.x(p3)  , p3.x )
  assertEquals   ( p3.__var.y(p3)  , p3.y )
  assertNotEquals( p3.__var.y(p2)  , p3.y )
  assertEquals   ( p3.__var.z(p3).x, p3.z.x )
  assertEquals   ( p3.__var.z(p3).y, p3.z.y )
  assertEquals   ( p3.__var.z(p4).y, p3.z.y )

  assertEquals   ( p4.__var.x(p4)  , p4.x )
  assertEquals   ( p4.__var.y(p4)  , p4.y )
  assertEquals   ( p4.__var.y(p3)  , p4.y )
  assertEquals   ( p4.__var.z(p4).x, p4.z.x )
  assertEquals   ( p4.__var.z(p4).y, p4.z.y )

  assertEquals   ( p2.__par.__var.x      , p1.x )
  assertEquals   ( p2.__par.__var.y(p1)  , p1.y )
  assertEquals   ( p2.__par.__var.z(p1).x, p1.z.x )
  assertEquals   ( p2.__par.__var.z(p1).y, p1.z.y )
  assertNotEquals( p2.__par.__var.z(p2).y, p1.z.y )

  assertEquals   ( p3.__par.__var.x      , p2.x )
  assertEquals   ( p3.__par.__var.y(p2)  , p2.y )
  assertEquals   ( p3.__par.__var.z(p2).x, p2.z.x )
  assertEquals   ( p3.__par.__var.z(p2).y, p2.z.y )
  assertNotEquals( p3.__par.__var.z(p3).y, p2.z.y )

  assertEquals   ( p4.__par.__var.x()    , p3.x )
  assertEquals   ( p4.__par.__var.y(p3)  , p3.y )
  assertEquals   ( p4.__par.__var.z(p3).x, p3.z.x )
  assertEquals   ( p4.__par.__var.z(p3).y, p3.z.y )
  assertEquals   ( p4.__par.__var.z(p4).y, p3.z.y )
end

function TestObject:testIterators()
  local p0 = Object 'p0' { 2, \ 3, 4, x=1, y=2, z=\s s.x*3 }
  local p1 = p0 'p1' { 7, \ 8, x=-1, y={} }
  local c

  assertEquals(#p0, 3)
  assertEquals(#p1, 2)

  -- bypass function evaluation, v may be a function but loops get same length
  c=0 for k,v in  pairs(p0.__var) do c=c+1 assertEquals(p0.__var[k], v) end
  assertEquals(c , 7)
  c=0 for k,v in  pairs(p1.__var) do c=c+1 assertEquals(p1.__var[k], v) end
  assertEquals(c , 5)
  c=0 for i,v in ipairs(p0.__var) do c=c+1 assertEquals(p0.__var[i], v) end
  assertEquals(c , 3)
  c=0 for i,v in ipairs(p1.__var) do c=c+1 assertEquals(p1.__var[i], v) end
  assertEquals(c , 2)
  c=0 for i=1,#p0           do c=c+1 assertEquals(p0[i], i+1) end
  assertEquals(c , 3)
  c=0 for i=1,#p1           do c=c+1 assertEquals(p1[i], i+6) end
  assertEquals(c , 2)
  c=1 while p0[c]           do c=c+1 assertEquals(p0[c-1], c) end
  assertEquals(c , 4)
  c=1 while p1[c]           do c=c+1 assertEquals(p1[c-1]%5, c) end
  assertEquals(c , 4)
end

function TestObject:testGetVariable()
  local p0 = Object 'p0' { x=1, y=2, z:=3 }
  local p1 = p0 'p1' { x=-1, y={} }
  local vs = {'name', 'x','y','z'}
  local msg = {
    "invalid argument #1 (object expected)",
    "invalid argument #2 (iterable expected)",
  }

  assertEquals ( p0:get(vs), { name='p0', x=1 , y=2 , z=3 } )
  assertEquals ( p1:get(vs), { name='p1', x=-1, y={}, z=3 } )

  assertEquals ( p0.get(p0,vs), { name='p0', x=1 , y=2 , z=3 } )
  assertEquals ( p1.get(p1,vs), { name='p1', x=-1, y={}, z=3 } )

  assertEquals(             p0:get(vs, true ).z, 3 )
  assertEquals(             p0:get(vs, nil  ).z, 3 )

  assertTrue  ( is_function(p0:get(vs, false).name) )
  assertTrue  ( is_function(p0:get(vs, false).z) )
  assertFalse ( is_function(p0:get(vs, nil  ).z) )

  assertTrue  ( is_function(p1:get(vs, false).name) )
  assertTrue  ( is_function(p1:get(vs, false).z) )
  assertTrue  ( is_table   (p1:get(vs, false).y) )
  assertTrue  ( is_table   (p1:get(vs, true ).y) )

  assertErrorMsgContains(msg[1], p0.get, 1, vs)
  assertErrorMsgContains(msg[1], p0.get, {}, vs)
  assertErrorMsgContains(msg[2], p0.get, p0, 1)
end

function TestObject:testSetVariable()
  local p0 = Object 'p0' {}
  local p1 = p0 'p1' {}
  local vs = {'name', 'x','y','z'}
  local msg = {
    "invalid argument #1 (object expected)",
    "invalid argument #2 (mappable expected)",
    "cannot override variable",
  }

  p0:set { x=1, y=2, z:=3 }
  p1:set { x=-1, y={} }

  assertEquals ( p0:get(vs), { name='p0', x=1 , y=2 , z=3 } )
  assertEquals ( p1:get(vs), { name='p1', x=-1, y={}, z=3 } )

  assertEquals ( p0.get(p0,vs), { name='p0', x=1 , y=2 , z=3 } )
  assertEquals ( p1.get(p1,vs), { name='p1', x=-1, y={}, z=3 } )

  assertEquals(             p0:get(vs, true ).z, 3 )
  assertEquals(             p0:get(vs, nil  ).z, 3 )

  assertTrue  ( is_function(p0:get(vs, false).name) )
  assertTrue  ( is_function(p0:get(vs, false).z) )
  assertFalse ( is_function(p0:get(vs, nil  ).z) )

  assertTrue  ( is_function(p1:get(vs, false).name) )
  assertTrue  ( is_function(p1:get(vs, false).z) )
  assertTrue  ( is_table   (p1:get(vs, false).y) )
  assertTrue  ( is_table   (p1:get(vs, true ).y) )

  assertErrorMsgContains(msg[1], p0.set, 1)
  assertErrorMsgContains(msg[1], p0.set, '')
  assertErrorMsgContains(msg[1], p0.set, {})

  assertErrorMsgContains(msg[2], p0.set, p0, 1)
  assertErrorMsgContains(msg[2], p0.set, p0, '')

  assertErrorMsgContains(msg[3], p0.set, p0, {x=2}, false)
  assertErrorMsgContains(msg[3], p1.set, p1, {y=2}, false)

  p1:set { z=5 }
  assertEquals( p1:get(vs, true).z, 5 )
  assertErrorMsgContains(msg[3], p1.set, p1, {z=2}, false)
end

function TestObject:testSetFunction()
  local p0 = Object 'p0' { z:=3 }
  local p1 = p0 'p1' {}
  local msg = {
    "invalid argument #1 (object expected)",
    "invalid argument #2 (mappable expected)",
    "invalid value (callable expected)",
    "cannot override function",
  }
  p0:set_function { x:=2, y =\s,n s.z*n }

  assertFalse ( is_function(p0.x) )
  assertFalse ( is_function(p0.y) )
  assertFalse ( is_function(p0.z) )
  assertEquals( p0.z, 3 )
  assertFalse ( is_function(p0:get{'z'}.z) )
  assertTrue  ( is_function(p0:get({'z'},false).z) )
  assertTrue  ( is_function(p0.__var.z) )

  assertFalse ( is_function(p1.x) )
  assertFalse ( is_function(p1.y) )
  assertFalse ( is_function(p1.z) )
  assertEquals( p1.x(), 2)
  assertEquals( p1:y(3), 9)

  assertTrue  ( is_table(p1.x) )
  assertTrue  ( is_table(p1.y) )
  assertTrue  ( is_number(p1.z) )

  p1:set_function({ x:=\ 2, y =\s\n s.z*n })

  assertTrue  ( is_table   (p1.x) )
  assertTrue  ( is_function(p1.x()) )
  assertEquals( p1.x()(), 2)

  assertTrue  ( is_table   (p1.y) )
  assertTrue  ( is_function(p1:y()) )
  assertEquals( p1:y()(3), 9)

  p1.y = \s\n s.z*n -- not equivalent to set_function and slower!
  assertFalse ( is_table   (p1.y) )
  assertTrue  ( is_function(p1.y) )
  assertFalse ( is_function(p1.y(3)) )
  assertEquals( p1.y(3), 9)

  assertErrorMsgContains(msg[1], p0.set_function, 1)
  assertErrorMsgContains(msg[1], p0.set_function, '')
  assertErrorMsgContains(msg[1], p0.set_function, {})

  assertErrorMsgContains(msg[2], p0.set_function, p0, 1)
  assertErrorMsgContains(msg[2], p0.set_function, p0, '')

  assertErrorMsgContains(msg[3], p0.set_function, p0, {x=1})
  assertErrorMsgContains(msg[3], p0.set_function, p0, {x=''})

  assertErrorMsgContains(msg[4], p0.set_function, p0, {x:=3}, false)
end

function TestObject:testSetMetamethod()
  local msg = {
    "invalid argument #1 (object expected)",
    "invalid argument #2 (mappable expected)",
    "invalid metatable (class unexpected)",
    "invalid key (metamethod expected)",
    "cannot override metamethod",
  }
  local tostr = \s =>
      local str = ''
      for k,v in pairs(s) do str = str .. tostring(k) .. ', ' end
      return str
    end

  local p0, p1

  p0 = Object 'p0' { 1, 2, z:=3 }
  p1 = p0 'p1' {}

  -- p1 created means p0 is a class and cannot modify its metatable
  assertErrorMsgContains(msg[3], p0.set_metamethod, p0, { __tostring = tostr })

  p0 = Object 'p0' { 1, 2, z:=3 } -- fresh p0
  p0:set_metamethod { __tostring = tostr } -- clone metatable shared with Object
  assertEquals     (tostring(p0), '1, 2, z, __id, ')  -- tostring -> tostr
  assertNotEquals  (tostring(p1), '__id, ')           -- builtin tostring
  assertStrContains(tostring(p1), 'table:')           -- builtin tostring

  -- p1 still the child of old p0 and not yet a class
  p1:set_metamethod { __tostring = tostr } -- clone metatable shared with Object
  assertEquals     (tostring(p1), '__id, ')           -- tostring -> tostr

  p1 = p0 'p1' {} -- fresh p1
  assertErrorMsgContains(msg[5], p1.set_metamethod, p1, { __tostring = tostr })
  p1:set_metamethod({ __tostring = tostr }, true) -- clone need override
  assertEquals      (tostring(p1), '__id, ')          -- tostring -> tostr
  p1:set_function({ x:=\ 2, y =\s\n s.z*n }) p1.z =\ 3
  assertNotEquals   (tostring(p1), 'x, y, z, __id, ') -- tostring -> tostr
  assertEquals      (tostring(p1), 'y, x, __id, z, ') -- tostring -> tostr

  assertErrorMsgContains(msg[1], p0.set_metamethod, 1)
  assertErrorMsgContains(msg[1], p0.set_metamethod, '')
  assertErrorMsgContains(msg[1], p0.set_metamethod, {})

  assertErrorMsgContains(msg[2], p0.set_metamethod, p0, 1)
  assertErrorMsgContains(msg[2], p0.set_metamethod, p0, '')

  assertErrorMsgContains(msg[4], p0.set_metamethod, p0, {x=1})
  assertErrorMsgContains(msg[4], p0.set_metamethod, p0, {y=''})

  assertErrorMsgContains(msg[5], p0.set_metamethod, p0, {__index=false}, false)
end

function TestObject:testGetVarKey()
  local p0 = Object 'p0' { x=1, y=2, z:=3 }
  local p1 = p0 'p1' { x=-1, y={} }
  local msg = {
    "invalid argument #1 (object expected)",
    "invalid argument #2 (object expected)",
    "invalid argument #2 (parent of argument #1 expected)",
  }

  local t = Object:getk() assertEquals ( t, {} ) -- Object is excluded
  t = p0:getk()             table.sort(t) assertEquals (t, {'x','y','z'})
  t = p0:getk(Object)       table.sort(t) assertEquals (t, {'x','y','z'})
  t = p0:getk(Object.__par) table.sort(t) assertEquals (t, {'x','y','z'})

  t = p1:getk()             table.sort(t) assertEquals (t, {'x','y','z'})
  t = p1:getk(p0.__par)     table.sort(t) assertEquals (t, {'x','y','z'})
  t = p1:getk(p0)           table.sort(t) assertEquals (t, {'x','y'})
  t = p1:getk(p1.__par)     table.sort(t) assertEquals (t, {'x','y'})

  assertErrorMsgContains(msg[1], p0.getk, 1)
  assertErrorMsgContains(msg[1], p0.getk, 1, Object)
  assertErrorMsgContains(msg[2], p0.getk, p0, 1)
  assertErrorMsgContains(msg[3], p0.getk, p0, p1)
end

function TestObject:testStrDump()
  local p0 = Object 'p0' { x=1, y=2, z:=3 }
  local p1 = p0 'p1' { x=-1, y={} }
  local msg = {
    "invalid argument #1 (object expected)",
    "invalid argument #2 (object expected)",
    "invalid argument #2 (parent of argument #1 expected)",
    "invalid argument #3 (string expected)",
  }
  local str_p0 =[[
+ [table] 'p0'
  y:  2
  x:  1
  z:  function
]]
  local str_p1 =[[
+ [table] 'p1'
  y:  {}
  x:  -1
  + [table] 'p0'
    y:  2 (*)
    x:  1 (*)
    z:  function
]]

  assertEquals(string.gsub(p0:strdump(), ': 0x%x+', ''), str_p0)
  assertEquals(string.gsub(p1:strdump(), ': 0x%x+', ''), str_p1)

  assertErrorMsgContains(msg[1], p0.strdump, 1)
  assertErrorMsgContains(msg[1], p0.strdump, 1, Object)
  assertErrorMsgContains(msg[2], p0.strdump, p0, 1)
  assertErrorMsgContains(msg[3], p0.strdump, p0, p1)
  assertErrorMsgContains(msg[4], p0.strdump, p0, nil, 1)
end

-- examples test suite --------------------------------------------------------o

function TestObject:testMetamethodForwarding()
  local msg = {
    "invalid argument #1 (forbidden access to 'ro_obj')",
    "invalid argument #2 (boolean or nil expected)",
    "forbidden write access to readonly object",
  }

  local ro_obj = Object {}
  local parent = ro_obj.parent

  ro_obj:set_function {
    set_readonly = \s,f =>
      assert(s ~= ro_obj, msg[1])
      return parent.set_readonly(s,f)
    end
  }
  ro_obj:set_metamethod { __init = \s -> s:set_readonly(true) }
  assertErrorMsgContains(msg[1], ro_obj.set_readonly, ro_obj, true)
  assertFalse( is_readonly(ro_obj) )
  parent.set_readonly(ro_obj, true)
  assertTrue ( is_readonly(ro_obj) )

  local ro_chld = ro_obj {}
  assertTrue ( is_readonly(ro_chld) )
  assertFalse( is_readonly(ro_chld:set_readonly(false)) )
  assertErrorMsgContains(msg[2], ro_chld.set_readonly, ro_chld, 1)
end

function TestObject:testMetamethodNotification()
  local p1 = Object 'p1' { x=1, y=2  }
  local p2 = p1 'p2' { x=2, y=-1, z=0 }

  local function trace (fp, self, k, v)
--[[fp:write("object: '", self.name,
             "' is updated for key: '", tostring(k),
             "' with value: ")
    if type(v) == "string"
      then fp:write(": '", tostring(v), "'\n")
      else fp:write(":  ", tostring(v),  "\n") end
]]  end

  local function set_notification (self, file)
    local fp = file or io.stdout
    local mt = getmetatable(self)
    local nwidx = mt and rawget(mt, '__newindex')
    local mm = function (self, k, v)
      trace(fp, self, k, v) -- logging
      nwidx(    self, k, v) -- forward
    end
    self:set_metamethod({__newindex=mm}, true) -- override!
  end

  set_notification(p2) -- new metamethod created, metatable is cloned
  p2.x = 3 -- new behavior, notify about update

  local p3 = p2 'p3' { x=3  } -- new, inherit metatable
  p3.x = 4 -- new behavior, notify about update

  local p4 = p2 'p4' { x=4 } -- new, inherit metatable
  p4.x = 5 -- new behavior, notify about update
end

function TestObject:testMetamethodCounting()
  local count = 0
  local set_counter = \s s:set_metamethod {
    __init = \s => count=count+1 ; return s end
  }

  local o0 = Object 'o0' {}          set_counter(o0)
  local o1 = o0 'o1' { a = 2 }       assertEquals( count, 1 )
  local o2 = o1 'o2' { a = 2 }       assertEquals( count, 2 )
  local a = Object 'a' { x = o2.a }  assertEquals( count, 2 )
end

-- performance test suite -----------------------------------------------------o

Test_Object = {}

function Test_Object:testPrimes()
  local Primes = Object {}

  Primes:set_function {
    isPrimeDivisible = \s,c =>
      for i=3, s.prime_count do
        if s.primes[i] * s.primes[i] > c then break end
        if c % s.primes[i] == 0 then return true end
      end
      return false
    end,

    addPrime = \s,c =>
      s.prime_count = s.prime_count + 1
      s.primes[s.prime_count] = c
    end,

    getPrimes = \s,n =>
      s.prime_count, s.primes = 3, { 1,2,3 }
      local c = 5
      while s.prime_count < n do
        if not s:isPrimeDivisible(c) then
          s:addPrime(c)
        end
        c = c + 2
      end
    end
  }

  local p = Primes {}
  local t0 = os.clock()
  p:getPrimes(2e5)
  local dt = os.clock() - t0
  assertEquals( p.primes[p.prime_count], 2750131 )
  assertAlmostEquals( dt , 0.5, 1 )
end

function Test_Object:testDuplicates()
  local DupFinder = Object {}

  DupFinder:set_function {
    find_duplicates = \s,res =>
      for _,v in ipairs(s) do
        res[v] = res[v] and res[v]+1 or 1
      end
      for _,v in ipairs(s) do
        if res[v] and res[v] > 1 then
          res[#res+1] = v
        end
        res[v] = nil
      end
    end,

    clear = \s =>
      for i=1,#s do s[i]=nil end
      return s
    end
  }

  local inp = DupFinder {'b','a','c','c','e','a','c','d','c','d'}
  local out = DupFinder {'a','c','d'}
  local res = DupFinder {}

  local t0 = os.clock()
  for i=1,5e5 do inp:find_duplicates(res:clear()) end
  local dt = os.clock() - t0
  assertEquals( res, out )
  assertAlmostEquals( dt , 0.5, 1 )
end

function Test_Object:testLinkedList()
  local List = Object {}
  local nxt = {}

  local function generate(n)
    local t = List {x=1}
    for j=1,n do t = List {[nxt]=t} end
    return t
  end

  local function find(t,k)
    if t[k] ~= nil then return t[k] end
    return find(t[nxt],k)
  end

  local l, s, n = generate(10), 0, 1e6
  local t0 = os.clock()
  for i=1,n do s = s + find(l, 'x') end
  local dt = os.clock() - t0
  assertEquals( s, n )
  assertAlmostEquals( dt, 0.5, 1 )
end

-- end ------------------------------------------------------------------------o
