--[=[
 o-----------------------------------------------------------------------------o
 |
 | Utils regression tests
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the utils module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNil, assertNotNil, assertTrue, assertFalse, assertEquals,
      assertAlmostEquals, assertErrorMsgContains in require 'luaunit'

local is_nil, is_boolean, is_number, is_string, is_function, is_table, is_cdata,
      is_complex, is_range, is_infinite, is_nan, is_integer, is_scalar,
      is_rawtable, is_metaname, get_metatable, has_metatable, has_member,
      has_method, has_metamethod, is_same, same, tostring, totable, option,
      compose, pi, log, eps in MAD

local has_length, is_iterable, is_mappable, is_indexable, is_callable,
      is_comparable, is_ordered, is_concatenable, is_stringable, is_tablable,
      is_negatable, is_addable, is_substractable, is_multiplicable,
      is_dividable, is_modulable, is_powerable in MAD.concept

local btst, bclr, bset, band, bxor, tobit in MAD.operator

local sm = setmetatable

-- regression test suite ------------------------------------------------------o

TestUtils = {}

local types = {
  boolean    = { false, true, 1==1, 0<1, 1<0 },
  number     = { 0.1, 0.01, -0.1, -0.01, 2^-32, 2^-53, 2^52+1, -2^52-1 },
  string     = { '', '""', "''", "\"", '\'', '0', 'inf', 'nan', 'false' },
['function'] = { \ (), \ false, \ 0, \ '0', \\ (), \{}, \\{}, \ 0..0, \ 0i },
  table      = { {}, {false}, {0}, {'0'}, {\ ()}, {{}}, {\{}}, {0..0}, {0i} },
  range      = { 0..0, 0..0.1, 0.1..0, 1..2..0.1, -0.2..-0.1..0.1 },
  complex    = { 0i, 1i, 10i, 0.1i, -0i, -1i, -10i, -0.1i },
  integer    = { 0, 1, 2^32, 2^52, -0, -1, -2^32, -2^52, 2^52+0.1 },
  inf        = { 1/0, -1/0, tonumber('inf'), tonumber('Inf'), tonumber('INF'),
             tonumber('Infinity'), tonumber('infinity'), tonumber('INFINITY') },
  nan        = { 0/0, 1/0*0, (1/0)/(1/0), 1/0-1/0, 1/0+-1/0,
                 tonumber('nan'), tonumber('NaN') },
}

local function assertTypes (tkey, tfunc, tskip, ...)
  tkey = is_string(tkey) and {tkey} or tkey
  tskip = is_nil(tskip) and {} or tskip
  for _,s in ipairs(tkey) do
    tkey[s] = assertTrue
  end
  for k,t in pairs(types) do
    if is_nil(tskip[k]) then
      for i,v in ipairs(t) do
        local r = tfunc(v, ...)
        if r ~= (tkey[k] and true or false) then
          print('broken case:', k,i,v,r) ! print the faulty case before assertion
        end
        (tkey[k] or assertFalse) ( r )
      end
    end
  end
end

function TestUtils:testBtst()
  for i=0,31 do
    assertTrue( btst(0xffffffff, i) )
  end

  for i=0,31 do
    if i >= 16 and i < 24
    then assertFalse( btst(0xff00ffff, i) )
    else assertTrue ( btst(0xff00ffff, i) )
    end
  end

  assertFalse( btst(0x00000000, -32 ) )
  assertFalse( btst(0x00000000, -31 ) )
  assertFalse( btst(0x00000000, -30 ) )
  assertFalse( btst(0x00000000, - 2 ) )
  assertFalse( btst(0x00000000, - 1 ) )
  assertFalse( btst(0x00000000,   0 ) )
  assertFalse( btst(0x00000000,   1 ) )
  assertFalse( btst(0x00000000,   2 ) )
  assertFalse( btst(0x00000000,  30 ) )
  assertFalse( btst(0x00000000,  31 ) )
  assertFalse( btst(0x00000000,  32 ) )
  assertTrue ( btst(0x00000001, -32 ) )
  assertFalse( btst(0x00000001, -31 ) )
  assertFalse( btst(0x00000001, -30 ) )
  assertFalse( btst(0x00000001, - 2 ) )
  assertFalse( btst(0x00000001, - 1 ) )
  assertTrue ( btst(0x00000001,   0 ) )
  assertFalse( btst(0x00000001,   1 ) )
  assertFalse( btst(0x00000001,   2 ) )
  assertFalse( btst(0x00000001,  30 ) )
  assertFalse( btst(0x00000001,  31 ) )
  assertTrue ( btst(0x00000001,  32 ) )
  assertFalse( btst(0x80000000, -32 ) )
  assertFalse( btst(0x80000000, -31 ) )
  assertFalse( btst(0x80000000, -30 ) )
  assertFalse( btst(0x80000000, - 2 ) )
  assertTrue ( btst(0x80000000, - 1 ) )
  assertFalse( btst(0x80000000,   0 ) )
  assertFalse( btst(0x80000000,   1 ) )
  assertFalse( btst(0x80000000,   2 ) )
  assertFalse( btst(0x80000000,  30 ) )
  assertTrue ( btst(0x80000000,  31 ) )
  assertFalse( btst(0x80000000,  32 ) )
  assertFalse( btst(0xfffffffe, -32 ) )
  assertTrue ( btst(0xfffffffe, -31 ) )
  assertTrue ( btst(0xfffffffe, -30 ) )
  assertTrue ( btst(0xfffffffe, - 2 ) )
  assertTrue ( btst(0xfffffffe, - 1 ) )
  assertFalse( btst(0xfffffffe,   0 ) )
  assertTrue ( btst(0xfffffffe,   1 ) )
  assertTrue ( btst(0xfffffffe,   2 ) )
  assertTrue ( btst(0xfffffffe,  30 ) )
  assertTrue ( btst(0xfffffffe,  31 ) )
  assertFalse( btst(0xfffffffe,  32 ) )
  assertTrue ( btst(0x7fffffff, -32 ) )
  assertTrue ( btst(0x7fffffff, -31 ) )
  assertTrue ( btst(0x7fffffff, -30 ) )
  assertTrue ( btst(0x7fffffff, - 2 ) )
  assertFalse( btst(0x7fffffff, - 1 ) )
  assertTrue ( btst(0x7fffffff,   0 ) )
  assertTrue ( btst(0x7fffffff,   1 ) )
  assertTrue ( btst(0x7fffffff,   2 ) )
  assertTrue ( btst(0x7fffffff,  30 ) )
  assertFalse( btst(0x7fffffff,  31 ) )
  assertTrue ( btst(0x7fffffff,  32 ) )
  assertTrue ( btst(0xffffffff, -32 ) )
  assertTrue ( btst(0xffffffff, -31 ) )
  assertTrue ( btst(0xffffffff, -30 ) )
  assertTrue ( btst(0xffffffff, - 2 ) )
  assertTrue ( btst(0xffffffff, - 1 ) )
  assertTrue ( btst(0xffffffff,   0 ) )
  assertTrue ( btst(0xffffffff,   1 ) )
  assertTrue ( btst(0xffffffff,   2 ) )
  assertTrue ( btst(0xffffffff,  30 ) )
  assertTrue ( btst(0xffffffff,  31 ) )
  assertTrue ( btst(0xffffffff,  32 ) )
end

function TestUtils:testBclr()
  local
  a = 0xffffffff for i=0,31 do a = bclr(a, i) end
  assertEquals( a, 0 )

  a = 0xffffffff for i=16,23 do a = bclr(a, i) end
  assertEquals( a, tobit(0xff00ffff) )

  local t = {0x00000000,0x00000001,0x80000000,0xfffffffe,0x7fffffff,0xffffffff}
  local n = {-32, -31, -30, -2, -1, 0, 1, 2, 30, 31, 32}

  for _,v in ipairs(t) do
  for _,i in ipairs(n) do
    local r = bxor(v, bclr(v, i))
    if btst(v,i)
    then for b=0,31 do assertEquals( btst(r,b), b == (i+32)%32 ) end
    else for b=0,31 do assertFalse ( btst(r,b) ) end
    end
  end end
end

function TestUtils:testBset()
  local
  a = 0 for i=0,31 do a = bset(a, i) end
  assertEquals( a, tobit(0xffffffff) )

  a = 0 for i=16,23 do a = bset(a, i) end
  assertEquals( a, tobit(0x00ff0000) )

  local t = {0x00000000,0x00000001,0x80000000,0xfffffffe,0x7fffffff,0xffffffff}
  local n = {-32, -31, -30, -2, -1, 0, 1, 2, 30, 31, 32}

  for _,v in ipairs(t) do
  for _,i in ipairs(n) do
    local r = bxor(v, bset(v, i))
    if btst(v,i)
    then for b=0,31 do assertFalse ( btst(r,b) ) end
    else for b=0,31 do assertEquals( btst(r,b), b == (i+32)%32 ) end
    end
  end end
end

function TestUtils:testIsNil()
  assertTrue( is_nil(nil) )
  assertTrue( is_nil(___) )
end

function TestUtils:testIsBoolean()
  assertTypes( 'boolean', is_boolean )
end

function TestUtils:testIsNumber()
  assertTypes( {'number', 'integer', 'inf', 'nan'}, is_number )
end

function TestUtils:testIsNumber2()
  local t = {'number', 'complex', 'integer', 'inf', 'nan'}
  local f = compose(is_number, tonumber)
  assertTypes( t, f, {string=true} )

  assertFalse( f(types.string[1]) )
  assertFalse( f(types.string[2]) )
  assertFalse( f(types.string[3]) )
  assertFalse( f(types.string[4]) )
  assertFalse( f(types.string[5]) )
  assertTrue ( f(types.string[6]) )
  assertTrue ( f(types.string[7]) )
  assertTrue ( f(types.string[8]) )
  assertFalse( f(types.string[9]) )
end

function TestUtils:testIsString()
  assertTypes( 'string', is_string )
end

function TestUtils:testIsString2()
  local t = {} ; for k in pairs(types) do t[#t+1] = k end
  assertTypes( t, compose(is_string, tostring) )
end

function TestUtils:testIsFunction()
  assertTypes( 'function', is_function )
end

function TestUtils:testIsTable()
  assertTypes( 'table', is_table )
end

function TestUtils:testIsCData()
  assertTypes( {'complex', 'range'}, is_cdata )
end

function TestUtils:testIsComplex()
  assertTypes( 'complex', is_complex )
end

function TestUtils:testIsRange()
  assertTypes( 'range', is_range )
end

function TestUtils:testIsInf()
  assertTypes( 'inf', is_infinite )
  assertTrue ( is_infinite( 1/0 ) )
  assertTrue ( is_infinite(-1/0 ) )
  assertFalse( is_infinite('inf') )
  assertFalse( is_infinite('Inf') )
  assertFalse( is_infinite('inf'*0) )
  assertFalse( is_infinite('Inf'*0) )
  assertTrue ( is_infinite('inf'/0) )
  assertTrue ( is_infinite('Inf'/0) )
end

function TestUtils:testIsNan()
  assertTypes( 'nan', is_nan )
  assertFalse( is_nan( 1/0 ) )
  assertFalse( is_nan(-1/0 ) )
  assertFalse( is_nan('nan') )
  assertFalse( is_nan('NaN') )
  assertTrue ( is_nan('nan'*0) )
  assertTrue ( is_nan('NaN'*0) )
  assertTrue ( is_nan('nan'/0) )
  assertTrue ( is_nan('NaN'/0) )
end

function TestUtils:testIsInteger()
  assertTypes( 'integer', is_integer )
end

function TestUtils:testIsScalar()
  assertTypes( {'number', 'complex', 'integer', 'inf', 'nan'}, is_scalar )
end

function TestUtils:testIsRawtable()
  assertTypes( 'table', is_rawtable )
  assertFalse( is_rawtable(sm({},{})) )
end

function TestUtils:testIsMetaname()
  local meta = {
    '__add', '__call', '__concat', '__div', '__eq', '__gc', '__index', '__init',
    '__ipairs', '__le', '__len', '__lt', '__metatable', '__mod', '__mode',
    '__mul', '__new', '__newindex', '__pairs', '__pow', '__sub', '__tostring',
    '__totable', '__unm',
  }
  for _,s in ipairs(meta) do
    assertTrue( is_metaname(s) )
  end
  for _,s in ipairs(meta) do
    assertFalse( is_metaname(s:sub(3)) )
  end
end

function TestUtils:testGetmetatable()
  local t = {'boolean', 'number', 'function', 'table', 'integer', 'inf', 'nan'}
  local gm = MAD.get_metatable
  assertTypes( t, compose(is_nil, gm) )
  assertTypes( {'string', 'complex', 'range'}, \a gm(a)~=nil )
  assertTypes( 'complex', \a gm(a)==gm(0i) )
  assertTypes( 'range' , \a gm(a)==gm(0..0) )
end

function TestUtils:testHasMetatable()
  assertTypes( {'string', 'complex', 'range'}, has_metatable )
  assertTrue ( has_metatable(sm({},{})) )
  assertFalse( has_metatable(sm({},nil)) )
  assertTrue ( has_metatable(sm({},{__metatable=nil})) )
  assertTrue ( has_metatable(sm({},{__metatable=false})) )
end

function TestUtils:testHasLength()
  assertTypes( {'string', 'table', 'range'}, has_length )
  assertTrue ( has_length(sm({},{})) )
  assertTrue ( has_length(sm({},nil)) )
  assertTrue ( has_length(sm({},{__len=nil})) )
  assertTrue ( has_length(sm({},{__len=false})) )
end

function TestUtils:testIsIterable()
  assertTypes( {'table', 'range'}, is_iterable )
  assertTrue ( is_iterable(sm({},{})) ) ! fake: tables are always iterable
  assertTrue ( is_iterable(sm({},{__ipair:=nil})) )
  assertTrue ( is_iterable(sm({},{__pairs:=nil})) )
  assertFalse( is_iterable("hello") )
end

function TestUtils:testIsMappable()
  assertTypes( {'table'}, is_mappable )
  assertTrue ( is_mappable(sm({},{})) ) ! fake: tables are always mappable
  assertTrue ( is_mappable(sm({},{__ipair:=nil})) )
  assertTrue ( is_mappable(sm({},{__pairs:=nil})) )
  assertFalse( is_mappable("hello") )
  assertFalse( is_mappable(1..2) )
end

function TestUtils:testIndexable()
  assertTypes( {'string', 'table', 'complex', 'range'}, is_indexable )
  assertTrue ( is_indexable(sm({},{})) ) ! fake: tables are always indexable
  assertTrue ( is_indexable(sm({},{__index:=nil})) )
  assertTrue ( is_indexable(sm({},{__newindex:=nil})) )
  assertTrue ( is_indexable("hello") )
end

function TestUtils:testIsCallable()
  assertTypes( {'function'}, is_callable )
  assertFalse( is_callable(sm({},{})) )
  assertTrue ( is_callable(sm({},{__call:=nil})) )
end

function TestUtils:testIsComparable()
  assertTypes( {'number','string','complex','range','integer','inf','nan'},
               is_comparable )
  assertFalse( is_comparable(sm({},{})) )
  assertTrue ( is_comparable(sm({},{__eq:=nil})) )
end

function TestUtils:testIsOrdered()
  assertTypes( {'number', 'string', 'integer', 'inf', 'nan'}, is_ordered )
  assertFalse( is_ordered(sm({},{})) )
  assertTrue ( is_ordered(sm({},{__lt:=nil})) )
  assertTrue ( is_ordered(sm({},{__le:=nil})) )
end

function TestUtils:testIsConcatenable()
  assertTypes( 'string', is_concatenable )
  assertFalse( is_concatenable(sm({},{})) )
  assertTrue ( is_concatenable(sm({},{__concat:=nil})) )
end

function TestUtils:testIsStringable()
  assertTypes( {'complex', 'range'}, is_stringable )
  assertFalse( is_stringable(sm({},{})) )
  assertTrue ( is_stringable(sm({},{__tostring:=nil})) )
end

function TestUtils:testIsTablable()
  assertTypes( 'range', is_tablable )
  assertFalse( is_tablable(sm({},{})) )
  assertTrue ( is_tablable(sm({},{__totable:=nil})) )
end

function TestUtils:testIsNegatable()
  assertTypes( {'number', 'integer', 'complex', 'range', 'inf', 'nan'},
               is_negatable )
  assertFalse( is_negatable(sm({},nil)) )
  assertFalse( is_negatable(sm({},{})) )
  assertTrue ( is_negatable(sm({},{__unm:=nil})) )
end

function TestUtils:testIsAddable()
  assertTypes( {'number', 'integer', 'complex', 'inf', 'nan'}, is_addable )
  assertFalse( is_addable(sm({},nil)) )
  assertFalse( is_addable(sm({},{})) )
  assertTrue ( is_addable(sm({},{__add:=nil})) )
end

function TestUtils:testIsSubtractable()
  assertTypes( {'number', 'integer', 'complex', 'inf', 'nan'}, is_substractable)
  assertFalse( is_substractable(sm({},nil)) )
  assertFalse( is_substractable(sm({},{})) )
  assertTrue ( is_substractable(sm({},{__sub:=nil})) )
end

function TestUtils:testIsMultiplicable()
  assertTypes( {'number', 'integer', 'complex', 'inf', 'nan'}, is_multiplicable)
  assertFalse( is_multiplicable(sm({},nil)) )
  assertFalse( is_multiplicable(sm({},{})) )
  assertTrue ( is_multiplicable(sm({},{__mul:=nil})) )
end

function TestUtils:testIsDividable()
  assertTypes( {'number', 'integer', 'complex', 'inf', 'nan'}, is_dividable )
  assertFalse( is_dividable(sm({},nil)) )
  assertFalse( is_dividable(sm({},{})) )
  assertTrue ( is_dividable(sm({},{__div:=nil})) )
end

function TestUtils:testIsModulable()
  assertTypes( {'number', 'integer', 'complex', 'inf', 'nan'}, is_modulable )
  assertFalse( is_modulable(sm({},nil)) )
  assertFalse( is_modulable(sm({},{})) )
  assertTrue ( is_modulable(sm({},{__mod:=nil})) )
end

function TestUtils:testIsPowerable()
  assertTypes( {'number', 'integer', 'complex', 'inf', 'nan'}, is_powerable )
  assertFalse( is_powerable(sm({},nil)) )
  assertFalse( is_powerable(sm({},{})) )
  assertTrue ( is_powerable(sm({},{__pow:=nil})) )
end

function TestUtils:testHasMember()
  assertTypes( {'complex', 'range'}, has_member, nil, 'log')
  assertFalse( has_member({}, 'none') )
  assertFalse( has_member({none=nil}  , 'none') )
  assertTrue ( has_member({none=false}, 'none') )
  assertTrue ( has_member({none=true} , 'none') )
end

function TestUtils:testHasMethod()
  assertTypes( {'complex', 'range'}, has_method, nil, 'log')
  assertFalse( has_method({}, 'none') )
  assertFalse( has_method({none=nil}   , 'none') )
  assertFalse( has_method({none=false} , 'none') )
  assertFalse( has_method({none=true}  , 'none') )
  assertTrue ( has_method({none:=false}, 'none') )
  assertTrue ( has_method({none:=true} , 'none') )
  assertTrue ( has_method({none:=nil}   , 'none') )
end

function TestUtils:testHasMetamethod()
  local is_collectable = \s has_metamethod(s,'__gc')
  assertTypes( '', is_collectable )
  assertFalse( is_collectable(sm({},{})) )
  assertTrue ( is_collectable(sm({},{__gc:=nil})) )
  local has_constructor = \s has_metamethod(s,'__new')
  assertTypes( '', has_constructor )
  assertFalse( has_constructor(sm({},{})) )
  assertFalse( has_constructor(sm({},nil)) )
  assertFalse( has_constructor(sm({},{__new=nil})) )
  assertFalse( has_constructor(sm({},{__new=false})) )
  assertTrue ( has_constructor(sm({},{__new:=nil})) )
end

function TestUtils:testIsSame()
  local t = {} ; for k in pairs(types) do t[#t+1] = k end
  local i, j = 1, 0
  local chk = \s =>
    if j >= #types[t[i]] then i, j = i+1, 1 else j = j+1 end
    return is_same(s, types[t[i]][1])
  end

  assertTypes( t, chk )
end

function TestUtils:testSame()
  local t = {} ; for k in pairs(types) do t[#t+1] = k end
  local i, j = 1, 0
  local chk = \s =>
    if j >= #types[t[i]] then i, j = i+1, 1 else j = j+1 end
    return is_same(same(s), types[t[i]][1])
  end

  assertTypes( t, chk )
end

function TestUtils:testToString()
  local format in option -- save
  option.format = '%.10f'
  assertEquals ( tostring(1/3 ), '0.3333333333')
  assertEquals ( tostring(1/3i), '0.0000000000-0.3333333333i')
  option.format = '%.13f'
  assertEquals ( tostring(1/3 ), '0.3333333333333')
  assertEquals ( tostring(1/3i), '0.0000000000000-0.3333333333333i')
  option.format = '%-2.4e'
  assertEquals ( tostring(1/(0.5+3i)), '5.4054e-02-3.2432e-01i')
  assertEquals ( tostring(0.5+ 1/3i ), '5.0000e-01-3.3333e-01i')
  option.format = format
end

function TestUtils:testToTable()
  assertEquals ( totable(pi), {pi} )
  assertEquals ( totable("hello"), {'h', 'e', 'l', 'l', 'o'} )
  assertEquals ( totable(1i), {1i} )
  assertEquals ( totable(1..5), {1, 2, 3, 4, 5} )
  local t = totable(log(1..10000..10))
  assertAlmostEquals ( t[1]/1     - 1, 0,   0   )
  assertAlmostEquals ( t[2]/10    - 1, 0,   eps )
  assertAlmostEquals ( t[3]/100   - 1, 0, 2*eps )
  assertAlmostEquals ( t[4]/1000  - 1, 0, 3*eps )
  assertAlmostEquals ( t[5]/10000 - 1, 0, 4*eps )
end

-- end ------------------------------------------------------------------------o
