--[=[
 o-----------------------------------------------------------------------------o
 |
 | Plot module regression tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the plot module.

 o-----------------------------------------------------------------------------o
]=]

local plot in MAD

-- locals ---------------------------------------------------------------------o

local track, beam, functor, option, survey              in MAD
local assertNil, assertNotNil, assertTrue, assertEquals in MAD.utest
local drift, marker, quadrupole, sequence               in MAD.element

-- plotting -------------------------------------------------------------------o

local tbl = MAD.mtable 'to_plot'{ {'name'}, 'x', 'y', 'z' }
tbl = tbl + {'d', 1 , 1 *2, 1 *3}
tbl = tbl + {'d', 2 , 2 *2, 2 *3}
tbl = tbl + {'d', 3 , 3 *2, 3 *3}
tbl = tbl + {'d', 4 , 4 *2, 4 *3}
tbl = tbl + {'d', 5 , 5 *2, 5 *3}
tbl = tbl + {'d', 6 , 6 *2, 6 *3}
tbl = tbl + {'d', 7 , 7 *2, 7 *3}
tbl = tbl + {'d', 8 , 8 *2, 8 *3}
tbl = tbl + {'d', 9 , 9 *2, 9 *3}
tbl = tbl + {'d', 10, 10*2, 10*4}

-- LHC
--[[
local function loadLHC()
  assertNotNil(require 'lhc_as-built_gen')
  assertNotNil(require 'lhc_as-built_set')
  assertNotNil(require 'lhc_undefvar'    )
  assertNotNil(require 'opt_inj_gen'     )

  local lhcb1, lhcb2 in MADX
  assertEquals(#lhcb1, 6675)
  assertEquals(#lhcb2, 6674)
  return lhcb1, lhcb2
end

local lhcb1, lhcb2 = loadLHC()
local beam = beam { particle='proton', energy=450 }
local tblLHC, map = track { sequence=lhcb1, beam=beam }
]]

--SPS line
local pi in math
local marker, drift, monitor, hkicker, vkicker, multipole in MAD.element
local sbend, quadrupole,  sextupole, patch, sequence      in MAD.element
local circum = 6912.0
local ncell  = 108
local lcell  = circum/ncell
local lsb    = 3.       -- arc length of dipole
local lquad  = 3.085
local lquad2 = lquad/2.
local lsex   = 1.0
local ip  = marker     'ip'{}
local dr = drift      'dr'{}
--  local asb = 0.010    -- angle
local asb = 2.0*pi/(8*108)
--  local sb  = sbend     'sb'{ l:=lsb, angle = asb }
local sb  = multipole     'sb'{ knl = asb }
local kqf  =  1.4631475E-02
local kqd  = -1.4643443E-02
local qf  = quadrupole 'qf'{ l=lquad, k1:= kqf }
local qd  = quadrupole 'qd'{ l=lquad, k1:= kdf }
local ksf =  2.0284442E-02
local ksd = -3.8394267E-02
local sf  = sextupole 'sf' {l=lsex,  k2:=ksf}
local sd  = sextupole 'sd' {l=lsex,  k2:=ksd}
local bpm = monitor 'bpm'  {l=0.1}
local ch  = hkicker 'ch'   {l=0.1}
local cv  = vkicker 'vh'   {l=0.1}
local seq = sequence 'fodo1' {l = lcell, dir =1, refer = 'centre',
  ip  'IP1'  { at = 0        },
  qf  'QF1'  { at = lquad2},
  sf  'SF1'  { at = lquad2   +  2.5},
  ch  'CH1'  { at = lquad2   +  3.1},
  bpm 'BPM1' { at = lquad2   +  3.2},
  sb  'SB1'  { at = lquad2   +  3.5},
  sb  'SB2'  { at = lquad2   +  9.9},
  sb  'SB3'  { at = lquad2   +  22.1},
  sb  'SB4'  { at = lquad2   +  28.5},
  qd  'QD1'  { at = lquad2   +  32},
  sd  'SD1'  { at = lquad2   +  34.5},
  cv  'CV1'  { at = lquad2   +  35.1},
  bpm 'BPM2' { at = lquad2   +  35.2},
  sb  'SB1'  { at = lquad2   +  35.5},
  sb  'SB2'  { at = lquad2   +  41.9},
  sb  'SB3'  { at = lquad2   +  54.1},
  sb  'SB4'  { at = lquad2   +  60.5},
  ip  'IP2'  { at = lcell    },
}

local tblSPS = survey { sequence=seq, X0={-1e-4, 2e-6, 0}, A0={1, 2, 3e-7}}

-- FODO
local lcell= 20
local lquad= 5
local ip   = marker     'ip'{}
local kqf  =  1.4631475E-02
local kqd  = -1.4643443E-02
local qf   = quadrupole 'qf'{ l=lquad, k1:= kqf, tilt = 4e-6 }
local qd   = quadrupole 'qd'{ l=lquad, k1:= kdf }
local seq = sequence 'fodo1'{l = lcell, refer = 'entry',
  ip 'IP1' { at = 0     },
  qf 'QF1' { at = 0},
  qd 'QD1' { at = 15},
  ip 'IP2' { at = lcell },
}
local tblFODO = survey { sequence=seq, X0={-1e-4, 2e-6, 0}, A0={1, 2, 3e-7}}

-- plotting

--plot( tbl, {'x'}, {'y', 'z'}, nil, 1..9 )
--plot( tblFODO, {'s'}, {'z', 'y','x'}, true)
plot( tblSPS , {'s'}, {'z', 'y','x'}, true)
--plot( tblLHC , {'s'}, {'x'}, true, 1..100)


-- end ------------------------------------------------------------------------o
