--[=[
 o-----------------------------------------------------------------------------o
 |
 | Range module regression tests - logrange
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the range module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertEquals, assertAlmostEquals, assertTrue, assertFalse,
      assertErrorMsgContains, assertNil, assertNaN, assertIsString, 
      assertInf, assertAllAlmostEquals in MAD.utest

local range, nrange, logrange, nlogrange, totable   in MAD
local exp, log                                      in MAD.gmath
local is_function, is_range, is_logrange            in MAD.typeid
local tiny, eps, huge, inf, nan                     in MAD.constant

-- regression test suite ------------------------------------------------------o

TestLogrange = {}

local values = {
  lim    = { huge, tiny, eps },
  num    = {2^-64, 2^-63, 2^-53, eps, 2^-52, 2*eps, 2^-32, 2^-31, 1e-9,
            0.1-eps, 0.1, 0.1+eps, 0.5, 0.7-eps, 0.7, 0.7+eps, 1-eps, 1+eps,
            1.1, 1.7, 2, 10, 1e2, 1e3, 1e6, 1e9, 2^31, 2^32, 2^52, 2^53,
            2^63, 2^64 },
  lrng =   {
           { 10^5, 1    , 0.1},
           { 1   , 10^5 , 10 },
           { 1   , 10^-5, 0.1},
           },
  lempty = {
           { 10^5, 1    , 10 },
           { 1   , 10^5 , 0.1},
           { 1   , 10^-5, 10 },
           },
  nlrng =  {
           { 10^5, 1    , 100 },
           { 1   , 10^5 , 100 },
           { 1   , 10^-5, 100 },
           },
}

function TestLogrange:testRawCtor()
  assertTrue( is_logrange( log(0..9..0.5)      ) )
  assertTrue( is_logrange( log(0..9..0.5)      ) )
  assertTrue( is_logrange( log(0..9.. .5)      ) )
  assertTrue( is_logrange( log(0..0.9..0.5)    ) )
  assertTrue( is_logrange( log(0.. .9.. .5)    ) )
  assertTrue( is_logrange( log(0.1..0.9..0.5)  ) )
  assertTrue( is_logrange( log( .1.. .9.. .5)  ) )
  assertTrue( is_logrange( log(0..9..-0.5)     ) )
  assertTrue( is_logrange( log(0..9..- .5)     ) )
  assertTrue( is_logrange( log(0..-0.9..0.5)   ) )
  assertTrue( is_logrange( log(0..- .9.. .5)   ) )
  assertTrue( is_logrange( log(-0.1..0.9..0.5) ) )
  assertTrue( is_logrange( log(- .1.. .9.. .5) ) )
end

function TestLogrange:testReadonly()
  local f1, f2, f3
  local msg = {
    "attempt to write to constant location",
  }
  for _,v in ipairs(values.num) do
    f1=\r,v => r.logstart = v end
    assertErrorMsgContains( msg[1], f1, log( 1..10..0.1), v )
    f2=\r,v => r.logstop  = v end
    assertErrorMsgContains( msg[1], f1, log( 1..10..0.1), v )
    f3=\r,v => r.logstep  = v end
    assertErrorMsgContains( msg[1], f1, log( 1..10..0.1), v )
  end
end

function TestLogrange:testRanges()
  local lr
  for _,v in ipairs(values.num) do
    lr = log( 1..10..v)
    assertEquals( {lr:ranges()}, {exp(lr.logstart), exp(lr.logstop), exp(lr.logstep)} )
  end
  for _,v in ipairs(values.lim) do
    lr = log( 1..10..v)
    assertEquals( {lr:ranges()}, {exp(lr.logstart), exp(lr.logstop), exp(lr.logstep)} )
  end
  for _,v in ipairs(values.lrng) do
    lr = log(v[1]..v[2]..v[3])
    assertEquals( {lr:ranges()}, {exp(lr.logstart), exp(lr.logstop), exp(lr.logstep)} )
  end
  for _,v in ipairs(values.lempty) do
    lr = log(v[1]..v[2]..v[3])
    assertEquals( {lr:ranges()}, {exp(lr.logstart), exp(lr.logstop), exp(lr.logstep)} )
  end
end

function TestLogrange:testFields()
  local lr
  lr = { log(1..1):ranges() }
  assertAlmostEquals( lr[1] / 1  - 1    , 0, eps )
  assertAlmostEquals( lr[2] / 1  - 1    , 0, eps )
  assertAlmostEquals( lr[3] / exp(1) - 1, 0, eps )

  lr = { log(1..10):ranges() }
  assertAlmostEquals( lr[1] / 1  - 1    , 0, eps )
  assertAlmostEquals( lr[2] / 10 - 1    , 0, eps )
  assertAlmostEquals( lr[3] / exp(1) - 1, 0, eps )

  lr = { log(1..10..huge):ranges() }
  assertAlmostEquals( lr[1] / 1    - 1, 0,     eps )
  assertAlmostEquals( lr[2] / 10   - 1, 0,     eps )
  assertAlmostEquals( lr[3] / huge - 1, 0, 107*eps )

  lr = { log( 1..10..tiny ):ranges() }
  assertAlmostEquals( lr[1] / 1    - 1, 0,     eps )
  assertAlmostEquals( lr[2] / 10   - 1, 0,     eps )
  assertAlmostEquals( lr[3] / tiny - 1, 0, 124*eps )

  for _,v in ipairs(values.lrng)do
    lr = { log(v[1]..v[2]..v[3]):ranges() }
    assertAlmostEquals( lr[1] / v[1] -1, 0,   eps )
    assertAlmostEquals( lr[2] / v[2] -1, 0, 2*eps )
    assertAlmostEquals( lr[3] / v[3] -1, 0,   eps )
  end
  for _,v in ipairs(values.lempty) do
    lr = { log(v[1]..v[2]..v[3]):ranges() }
    assertAlmostEquals( lr[1] / v[1] -1, 0,   eps )
    assertAlmostEquals( lr[2] / v[2] -1, 0, 2*eps )
    assertAlmostEquals( lr[3] / v[3] -1, 0,   eps )
  end
  for _,v in ipairs(values.num) do
    lr = { log( 1..10..v):ranges() }
    assertEquals( lr[1], 1  )
    assertAlmostEquals( lr[2] / 10 - 1, 0, eps )
    if v == 1 then
      assertAlmostEquals( lr[3] / exp(1) - 1, 0,    eps )
    else
      assertAlmostEquals( lr[3] / v      - 1, 0, 15*eps )
    end
  end
end

function TestLogrange:testNanAndInf()
  local lr
  lr = { log(1  .. 10 .. nan):ranges() }
  assertAlmostEquals( lr[1] / lr[1] - 1, 0, eps )
  assertAlmostEquals( lr[2] / lr[2] - 1, 0, eps )
  assertNaN( lr[3] )
  lr = {(1  ..-nan..-nan):ranges()}
  assertEquals( lr[1] , 1 )
  assertNaN   ( lr[2] )
  assertNaN   ( lr[3] )
  lr = {(nan.. nan.. nan):ranges()}
  assertNaN( lr[1] )
  assertNaN( lr[2] )
  assertNaN( lr[3] )
  lr = { log( 1  .. 10 .. inf):ranges() }
  assertAlmostEquals( lr[1] / 1  - 1, 0, eps )
  assertAlmostEquals( lr[2] / 10 - 1, 0, eps )
  assertInf( lr[3] )
  lr = { log( 10 .. 1  ..-inf):ranges() }
  assertAlmostEquals( lr[1] / 10 - 1, 0, eps )
  assertAlmostEquals( lr[2] / 1  - 1, 0, eps )
  assertNaN( lr[3] )
  lr = { log( 1  .. inf.. inf):ranges() }
  assertAlmostEquals( lr[1] / 1  - 1, 0, eps )
  assertInf( lr[2] )
  assertInf( lr[3] )
  lr = { log( 1  ..-inf..-inf):ranges() }
  assertAlmostEquals( lr[1] / 1  - 1, 0, eps )
  assertNaN( lr[2] )
  assertNaN( lr[3] )
  lr = { log( inf.. inf.. inf):ranges() }
  assertInf( lr[1] )
  assertInf( lr[2] )
  assertInf( lr[3] )
  lr = { log(-inf..-inf..-inf):ranges() }
  assertNaN( lr[1] )
  assertNaN( lr[2] )
  assertNaN( lr[3] )
end

function TestLogrange:testIsEmpty()
  assertFalse(  log( 1..10 )      :is_empty() )
  assertFalse(  log( 1..10..huge ):is_empty() )
  assertTrue (  log( 1..10..eps  ):is_empty() )
  assertTrue (  log( 1..10..tiny ):is_empty() )

  for _,v in ipairs(values.lempty) do
    assertTrue ( log(v[1]..v[2]..v[3]):is_empty() )
  end
  for _,v in ipairs(values.lrng) do
    assertFalse( log(v[1]..v[2]..v[3]):is_empty() )
  end
 for _,v in ipairs(values.num) do
    if v > 1 then
      assertFalse( log( 1 ..10..v):is_empty() )
      assertTrue ( log( 10..1 ..v):is_empty() )
    elseif v < 1 then
      assertTrue ( log( 1 ..10..v):is_empty() )
      assertFalse( log( 10..1 ..v):is_empty() )
    else
      assertTrue ( log( 10..1 ..v):is_empty() )
      assertFalse( log( 1 ..10..v):is_empty() )
    end
  end
end

function TestLogrange:testIsLogrange()
  assertFalse( is_logrange('') )
  assertFalse( is_logrange(2)  )
  assertFalse( is_logrange(range(1)) )
  assertFalse( is_logrange(1..10)    )
  assertFalse( is_logrange(nrange(1,10,1)) )

  assertTrue ( is_logrange( log( 10^5..1    ..0.1)) )
  assertTrue ( is_logrange( log( 1   ..10^5 ..10 )) )
  assertTrue ( is_logrange( log( 1   ..10^-5..0.1)) )
end

function TestLogrange:testValue()
  local lr
  assertNaN   ( log( 1  ..10.. inf ):value( 0)   )
  assertNaN   ( log( 1  ..10..-inf ):value( 0)   )
  assertNaN   ( log( 1  ..10.. 1   ):value( nan) )
  assertNaN   ( log( 1  ..10.. 1   ):value(-nan) )
  assertNaN   ( log( inf..10..-1   ):value( inf) )
  assertEquals( log( inf..10.. 1   ):value( inf) , inf )
  assertEquals( log( 10 ..1 .. 1   ):value( inf) , inf )
  assertEquals( log( 10 ..1 .. 1   ):value(-inf) , 0   )
  assertEquals( log( 0  ..1 .. eps ):value( 1  ) , 0   )
  assertEquals( log( 1  ..10.. huge):value( 0  ) , 1   )
  assertEquals( log( 1  ..10.. tiny):value( 0  ) , 1   )
  assertEquals( log( 0  ..10 )      :value( tiny), 0   )
  assertEquals( log( 0  ..10 )      :value(-tiny), 0   )
  assertEquals( log( 0  ..10 )      :value(-huge), 0   )
  assertEquals( log( 0  ..10 )      :value( huge), 0   )
  assertEquals( log( 1  ..10.. 1   ):value(-1 )  , exp(-1) )
  assertEquals( log( 1  ..10.. 1   ):value( 11)  , exp(11) )
  lr = log( 1 ..10^5.. 10) assertAlmostEquals( lr:value(#lr) / 10^6 -1, 0, 6*eps )
  lr = log( 10..10^5.. 10) assertAlmostEquals( lr:value(-1)  / 1    -1, 0,   eps )

  for _,v in ipairs(values.lempty) do
    assertAlmostEquals(  log(v[1]..v[2]..v[3]):value(0) / v[1] - 1, 0, eps )
  end
  for _,v in ipairs(values.lrng) do
    assertAlmostEquals(  log(v[1]..v[2]..v[3]):value(0) / v[1] - 1, 0, eps )
  end
  for _,v in ipairs(values.num) do
    if v == 1 then
      assertAlmostEquals( log(1..10.. v):value(1) / exp(v) - 1, 0,    eps )
    else
      assertAlmostEquals( log(1..10.. v):value(1) / v      - 1, 0, 15*eps )
    end
  end
end

function TestLogrange:testGet()
  local lr
  assertNil   ( log( 1..10^-5..0.1 ):get(-1) )
  assertNil   ( log( 1..10^-5..0.1 ):get( 6) )
  assertNil   ( log( 1..10   ..tiny):get( 0) )
  assertEquals( log( 1..10   ..huge):get( 0), 1 )

  for _,v in ipairs(values.lempty) do
    assertNil( log(v[1]..v[2]..v[3]):get(0) )
  end
  for _,v in ipairs(values.lrng) do
    assertAlmostEquals( log(v[1]..v[2]..v[3]):get(0)/ v[1] - 1, 0, eps )
  end

  assertAlmostEquals( log(10^5..1..0.1):get(0) / 10^5 - 1, 0, eps )
  lr = log( 1..10^-5..0.1)
  assertAlmostEquals( lr:get(0)     / 1     - 1, 0,   eps )
  assertAlmostEquals( lr:get(#lr-1) / 10^-5 - 1, 0, 7*eps )
  lr = log( 1..10^5 ..10 )
  assertAlmostEquals( lr:get(0)      / 1   - 1 , 0,   eps )
  assertAlmostEquals( lr:get(#lr-2) / 10^4 - 1 , 0, 7*eps ) -- last element is not accesable for rawLog
end

function TestLogrange:testIndex()
  local lr
  assertNil   ( log( 1..10^-5..0.1 )[0] )
  assertNil   ( log( 1..10^-5..0.1 )[7] )
  assertNil   ( log( 1..10   ..tiny)[1] )
  assertEquals( log( 1..10   ..huge)[1] , 1 )

  for _,v in ipairs(values.lempty) do
    assertNil( log(v[1]..v[2]..v[3])[1] )
  end
  for _,v in ipairs(values.lrng) do
    lr = log(v[1]..v[2]..v[3])
    assertAlmostEquals( lr[1]/ v[1] - 1, 0, eps )
  end
  assertAlmostEquals( log(10^5..1..0.1)[1] / 10^5 - 1, 0, eps )
  lr = log( 1..10^-5..0.1)
  assertAlmostEquals( lr[1]   / 1     - 1, 0,   eps )
  assertAlmostEquals( lr[#lr] / 10^-5 - 1, 0, 7*eps )
  lr = log( 1..10^5 ..10 )
  assertAlmostEquals( lr[1]     / 1    - 1 , 0,   eps )
  assertAlmostEquals( lr[#lr-1] / 10^4 - 1 , 0, 7*eps ) -- last element is not accesable for rawLog
end

function TestLogrange:testReverse()
  local lr
  lr = log( 1..10^5..tiny):reverse()
  assertEquals( lr.logstart, log(10^5) )
  assertEquals( lr.logstop , log(1   ) )
  assertEquals( lr.logstep , log(1/tiny) )
  lr = log( 1..10^5..eps ):reverse()
  assertEquals( lr.logstart, log(10^5) )
  assertEquals( lr.logstop , log(1   ) )
  assertEquals( lr.logstep , log(1/eps))
  assertAlmostEquals( log(10^5..1    ..10 ):reverse().logstep/log(0.1)-1, 0, eps )
  assertAlmostEquals( log(1   ..10^5 ..0.1):reverse().logstep/log(10 )-1, 0, eps)
  assertAlmostEquals( log(1   ..10^-5..10 ):reverse().logstep/log(0.1)-1, 0, eps)

  for _,v in ipairs(values.lrng) do
    assertEquals( log(v[1]..v[2]..v[3]):reverse(), log(v[2]..v[1]..1/v[3]) )
  end
  for _,v in ipairs(values.num) do
    assertAlmostEquals( log( 1..10^5..v):reverse().logstep/log(1/v)-1, 0, 2*eps )
  end
end

function TestLogrange:testEqual()
  local lr, rs
  for _,v in ipairs(values.lempty) do
    lr = log(v[1]..v[2]..v[3])
    rs = {lr:ranges()} assertTrue( log(rs[1]..rs[2]..rs[3]) == lr )
  end
  for _,v in ipairs(values.lrng) do
    lr = log(v[1]..v[2]..v[3])
    rs = {lr:ranges()} assertTrue( log(rs[1]..rs[2]..rs[3]) == lr )
  end
  for _,v in ipairs(values.num) do
    lr = log(1..10^5..v)
    rs = {lr:ranges()} assertTrue( log(rs[1]..rs[2]..rs[3]) == lr )
  end
  for _,v in ipairs(values.lim) do
    lr = log(1..10^5..v)
    rs = {lr:ranges()} assertTrue( log(rs[1]..rs[2]..rs[3]) == lr )
  end
end

function TestLogrange:testSize()
  assertNaN   ( #log( inf .. inf..0)    )
  assertNaN   ( #log(-inf ..-inf..0)    )
  assertNaN   ( #log(-inf .. inf..0)    )
  assertNaN   ( #log( 10  ..  1..-huge) )
  assertNaN   ( #log( 10  ..  1..-tiny) )
  assertEquals( #log( 1   .. 10.. huge), 1 )
  assertEquals( #log( 1   .. 10.. tiny), 0 )
  assertEquals( #log( 10^5.. 1    )    , 0 )

  for _,v in ipairs(values.lempty) do
    assertEquals(  #log(v[1]..v[2]..v[3]), 0 )
  end
  for _,v in ipairs(values.lrng) do
    assertEquals(  #log(v[1]..v[2]..v[3]), 6 )
  end
end

function TestLogrange:testIlogrange()
  local s, lr, ir
  ir = { ipairs(logrange(1,10^5,10)) }
  assertTrue( is_function(ir[1]) )
  assertTrue( is_logrange(ir[2]) )
  assertTrue( ir[3] == 0         )

  lr,s = log(1..10.. huge), 0  for i,v in ipairs(lr) do s=s+1 ; assertEquals(s, 1) end
  lr   = log(10^5..1    ..0.1) for i,v in ipairs(lr) do assertAlmostEquals(lr[i]/v-1, 0, eps) end
  lr   = log(1   ..10^-5..0.1) for i,v in ipairs(lr) do assertAlmostEquals(lr[i]/v-1, 0, eps) end

  for _,v in ipairs(values.lempty) do
    lr,s = log(v[1]..v[2]..v[3]),0 for i,v in ipairs(lr) do s=s+1; assertEquals(s, 0) end
  end
end

function TestLogrange:testConstructor()
  local msg = {
    "invalid argument #1 (positive finite number expected)"     ,
    "invalid argument #2 (positive finite number expected)"     ,
    "invalid argument #3 (positive finite number ~= 1 expected)",
  }
  assertErrorMsgContains( msg[1], logrange          )
  assertErrorMsgContains( msg[1], logrange, ''      )
  assertErrorMsgContains( msg[1], logrange, inf     )
  assertErrorMsgContains( msg[1], logrange,-inf     )
  assertErrorMsgContains( msg[2], logrange, 1  , '' )
  assertErrorMsgContains( msg[3], logrange, 1  , 10    , ''  )
  assertErrorMsgContains( msg[3], logrange, 1  , 10^5  ,-10  )
  assertErrorMsgContains( msg[2], logrange, 1  ,-10^5  , 10  )
  assertErrorMsgContains( msg[1], logrange,-1  , 10^5  , 10  )
  assertErrorMsgContains( msg[3], logrange, 1  , 10    , nan )
  assertErrorMsgContains( msg[2], logrange, 1  , nan   , nan )
  assertErrorMsgContains( msg[1], logrange, nan, nan   , nan )
  assertErrorMsgContains( msg[3], logrange, 1  , 10^5  , 0   )
  assertErrorMsgContains( msg[3], logrange, 1  , 10    , inf )
  assertErrorMsgContains( msg[2], logrange, 1  , inf   , inf )
  assertErrorMsgContains( msg[1], logrange, inf, inf   , inf )
  assertErrorMsgContains( msg[2], logrange, 2  , 2^1024, 2   )
  assertErrorMsgContains( msg[3], logrange, 1  , 10    , 1   )
  assertErrorMsgContains( msg[3], logrange, 10 , 10    , 1   )
  assertErrorMsgContains( msg[3], logrange, 1  , 1     , 1   )
  assertErrorMsgContains( msg[3], logrange, 1  , 10    , 1/huge )

  for _,v in ipairs(values.lrng) do
    assertTrue( is_logrange( logrange(v[1],v[2],v[3]) ) )
    assertEquals( logrange(v[1],v[2],v[3]), log(v[1]..v[2]..v[3]) )
  end
  for _,v in ipairs(values.lim) do
    assertTrue( is_logrange( logrange( 1, 10, v) ) )
  end

  assertTrue  ( is_logrange( logrange( 1 )) )
  assertEquals( logrange( 1 ).logstart, log(1) )
  assertEquals( logrange( 1 ).logstop , log(1) )
  assertEquals( logrange( 1 ).logstep ,     1  )
  assertFalse ( logrange( 1 ):is_empty()       )
end

function TestLogrange:testCtorSingleArg()
  assertEquals( logrange(1).logstart, log(1) )
  assertEquals( logrange(1).logstop , log(1) )
  assertEquals( logrange(1).logstep , 1 )

  for _,v in ipairs(values.num) do
    assertEquals( logrange(v).logstart, log(1) )
    assertEquals( logrange(v).logstop , log(v) )
    assertEquals( logrange(v).logstep ,     1  )
  end
end

function TestLogrange:testNConstructor()
  local lr, lr1
  local msg = {
    "invalid argument #1 (positive finite number expected)",
    "invalid argument #2 (positive finite number expected)",
    "invalid argument #3 (positive number expected)",
  }
  assertErrorMsgContains( msg[3], nlogrange, 1  , 10  ,-1   )
  assertErrorMsgContains( msg[3], nlogrange, 1  , 10^5,-1   )
  assertErrorMsgContains( msg[3], nlogrange, 1  , 10  , ''  )
  assertErrorMsgContains( msg[3], nlogrange, 1  , 10  , nan )
  assertErrorMsgContains( msg[2], nlogrange, 1  , nan , nan )
  assertErrorMsgContains( msg[1], nlogrange, nan, nan , nan )

  lr  = {nlogrange( 10^5, 1   , 1000):reverse():ranges()}
  lr1 = {nlogrange( 1   , 10^5, 1000):ranges()}
  assertAlmostEquals( lr1[3]/lr[3] - 1, 0, eps )

  for _,v in ipairs(values.nlrng) do
    lr = nlogrange(v[1],v[2],v[3]) for i,v in ipairs(lr) do assertEquals(lr[i],v) end
  end
  assertFalse( nlogrange( 1, 10, huge ):is_empty() )
  assertFalse( nlogrange( 1, 10, tiny ):is_empty() )
  assertFalse( nlogrange( 1, 10, 1    ):is_empty() )
end

function TestLogrange:testNCtorSingleArg()
  assertEquals( nlogrange(1).logstep , 0 )
  for _,v in ipairs(values.num) do
    assertEquals( nlogrange(v).logstart, log(1) )
    assertEquals( nlogrange(v).logstop , log(v) )
    if v ~= 1 then
      assertEquals( #nlogrange(v), 100  )
    else
      assertEquals( #nlogrange(v), huge )
    end
  end
end

function TestLogrange:testNanAndInfCtor()
  assertNaN   ( nlogrange( 1, 10, 1):value( nan) )
  assertEquals( nlogrange( 1, 10, 1):value( inf), inf )
end

function TestLogrange:testNCnstrFields()
  local lr
  assertTrue( is_logrange(nlogrange( 1, 10 ))   )
  assertTrue( is_logrange(nlogrange( 1, 10, 1)) )

  for _,v in ipairs(values.nlrng)do
    lr = { nlogrange(v[1],v[2],v[3]):ranges() }
    assertAlmostEquals( lr[1] / v[1] - 1, 0,   eps )
    assertAlmostEquals( lr[2] / v[2] - 1, 0, 2*eps )
   end
end

function TestLogrange:testAdjSize()
  local lr, nr, s
  for _,v in ipairs(values.nlrng) do
    nr = nlogrange(v[1], v[2], v[3])
    for i = 0,100 do
      nr = nlogrange(v[1], v[2], #nr)
      assertEquals( #nr, v[3] )
      i = i + 1
    end
  end
  for _,v in ipairs(values.nlrng) do
    assertEquals( #nlogrange(v[1],v[2],v[3]), 100 )
  end
  for _,v in ipairs(values.num) do
    if v >= 1 then
      lr =  logrange( 1, 100, v )
      s  = #lr
      nr = nlogrange( 1, 100, s )
      if s ~= 0 then
        assertEquals( #nr, #lr )
      else
        assertNaN( nr.logstep )
      end
    end
  end

  for i = 1, 12 do
    assertEquals( #logrange(1, 10^i   , 10 ), i+1 )
    assertEquals( #logrange(1, 10^(-i), 0.1), i+1 )
  end
  assertEquals( #nlogrange( 1   , 10, 0.1 ), 1    )
  assertEquals( #nlogrange( 10^5, 1 , 1   ), 1    )
  assertEquals( #nlogrange( 10^5, 1  )     , 100  )
end

function TestLogrange:testAdjStep()
  local lr, nr, s
  for _,v in ipairs(values.lrng) do
    if v[1] ~= v[2] then
      lr = logrange( v[1], v[2], v[3] )
      s  = #lr
      nr = nlogrange( v[1], v[2], s )
      assertTrue( lr == nr )
      assertAlmostEquals( lr.logstep  - nr.logstep, 0, eps )
     end
  end
  for _,v in ipairs(values.num) do
    assertAlmostEquals( logrange(1, 100, v).logstep/log(v)-1, 0, eps )
  end
  for _,v in ipairs(values.num) do
    nr = nlogrange( 1, 100, v )
    s = #nr
    if s < 1 then
      assertNaN ( nr.logstep )
    elseif s == 1 then
      assertEquals( nr.logstep, huge )
    elseif s > 1 and s < inf and exp(nr.logstep) ~= 1 then
      lr = logrange( 1, 100, exp(nr.logstep) )
      assertAlmostEquals( lr.logstep/nr.logstep-1, 0, eps*v ) -- mantissa...
    else
      assertEquals(exp(nr.logstep), 1) -- forbidden case
    end
  end

  assertEquals( nlogrange( 1 , 1 , 1    ).logstep, huge )
  assertEquals( nlogrange( 1 , 10, 0.1  ).logstep, huge )
  assertEquals( nlogrange( 1 , 10, 1    ).logstep, huge )
  assertEquals( nlogrange( 1 , 10, tiny ).logstep, huge )
  assertEquals( nlogrange( 1 , 10, eps  ).logstep, huge )
  assertEquals( nlogrange( 1 , 10, inf  ).logstep, 0    )
  assertEquals( nlogrange( 10, 10, 2    ).logstep, 0    )
  assertEquals(  logrange( 1 , 10, huge ).logstep, log(huge) )
  assertEquals(  logrange( 1 , 10, tiny ).logstep, log(tiny) )
  assertEquals(  logrange( 1 , 10, eps  ).logstep, log(eps ) )
end

function TestLogrange:testAdjStop()
  local lr, nr, s
  assertEquals( nlogrange( 1, 10, 1  ) :value(0)     , 1   )
  assertEquals( nlogrange( 1, 10, 1  ) :value(1)     , inf )
  assertEquals( nlogrange( 1, 10, 1  ) :value(2)     , inf )
  assertEquals( nlogrange( 1, 10, huge):value(0)     , 1   )
  assertEquals( nlogrange( 1, 10, huge):value(huge-1), 1   )
  assertEquals( nlogrange( 1, 10, tiny):value(tiny-1), 0   )
  assertNaN   ( nlogrange( 1, 10, inf ):value(inf-1)  )

  for _,v in ipairs(values.lrng) do
    lr = logrange( v[1], v[2], v[3] )
    s = #lr
    assertAlmostEquals( lr:value(s-1) / exp(lr.logstop) - 1, 0, 8*eps )
  end
  for _,v in ipairs(values.nlrng) do
    nr = nlogrange( v[1], v[2], v[3] )
    assertEquals( nr:value(v[3]-1), exp(nr.logstop) )
  end
  for _,v in ipairs(values.nlrng) do
    nr = nlogrange( v[1], v[2], v[3] )
    assertEquals( nr:value(v[3]-1), exp(nr.logstop) )
    assertAlmostEquals( nr:value(0)   / v[1] - 1, 0,   eps )
    assertAlmostEquals( nr:value(0)   / v[1] - 1, 0,   eps )
    assertAlmostEquals( nr:get(0)     / v[1] - 1, 0,   eps )
    assertAlmostEquals( nr:get(#nr-1) / v[2] - 1, 0, 2*eps )
    assertAlmostEquals( nr[1]         / v[1] - 1, 0,   eps )
    assertAlmostEquals( nr[#nr]       / v[2] - 1, 0, 2*eps )
  end
  for _,v in ipairs(values.num) do
    lr = logrange( 1, 100, v )
    if lr:last() ~= nil then
      assertTrue( lr:last() >= exp(lr.logstop-lr.logstep) )
      assertTrue( lr:last() <= exp(lr.logstop) )
    end
  end
end

function TestLogrange:testLast()
  assertEquals(  logrange( 1 , 1 )      :last(),  1    )
  assertNil   (  logrange( 2 , 1 )      :last()        )
  assertEquals(  logrange( 20, 1 , 0.1 ):last(),  2    )
  assertEquals(  logrange( 1 )          :last(),  1    )
  assertEquals(  logrange( 1 , 20, huge):last(),  1    )
  assertAlmostEquals(  logrange( 1 , 16, 2)   :last(),  16   , 8*eps)
  assertAlmostEquals(  logrange( 1 , 16, 4)   :last(),  16   , 8*eps)
  assertEquals(  logrange( 1 , 30, 3)   :last(),  27   )
  assertAlmostEquals(  logrange( 1 , 20, 10 ) :last(),  10   , 8*eps)
  for _,v in ipairs(values.lrng) do
    assertAlmostEquals( logrange(v[1],v[2],v[3]):last(), v[2], 8*v[2]*eps )
  end

  for _,v in ipairs(values.lempty) do
    assertEquals( #logrange(v[1], v[2], v[3]), 0 )
    assertNil   ( logrange(v[1],v[2],v[3]):last() )
    assertEquals( {logrange(v[1],v[2],v[3]):bounds()}, {nil, nil, nil})
  end
end

function TestLogrange:testBounds()
  local lr
  for _,v in ipairs(values.lempty) do
    assertEquals( {logrange(v[1],v[2],v[3]):bounds()}, {nil, nil, nil})
  end
  assertEquals( { logrange( 1 , 20, tiny):bounds()}, { nil, nil, nil   } )
  assertEquals( { logrange( 1 )          :bounds()}, { 1  , 1  , exp(1)} )
  assertEquals( {nlogrange( 1 , 20, huge):bounds()}, { 1, 1, 1  } )
  assertEquals( {nlogrange( 1 , 20, tiny):bounds()}, { 1, 1, inf} )
  assertEquals( { logrange( 1 , 20, huge):bounds()}, { 1, 1, exp(log(huge))})

  for _,v in ipairs(values.lrng) do
    lr = {logrange(v[1],v[2],v[3]):bounds()}
    assertAlmostEquals( lr[3] / 10 - 1, 0, eps)
  end
  lr = { logrange( 1   , 10^5 , 10  ):bounds() }
  assertAlmostEquals( lr[1] / 1    - 1 , 0,   eps )
  assertAlmostEquals( lr[2] / 10^5 - 1 , 0, 7*eps )
  lr = { logrange( 10^5, 1, 0.1 ):bounds() }
  assertAlmostEquals( lr[1] / 1    - 1 , 0, 8*eps )
  assertAlmostEquals( lr[2] / 10^5 - 1 , 0,   eps )
  lr = { logrange( 1   , 10^-5, 0.1 ):bounds()}
  assertAlmostEquals( lr[1] / 10^-5 - 1, 0, 7*eps )
  assertAlmostEquals( lr[2] / 1     - 1, 0,   eps )

  lr = {nlogrange( 1   , 10^5 , 100 ):bounds()}
  assertAlmostEquals( lr[1] / 1    - 1 , 0,   eps )
  assertAlmostEquals( lr[2] / 10^5 - 1 , 0,   eps )
  lr = {nlogrange( 10^5, 1    , 100 ):bounds()}
  assertAlmostEquals( lr[1] / 1    - 1 , 0,   eps )
  assertAlmostEquals( lr[2] / 10^5 - 1 , 0,   eps )
  lr = {nlogrange( 1   , 10^-5, 100 ):bounds()}
  assertAlmostEquals( lr[1] / 10^-5 - 1, 0, 2*eps )
  assertAlmostEquals( lr[2] / 1     - 1, 0,   eps )
end

function TestLogrange:testOverlap()
  local lr, nr
  lr = logrange( 10^5, 1, 0.1 )
  assertTrue ( lr:overlap( logrange(    1, 10^5 , 10  )) )
  assertFalse( lr:overlap( logrange(    1, 10^-5, 0.1 )) )
  lr = logrange( 1, 10^5 , 10)
  assertTrue ( lr:overlap( logrange( 10^5, 1    , 0.1 )) )
  assertTrue ( lr:overlap( logrange( 1   , 10^-5, 0.1 )) )
  lr = logrange( 1, 10^-5, 0.1)
  assertTrue ( lr:overlap( logrange( 1   , 10^-5, 0.1 )) )
  assertFalse( lr:overlap( logrange( 10^5, 1    , 0.1 )) )

  nr = nlogrange(1   , 10^5 , 6)
  assertTrue ( nr:overlap( logrange( 1   , 10^5 , 10  )) )
  assertTrue ( nr:overlap( logrange( 1   , 10^-5, 0.1 )) )
  assertTrue ( nr:overlap( logrange( 10^5, 1    , 0.1 )) )
  assertTrue ( nr:overlap(nlogrange( 10^5, 1    , 6   )) )
  assertTrue ( nr:overlap(nlogrange( 1   , 10^-5, 6   )) )

  nr = nlogrange(1   , 10^-5, 6)
  assertTrue ( nr:overlap( logrange( 1   , 10^5 , 10  )) )
  assertTrue ( nr:overlap( logrange( 1   , 10^-5, 0.1 )) )
  assertTrue ( nr:overlap(nlogrange( 1   , 10^5 , 6   )) )
  assertFalse( nr:overlap( logrange( 10^5, 1    , 0.1 )) )
  assertFalse( nr:overlap(nlogrange( 10^5, 1    , 6   )) )
end

function TestLogrange:testNewindex() --Testing immutability of the object through index
  local errorFunc = \index => local rng = logrange(1, 3) rng[index] = 2 end 
	local msg = "invalid logrange member"
  assertErrorMsgContains( msg, errorFunc, 1       )
  assertErrorMsgContains( msg, errorFunc, 2       )
  assertErrorMsgContains( msg, errorFunc, 3       )
  assertErrorMsgContains( msg, errorFunc, 4       )
end

-- operators 
function TestLogrange:testUnary()
  for _,v in ipairs(values.lrng) do
    assertEquals( -log(v[1]..v[2]..v[3]), -logrange(v[1],v[2],v[3]) )
    assertEquals( log(1/v[1]..1/v[2]..1/v[3]), -logrange(v[1],v[2],v[3]) )
    assertEquals( -log(v[1]..v[2]..v[3]), logrange(1/v[1],1/v[2],1/v[3]) )
    assertEquals( log(v[1]..v[2]..v[3]):unm(), logrange(1/v[1],1/v[2],1/v[3]) )
  end
  for _,v in ipairs(values.lempty) do
    assertEquals( -log(v[1]..v[2]..v[3]), logrange(1/v[1],1/v[2],1/v[3]) )
  end
  assertAllAlmostEquals(totable(-logrange(1, 150)), {1/exp(0), 1/exp(1),1/exp(2),1/exp(3),1/exp(4),1/exp(5)})
  assertAllAlmostEquals(totable(-logrange(1, 32, 2)), {1/2^0, 1/2^1, 1/2^2,1/2^3,1/2^4,1/2^5})
end

function TestLogrange:testAdd()
  for _,v in ipairs(values.lrng) do
    -- logrange(1+v[1]..1+v[2]..v[3])
    assertEquals( 1+logrange(v[1], v[2], v[3]), logrange(exp(1)*v[1], exp(1)*v[2], v[3]) )  --1 + lrng 
    assertEquals( logrange(v[1], v[2], v[3])+2, logrange(exp(2)*v[1], exp(2)*v[2], v[3]) )  --lrng + 2
    assertEquals( logrange(v[1], v[2], v[3]):add(2), logrange(exp(2)*v[1], exp(2)*v[2], v[3]) )  --lrng + 2
  end
  for _,v in ipairs(values.lempty) do
    assertEquals( 3+logrange(v[1], v[2], v[3]), logrange(exp(3)*v[1], exp(3)*v[2], v[3]) )  --3 + lrng
  end
  assertAllAlmostEquals(totable(3 + logrange(1, 150)), {exp(3)*exp(0), exp(3)*exp(1),exp(3)*exp(2),exp(3)*exp(3),exp(3)*exp(4),exp(3)*exp(5)}, 4*eps)
  assertAllAlmostEquals(totable(1 + logrange(1, 32, 2)), {exp(1)*2^0, exp(1)*2^1, exp(1)*2^2,exp(1)*2^3,exp(1)*2^4,exp(1)*2^5}, 192*eps) --192 eps for result of 86.985
end

function TestLogrange:testSub()
  for _,v in ipairs(values.lrng) do
    assertAllAlmostEquals( totable(1-logrange(v[1], v[2], v[3])), totable(logrange(exp(1)/v[1], exp(1)/v[2], 1/v[3])) ) -- 1 - lrng
    assertEquals( logrange(v[1], v[2], v[3])-2, logrange(v[1]/exp(2), v[2]/exp(2), v[3]) )                            -- lrng - 2
    assertEquals( logrange(v[1], v[2], v[3]):sub(2), logrange(v[1]/exp(2), v[2]/exp(2), v[3]) )                            -- lrng - 2
    assertEquals( 2-(logrange(v[1], v[2], v[3])), 2+(-logrange(v[1], v[2], v[3])))
  end
  for _,v in ipairs(values.lempty) do
    assertAllAlmostEquals( totable(3-logrange(v[1], v[2], v[3])), totable(logrange(exp(3)/v[1], exp(3)/v[2], 1/v[3])) ) -- 3 - lrng
    assertEquals( logrange(v[1], v[2], v[3])-3, logrange(v[1]/exp(3), v[2]/exp(3), v[3]) )                              -- lrng - 3
    assertEquals( 2-(logrange(v[1], v[2], v[3])), 2+(-logrange(v[1], v[2], v[3])))
  end

  assertAllAlmostEquals(totable(logrange(1, 150) - 1), {1/exp(1)*exp(0), 1/exp(1)*exp(1),1/exp(1)*exp(2),1/exp(1)*exp(3),1/exp(1)*exp(4),1/exp(1)*exp(5)}, 2*eps)
  assertAllAlmostEquals(totable(2 - logrange(1, 32, 2)), {exp(2)/2^0, exp(2)/2^1, exp(2)/2^2,exp(2)/2^3,exp(2)/2^4,exp(2)/2^5}, 2*eps) 
end

function TestLogrange:testMul()
  for _,v in ipairs(values.lrng) do
    assertEquals( 1*logrange(v[1], v[2], v[3]), logrange(v[1], v[2], v[3]) )
    assertEquals( logrange(v[1], v[2], v[3])*2, logrange(v[1], v[2]^2, v[3]^2) )
    assertEquals( logrange(v[1], v[2], v[3]):mul(2), logrange(v[1], v[2]^2, v[3]^2) )
  end
  for _,v in ipairs(values.lempty) do
    assertEquals( 3*logrange(v[1], v[2], v[3]), logrange(v[1], v[2]^3, v[3]^3) )
    assertEquals( logrange(v[1], v[2], v[3])*3, logrange(v[1], v[2]^3, v[3]^3) )
  end
  assertAllAlmostEquals(totable(logrange(1, 150) * 0.5), {exp(0)^0.5, exp(1)^0.5,exp(2)^0.5,exp(3)^0.5,exp(4)^0.5,exp(5)^0.5}, 4*eps)
  for i, v in ipairs(totable(3 * logrange(1, 32, 2))) do
    assertAlmostEquals(v, 2^((i-1)*3), 2^((i-1)*3)*eps*5) --Had to do relative eps - large errors ~2000 eps
  end
end

function TestLogrange:testDiv()
  for _,v in ipairs(values.lrng) do
    assertEquals( logrange(v[1], v[2], v[3])/1, logrange(v[1], v[2], v[3]) )
    assertEquals( logrange(v[1], v[2], v[3])/2, logrange(v[1], v[2]^0.5, v[3]^0.5) ) --division adjusts step, intentional?
    assertEquals( logrange(v[1], v[2], v[3]):div(2), logrange(v[1], v[2]^0.5, v[3]^0.5) ) --division adjusts step, intentional?
  end
  for _,v in ipairs(values.lempty) do
    assertEquals( logrange(v[1], v[2], v[3])/4, logrange(v[1], v[2]^0.25, v[3]^0.25) )
  end
  assertAllAlmostEquals(totable(logrange(2, 1188) / 3), {2*exp(0)^(1/3), 2*exp(1)^(1/3),2*exp(2)^(1/3),2*exp(3)^(1/3),2*exp(4)^(1/3),2*exp(5)^(1/3)}, 4*eps) --Need to use 1188 because then logstop goes from 7.0800264999226 to 2.3600088333075 > ln(2*exp(5/3))
  for i, v in ipairs(totable(logrange(1, 32, 2) / 0.5)) do
    assertAlmostEquals(v, 2^((i-1)*2), 2^((i-1)*2)*eps*2) --Had to do relative eps - large errors
  end
end

-- other 
function TestLogrange:testToStr() --identical to rng, intentional?
  for _,v in ipairs(values.lrng) do
    assertEquals( tostring(logrange(v[1], v[2], v[3])), ((v[1] > 0 and " ") or "").. tostring(v[1])..".."..((v[2] > 0 and " ") or "")..tostring(v[2])..".."..((v[3] > 0 and " ") or "")..tostring(v[3]) )
  end
  for _,v in ipairs(values.lempty) do
    assertEquals( tostring(logrange(v[1], v[2], v[3])), ((v[1] > 0 and " ") or "").. tostring(v[1])..".."..((v[2] > 0 and " ") or "")..tostring(v[2])..".."..((v[3] > 0 and " ") or "")..tostring(v[3]) )
  end
  assertEquals(tostring(logrange(1, 9, exp(1))), " 1.. 9")
  assertEquals(tostring(-logrange(1, 9, exp(1))), " 1..".." 0.1111111111".."..".." 0.3678794412") --10 d.p. 
end

function TestLogrange:testCopy() --Check for value semantic
  for _,v in ipairs(values.lrng) do
    local rng = logrange(v[1], v[2], v[3])
    local rngCopy = rng
    assertEquals(rng, rngCopy)
    rng = rng + 1
    assertEquals( rng, 1 + logrange(v[1], v[2], v[3]) )
    assertEquals( rngCopy, logrange(v[1], v[2], v[3]) )
    rngCopy = rngCopy + 2
    assertEquals( rng, 1 + logrange(v[1], v[2], v[3]) )
    assertEquals( rngCopy, 2 + logrange(v[1], v[2], v[3]) )
  end
end
	

-- performance test suite -----------------------------------------------------o

Test_Logrange = {}

function Test_Logrange:testRangeIter()
  local s = 4^8
  s = 1023
  local lr = logrange(2, 2^s, 2)
  local t0 = os.clock()
  for j = 1,15e3 do
    for i,v in ipairs(lr) do assert(lr[i], v) end
  end
  local dt = os.clock() - t0
  assertAlmostEquals( dt, 0.5, 1 )
end

-- end ------------------------------------------------------------------------o
