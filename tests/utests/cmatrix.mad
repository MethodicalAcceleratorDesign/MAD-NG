--[=[
 o-----------------------------------------------------------------------------o
 |
 | Matrix module regression tests -  complex matrices
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the matrix module.

 o-----------------------------------------------------------------------------o
]=]

local assertEquals, assertAlmostEquals, assertInf, assertFalse, assertNotEquals,
      assertErrorMsgContains, assertNil, assertNaN, assertIsString, assertTrue,
      assertAllEquals in require 'luaunit'

local vector, cvector, matrix, cmatrix, is_vector, is_matrix, is_cvector,
      is_cmatrix, isa_vector, isa_matrix, linspace, logspace in MAD

local complex, range, nrange, nlogrange,infi, tiny, eps, huge, inf, nan, pi, Pi,
      sqrt, abs, log, exp, min, random, randomseed, floor, round,
      sin, cos, tan, sinh, cosh, tanh, asin, acos, atan, asinh, acosh, atanh,
      totable, is_complex, is_cdata, is_table, is_nil, is_string,
      concat, tostring in MAD

local rep in MAD.utility

-- locals ---------------------------------------------------------------------o

local dat  = require 'cmatrix_dat'
local mth  = \f,s,... s[f](s,...)
local idx  = \i,j,nc ( (i-1)*nc+j )
local idxC = \i,j,nc ( idx(i,j,nc) + idx(i,j,nc)*1i )

local errCMat = cmatrix(2)

local G   = {}
G.cmatidx = {}
G.cmattmp = {}
G.matidx  = {}
G.size    = {}
G.vi      = {}
G.vj      = {}

for nr=1,5 do
  G.vi[nr] = vector(nr):fill(1..nr)
  G.vj[nr] = vector(nr):fill(1..nr)
  for nc=1,5 do
    G.cmatidx[#G.cmatidx+1] = cmatrix(nr,nc):fill(1..nr*nc):map(\x x+x*1i)
    G.cmattmp[#G.cmattmp+1] = cmatrix(nr,nc)
    G.matidx [#G.matidx+1]  =  matrix(nr,nc):fill(1..nr*nc)
    G.size   [#G.size+1]   = {nr,nc}
  end
end

randomseed( os.clock() )

-- regression test suites -----------------------------------------------------o

TestCMatrix    = {}
TestCMatrixErr = {}

TestCMatrixGet = {}
TestCMatrixSet = {}

TestCMatrixInPlace   = {}
TestCMatrixInPlaceII = {}
TestCMatrixFun       = {}

TestCMatrixSMaps  = {}
TestCMatrixSFolds = {}
TestCMatrixSScans = {}

TestCMatrixSympl  = {}
TestCMatrixLinAlg = {}
TestCMatrixOps    = {}
TestCMatrixLapack = {}
TestCMatrixFFT    = {}
TestCMatrixRot    = {}
TestCMatrixConv   = {}

function TestCMatrixErr:testCtor()
  local msg = {
  "invalid argument #1 or #2 (nrow[,ncol] >=1 or table [of tables] expected)",
   "matrix too large"                                                        ,
  }
  assertErrorMsgContains( msg[1], cmatrix, ''     )
  assertErrorMsgContains( msg[1], cmatrix, nil    )
  assertErrorMsgContains( msg[1], cmatrix, 0      )
  assertErrorMsgContains( msg[1], cmatrix, tiny   )
  assertErrorMsgContains( msg[1], cmatrix, eps    )
  assertErrorMsgContains( msg[1], cmatrix, 1..2   )
  assertErrorMsgContains( msg[1], cmatrix, infi   )
  assertErrorMsgContains( msg[1], cmatrix, nan    )
  assertErrorMsgContains( msg[1], cmatrix,-1      )
  assertErrorMsgContains( msg[1], cmatrix,-eps    )
  assertErrorMsgContains( msg[2], cmatrix, inf    )
  assertErrorMsgContains( msg[2], cmatrix, huge   )
  assertErrorMsgContains( msg[2], cmatrix, 2^15   )
  assertErrorMsgContains( msg[2], cvector, 2^29+1 )
end

function TestCMatrix:testCtor()
  for ii,cm in ipairs(G.cmatidx) do
    local nr, nc = cm:sizes()
    for j=1,#cm do
      assertEquals( cm.data[j-1], j+j*1i )
    end
    assertTrue( is_cmatrix(cm) )
    if nc==1 then
      assertTrue  ( is_cvector(cm) )
      assertEquals( nc, 1 )
    else
    assertEquals( nr, G.size[ii][1] )
    assertEquals( nc, G.size[ii][2] )
    end
  end
end

function TestCMatrixErr:testCtorFromtable()
  local msg = {
  "invalid argument #1 (non-empty table expected)",
  "cannot convert 'string' to 'complex'"          ,
  }
  assertErrorMsgContains( msg[1], cmatrix, {nil} )
  assertErrorMsgContains( msg[2], cmatrix, {''}  )
end

function TestCMatrix:testCtorFromtable()
  local cv = cvector{1,2,3,4,5,6}
  local cm = cmatrix{{1,2,3},{4,5,6}}
  for j=1,#cm do assertEquals( cm.data[j-1], j+0i ) end
  for j=1,#cv do assertEquals( cv.data[j-1], j+0i ) end
  assertTrue  ( is_cmatrix( cmatrix{2}            ) )
  assertTrue  ( is_cvector( cmatrix{2}            ) )
  assertTrue  ( is_cmatrix( cmatrix{complex(0,0)} ) )
  assertEquals( cmatrix{complex(0,0)}, cmatrix(1)   )
end

function TestCMatrix:testCdataType()
  local cm, cv = cmatrix(2), cvector(2)
  assertFalse( is_matrix ( cm ) )
  assertFalse( is_matrix ( cv ) )
  assertFalse( is_vector ( cm ) )
  assertFalse( is_vector ( cv ) )
  assertTrue ( is_cmatrix( cm ) )
  assertTrue ( is_cmatrix( cv ) )
  assertFalse( is_cvector( cm ) )
  assertTrue ( is_cvector( cv ) )
  assertFalse( isa_vector( cm ) )
  assertTrue ( isa_vector( cv ) )
  assertTrue ( isa_matrix( cm ) )
  assertTrue ( isa_matrix( cv ) )
end

-- get, set, same -------------------------------------------------------------o

function TestCMatrixSet:setUp()
  for _,cm in ipairs(G.cmattmp) do cm:zeros() end
  for _,cm in ipairs(G.cmatidx) do cm:fill(1..cm:size()) end
  for _,m  in ipairs(G.matidx)  do m :fill(1..m:size())  end
end

function TestCMatrixSet:tearDown()
  for _,cm in ipairs(G.cmattmp) do cm:zeros() end
  for _,cm in ipairs(G.cmatidx) do cm:fill(1..cm:size()) end
  for _,m  in ipairs(G.matidx)  do m :fill(1..m:size())  end
end

function TestCMatrixErr:testGeti0()
    local msg = {
    "attempt to compare nil with number",
    }
  assertErrorMsgContains( msg[1], mth, 'geti0', errCMat, nil )
end

function TestCMatrixGet:testGeti0()
  for _,cm in ipairs(G.cmatidx) do
    for j=1,cm:size() do assertEquals( cm:geti0(j-1), j+j*1i ) end
  end
end

function TestCMatrixErr:testGeti()
  local msg = {
    "attempt to compare nil with number",
  }
  assertErrorMsgContains( msg[1], mth, 'geti', errCMat, nil )
end

function TestCMatrixGet:testGeti()
  for _,cm in ipairs(G.cmatidx) do
    for j=1,cm:size() do assertEquals( cm:geti(j), j+j*1i ) end
  end
end

function TestCMatrixErr:testGet0()
  local msg = {
    "attempt to compare nil with number",
  }
  assertErrorMsgContains( msg[1], mth, 'get0', errCMat, 0  , nil )
  assertErrorMsgContains( msg[1], mth, 'get0', errCMat, nil, 0   )
end

function TestCMatrixGet:testGet0()
  for _,cm in ipairs(G.cmatidx) do
    local nr, nc = cm:sizes()
    for i=1,nr do
    for j=1,nc do
      assertEquals( cm:get0(i-1,j-1), idxC(i,j,nc) )
    end end
  end
end

function TestCMatrixErr:testGet()
  local msg = {
    "attempt to compare nil with number",
  }
  assertErrorMsgContains( msg[1], mth, 'get0', errCMat, 1  , nil )
  assertErrorMsgContains( msg[1], mth, 'get0', errCMat, nil, 1   )
end

function TestCMatrixGet:testGet()
  for _,cm in ipairs(G.cmatidx) do
    local nr, nc = cm:sizes()
    for i=1,nr do
    for j=1,nc do
      assertEquals( cm:get(i,j), idxC(i,j,nc) )
    end end
  end
end

function TestCMatrixErr:testSeti0()
  local msg = {
    "0-index out of bounds"             ,
    "attempt to compare nil with number",
  }
  assertErrorMsgContains( msg[1], mth, 'seti0', errCMat, nan, 1i )
  assertErrorMsgContains( msg[1], mth, 'seti0', errCMat,-1  , 1i )
  assertErrorMsgContains( msg[1], mth, 'seti0', errCMat,-eps, 1i )
  assertErrorMsgContains( msg[1], mth, 'seti0', errCMat, 4  , 1i )
  assertErrorMsgContains( msg[2], mth, 'seti0', errCMat, nil, 1i )
end

function TestCMatrixSet:testSeti0()
  for _,cm in ipairs(G.cmattmp) do
    for i=1,cm:size() do
      cm:seti0((i-1), complex(i,i) )
      assertEquals( cm:geti0(i-1), complex(i,i) )
    end
  end
end

function TestCMatrixErr:testSeti()
  local msg = {
    "1-index out of bounds"             ,
    "attempt to compare nil with number",
  }
  assertErrorMsgContains( msg[1], mth, 'seti', errCMat, nan  , 1i )
  assertErrorMsgContains( msg[1], mth, 'seti', errCMat, 0    , 1i )
  assertErrorMsgContains( msg[1], mth, 'seti', errCMat, 1-eps, 1i )
  assertErrorMsgContains( msg[1], mth, 'seti', errCMat, 5    , 1i )
  assertErrorMsgContains( msg[2], mth, 'seti', errCMat, nil  , 1i )
end

function TestCMatrixSet:testSeti()
  for _,cm in ipairs(G.cmattmp) do
    for i=1,cm:size() do
      cm:seti((i), complex(i,i))
      assertEquals( cm:geti(i), complex(i,i) )
    end
  end
end

function TestCMatrixErr:testSet0()
  local msg = {
    "0-index out of bounds"             ,
    "attempt to compare nil with number",
  }
  assertErrorMsgContains( msg[1], mth, 'set0', errCMat, nan  , 1    , 1i )
  assertErrorMsgContains( msg[1], mth, 'set0', errCMat,-1    , 0    , 1i )
  assertErrorMsgContains( msg[1], mth, 'set0', errCMat,-1+eps, 0    , 1i )
  assertErrorMsgContains( msg[1], mth, 'set0', errCMat, 0    ,-1+eps, 1i )
  assertErrorMsgContains( msg[1], mth, 'set0', errCMat, 2    , 1    , 1i )
  assertErrorMsgContains( msg[1], mth, 'set0', errCMat, 1    , 2    , 1i )
  assertErrorMsgContains( msg[2], mth, 'set0', errCMat, nil  , 1    , 1i )
  assertErrorMsgContains( msg[2], mth, 'set0', errCMat, 1    , nil  , 1i )
end

function TestCMatrixSet:testSet0()
  for _,cm in ipairs(G.cmattmp) do
    local nr, nc = cm:sizes()
    for i=1,nr do
    for j=1,nc do
      cm:set0( i-1,j-1, idxC(i,j,nc) )
      assertEquals( cm:get0(i-1,j-1), idxC(i,j,nc) )
    end end
  end
end

function TestCMatrixErr:testSet()
  local msg = {
    "1-index out of bounds"             ,
    "attempt to compare nil with number",
  }
  assertErrorMsgContains( msg[1], mth, 'set', errCMat, nan  , 1    , 1i )
  assertErrorMsgContains( msg[1], mth, 'set', errCMat, 0    , 1    , 1i )
  assertErrorMsgContains( msg[1], mth, 'set', errCMat, 1    , 0    , 1i )
  assertErrorMsgContains( msg[1], mth, 'set', errCMat, 1-eps, 1    , 1i )
  assertErrorMsgContains( msg[1], mth, 'set', errCMat, 1    , 1-eps, 1i )
  assertErrorMsgContains( msg[2], mth, 'set', errCMat, nil  , 1    , 1i )
end

function TestCMatrixSet:testSet()
  for _,cm in ipairs(G.cmattmp) do
    local nr, nc = cm:sizes()
    for i=1,nr do
    for j=1,nc do
      cm:set( i, j, idxC(i,j,nc) )
      assertEquals( cm:get(i,j), idxC(i,j,nc) )
    end end
  end
end

function TestCMatrixErr:testSame()
  local msg = {
    "invalid argument #1 or #2 (nrow[,ncol] >=1 or table [of tables] expected)",
    "invalid argument #1 (non-empty table expected)"                           ,
  }
  assertErrorMsgContains( msg[1], mth, 'same', errCMat, 1   , ''      )
  assertErrorMsgContains( msg[1], mth, 'same', errCMat, 1   , 1..2    )
  assertErrorMsgContains( msg[1], mth, 'same', errCMat, 1   , nan     )
  assertErrorMsgContains( msg[2], mth, 'same', errCMat, 1   , {}      )
end

function TestCMatrixSet:testSame()
  local cm, _ = cmatrix(2)
  assertEquals( cm:same( nan), cmatrix(cm:sizes()) )
  assertEquals( cm:same( inf), cmatrix(cm:sizes()) )
  assertEquals( cm:same( 0  ), cmatrix(cm:sizes()) )
  for _,cm in ipairs(G.cmatidx) do
    -- no input
    assertEquals( cm:same()        , cmatrix(cm:sizes()) )
    -- two arg: nr, nc
    assertEquals( cm:same(2 , 2   ), cmatrix(2)   )
    assertEquals( cm:same(6 , 5   ), cmatrix(6,5) )
    assertEquals( cm:same(_ , 2 ,2), cmatrix(2)   )
    -- three arg: e_, nr, nc -> does nothing in cmatrix case
    assertEquals( cm:same(0i, 2, 2), cmatrix(2)   )
    assertEquals( cm:same(1 , 2, 2), cmatrix(2)   )
    -- one size defined
    --print( cm:same(_ , 1   ), cmatrix(1        , cm:ncol()) ) -- different output then matrix, is_nil(e_)
    --print( cm:same(_ , _, 1), cmatrix(cm:nrow(), 1        ) ) -- different output then matrix, is_nil(e_)
  end
end

-- getx, setx -----------------------------------------------------------------o

function TestCMatrixErr:testGetsub()
  local C = complex(1,1)
  local msg = {
    "invalid argument #2 (iterable expected)"                                  ,
    "invalid argument #3 (iterable expected)"                                  ,
    "invalid argument #4 (iterable expected)"                                  ,
    "invalid range member '1'"                                                 ,
    "cannot convert 'nil' to 'complex'"                                        ,
    "invalid argument #1 or #2 (nrow[,ncol] >=1 or table [of tables] expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'getsub', errCMat, nil              )
  assertErrorMsgContains( msg[1], mth, 'getsub', errCMat, ''               )
  assertErrorMsgContains( msg[1], mth, 'getsub', errCMat, \x x             )
  assertErrorMsgContains( msg[1], mth, 'getsub', errCMat, C                )
  assertErrorMsgContains( msg[2], mth, 'getsub', errCMat, 1   , nil        )
  assertErrorMsgContains( msg[2], mth, 'getsub', errCMat, 1   , ''         )
  assertErrorMsgContains( msg[2], mth, 'getsub', errCMat, 1   , \x x       )
  assertErrorMsgContains( msg[3], mth, 'getsub', errCMat, 0   , 0   , 1    )
  assertErrorMsgContains( msg[3], mth, 'getsub', errCMat, 1   , 1   , \x x )
  assertErrorMsgContains( msg[4], mth, 'getsub', errCMat, 1   , 1   , 1..4 )
  assertErrorMsgContains( msg[5], mth, 'getsub', errCMat, 0   , 0          )
  assertErrorMsgContains( msg[5], mth, 'getsub', errCMat, 0   , 1          )
  assertErrorMsgContains( msg[5], mth, 'getsub', errCMat, 1   , 0          )
  assertErrorMsgContains( msg[5], mth, 'getsub', errCMat, 3   , 1          )
  assertErrorMsgContains( msg[5], mth, 'getsub', errCMat, 1   , 3          )
  assertErrorMsgContains( msg[5], mth, 'getsub', errCMat, {0}       , 1    )
  assertErrorMsgContains( msg[5], mth, 'getsub', errCMat, vector(1) , 1    )
  assertErrorMsgContains( msg[6], mth, 'getsub', errCMat, 2..1      , 1    )
end

function TestCMatrixGet:testGetsub()
  local cm, r = G.cmatidx[25]
  assertEquals( cm:getsub(2,2          ):geti(1)  , cm:get(2,2) )
  assertEquals( cm:getsub(2,2,{}       )[1]       , cm:get(2,2) )
  assertEquals( cm:getsub(2,2,cvector(2)):get(1,1), cm:get(2,2) )
  assertEquals( cm:getsub(2,2,cvector(2)):get(2,1), 0+0i        )
  assertEquals( cm:getsub(2,2, vector(2)):get(2,1), 0           )
  r = cm:getsub( 1..2, 1..3) for i=1,2 do for j=1,3 do assertEquals( r:get(i,j), idxC(i,j,5) ) end end
  r = cm:getsub({1}  ,{1,2}) for i=1,1 do for j=1,2 do assertEquals( r:get(i,j), idxC(i,j,5) ) end end

  for _,cm in ipairs(G.cmatidx) do    -- 25  (all shapes over 5x5)
    local nr, nc = cm:sizes()
    for li=1,nr do                  -- 625 (all sub-shapes over 5x5)
    for lj=1,nc do
      local vi, vj = G.vi[li], G.vj[lj]
      vi:perm(); vj:perm()
      local r = cm:getsub(vi, vj)
      for i=1,li do
      for j=1,lj do
        assertEquals( r:get(i,j), cm:get(vi[i], vj[j]) )
      end end
    end end
  end
end

function TestCMatrixErr:testSetsub()
  local C = complex(1,1)
  local msg = {
    "invalid argument #2 (iterable expected)"          ,
    "invalid argument #3 (iterable expected)"          ,
    "invalid argument #4 (scalar or iterable expected)",
    "1-index out of bounds"                            ,
    "cannot convert 'nil' to 'double'"                 ,
  }
  assertErrorMsgContains( msg[1], mth, 'setsub', errCMat, nil , 1  , 1i  )
  assertErrorMsgContains( msg[1], mth, 'setsub', errCMat, ''  , 1  , 1i  )
  assertErrorMsgContains( msg[1], mth, 'setsub', errCMat, NaN , 1  , 1i  )
  assertErrorMsgContains( msg[1], mth, 'setsub', errCMat, \x x, 1  , 1i  )
  assertErrorMsgContains( msg[2], mth, 'setsub', errCMat, 1              )
  assertErrorMsgContains( msg[2], mth, 'setsub', errCMat, 1   , nil, 1i  )
  assertErrorMsgContains( msg[2], mth, 'setsub', errCMat, 1   , '' , 1i  )
  assertErrorMsgContains( msg[2], mth, 'setsub', errCMat, 1   , NaN, 1i  )
  assertErrorMsgContains( msg[3], mth, 'setsub', errCMat, 1   , 1  , nil )
  assertErrorMsgContains( msg[3], mth, 'setsub', errCMat, 1   , 1  , ''  )
  assertErrorMsgContains( msg[3], mth, 'setsub', errCMat, 1   , 1  , NaN )
  assertErrorMsgContains( msg[4], mth, 'setsub', errCMat, 0   , 1  , 1i  )
  assertErrorMsgContains( msg[4], mth, 'setsub', errCMat, 1   , 0  , 1i  )
  assertErrorMsgContains( msg[1], mth, 'setsub', errCMat, C   , 1  , 1i  )
  assertErrorMsgContains( msg[2], mth, 'setsub', errCMat, 1   , C  , 1i  )
end

function TestCMatrixSet:testSetsub()
-- add test: set only real, set only imaginary, set complex <- plus the same test

  local cm = G.cmattmp[25]
  cm:setsub( 1..5, 1, {1,1,1,1,1}) assertEquals( cm:getsub( 1..5, 1   ), cm:same(5,1):fill(1)    )
                                   assertEquals( cm:getsub( 1..5, 2..5), cm:same(5,4)            )
  cm:setsub( 1..5, 1, 1..5       ) assertEquals( cm:getsub( 1..5, 1   ), cm:same(5,1):fill(1..5) )
                                   assertEquals( cm:getsub( 1..5, 2..5), cm:same(5,4)            )
  cm:setsub( 1..5, 1..5, 1       ) assertEquals( cm:getsub( 1..5, 1..5), cm:same(5,5):fill(1)    )
  cm:zeros()
-- recycling
  cm:setsub( 1..5, 1   , {1i} ) assertEquals( cm:getsub( 1..5, 1   ), cm:same(5,1):fill(1):map\x x*1i )
                                assertEquals( cm:getsub( 1..5, 2..5), cm:same(5,4)            )
  cm:setsub( 1..5, 1   , 1..3 ) assertEquals( cm:getsub( 1..3, 1   ), cm:same(3,1):fill(1..3) )
                                assertEquals( cm:getsub( 4..5, 1   ), cm:same(2,1):fill(1..2) )
                                assertEquals( cm:getsub( 1..5, 2..5), cm:same(5,4)            )
  cm:setsub( 1..5, 1..5, 1..5 )
  for i =1,5 do assertEquals( cm:getsub( i, 1..5), cm:same(1,5):fill(1..5) ) end

  for i,cm in ipairs(G.cmattmp) do
    local nr, nc = cm:sizes()
    for li=1,nr do
    for lj=1,nc do
      local vi, vj = G.vi[li], G.vj[lj]
      cm:zeros()
      vi:perm(); vj:perm()
      local cmtemp = cm:same(#vi,#vj):fill(1..#vi*#vj):map(\x x+x*1i)
      cm:setsub(vi,vj,cmtemp)
      if     #vi ~= nr and #vj ~= nc then  assertEquals( cm:getsub(1    ..nr, #vj+1..nc), cm:same(nr    , nc-#vj) )
                                           assertEquals( cm:getsub(#vi+1..nr, 1    ..nc), cm:same(nr-#vi, nc    ) )
      elseif #vi == nr and #vj ~= nc then  assertEquals( cm:getsub(1    ..nr, #vj+1..nc), cm:same(nr    , nc-#vj) )
      elseif #vi ~= nr and #vj == nc then  assertEquals( cm:getsub(#vi+1..nr, 1    ..nc), cm:same(nr-#vi, nc    ) ) end

      local rset  = cm:getsub(vi, vj)
      for i=1,li do
      for j=1,lj do
        assertEquals( rset:get(i,j), idxC(i,j,lj) )
      end end
    end end
  end
end

function TestCMatrixErr:testGetv()
  local msg = {
    "invalid argument #2 (iterable expected)",
    "invalid argument #3 (iterable expected)",
    "cannot convert 'nil' to 'complex"       ,
    "invalid range member '1'"               ,
  }
  assertErrorMsgContains( msg[1], mth, 'getv', errCMat, nil             )
  assertErrorMsgContains( msg[1], mth, 'getv', errCMat, ''              )
  assertErrorMsgContains( msg[1], mth, 'getv', errCMat, NaN             )
  assertErrorMsgContains( msg[2], mth, 'getv', errCMat, 1        , ''   )
  assertErrorMsgContains( msg[2], mth, 'getv', errCMat, 1        , 1    )
  assertErrorMsgContains( msg[2], mth, 'getv', errCMat, 1        , \x x )
  assertErrorMsgContains( msg[3], mth, 'getv', errCMat, 0               )
  assertErrorMsgContains( msg[4], mth, 'getv', errCMat, 1        , 1..2 )
  assertErrorMsgContains( msg[3], mth, 'getv', errCMat, matrix(2)       )
end

function TestCMatrixGet:testGetv()
  local cm = cmatrix(4):fill(1..16)
  assertEquals( cm:getv(1   , {}       ), {1+0i}                )
  assertEquals( cm:getv(1   , vector(2)), cvector{1+0i,0+0i}    )
  assertEquals( cm:getv(1..2           ), cvector(2):fill(1..2):map\x x+0i )
  assertEquals( cm:getv({1,2}          ), cvector(2):fill(1..2):map\x x+0i )

  for _,cm in ipairs(G.cmatidx) do
    local cmn, nr, nc = cm:size(), cm:sizes()
    for j=1,cmn do assertEquals( cm:getv(j), cvector{j}:map\x x+x*1i ) end
    for li=1,nr do
      local vi = G.vi[li]:copy()
      vi:random(nil,1,cmn):perm()
      assertEquals( cm:getv(vi), vi:map\x x+x*1i )
    end
  end

  cm:getv(1..5,'in') assertEquals( cm, cmatrix(4):fill(1..16) ) -- same output - to documentation
end

function TestCMatrixErr:testSetv()
  local msg = {
    "invalid argument #2 (iterable expected)"          ,
    "invalid argument #3 (scalar or iterable expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'setv', errCMat, nil , 0    )
  assertErrorMsgContains( msg[1], mth, 'setv', errCMat, ''  , 0    )
  assertErrorMsgContains( msg[1], mth, 'setv', errCMat, NaN , 0    )
  assertErrorMsgContains( msg[1], mth, 'setv', errCMat, \x x, 0    )
  assertErrorMsgContains( msg[2], mth, 'setv', errCMat, 1   , ''   )
  assertErrorMsgContains( msg[2], mth, 'setv', errCMat, 1   , nil  )
  assertErrorMsgContains( msg[2], mth, 'setv', errCMat, 1   , NaN  )
  assertErrorMsgContains( msg[2], mth, 'setv', errCMat, 1   , \x x )
end

function TestCMatrixSet:testSetv()
  local cm = G.cmattmp[25]
  cm:setv(1..5, 1          ) assertEquals( cm:getv(1..5 ), cm:same(5 ,1):fill(1   ) )
                             assertEquals( cm:getv(6..25), cm:same(20,1)            )
  cm:setv(1..5, 1..5       ) assertEquals( cm:getv(1..5 ), cm:same(5 ,1):fill(1..5) )
                             assertEquals( cm:getv(6..25), cm:same(20,1)            )
  cm:setv(1..5, {0,0,0,0,0}) assertEquals( cm            , cm:same(5   )            )
-- recycling
  cm:setv(1..6, 1..3       ) assertEquals( cm:getv(1..3 ), cm:same(3 ,1):fill(1..3) )
                             assertEquals( cm:getv(4..6 ), cm:same(3 ,1):fill(1..3) )
  cm:setv(1..6, 1..7       ) assertEquals( cm:getv(1..6 ), cm:same(6 ,1):fill(1..6) )
                             assertEquals( cm:getv(7    ), cm:same(1 ,1)            )
  --cm:setv(1..5, {1i}       ) assertEquals( cm            , cm:same(5   ):fill(1):map\x x*1i ) -- same problem?
  cm:zeros()

  for _,c in ipairs(G.cmattmp) do
    local nr, nc = cm:sizes()
    for j=1,cm:size() do
      cm:setv(j,j)
      assertEquals( cm:getv(j), cvector{j} )
    end
    for li=1,nr do
      local vi = G.vi[li]
      vi:perm()
      local cmt = cm:getv(vi)
      cm:setv(vi, 1..li)
      assertEquals( cm:getv(vi), vi:same(li):fill(1..li) )
      cm:setv(vi, cmt   )
    end
  end
end

function TestCMatrixErr:testGetdiag()
  local msg = {
    "invalid argument #2 (iterable expected)",
    "invalid range member '1'"               ,
  }
  assertErrorMsgContains( msg[1], mth, 'getdiag', errCMat, ''   )
  assertErrorMsgContains( msg[1], mth, 'getdiag', errCMat, \x x )
  assertErrorMsgContains( msg[1], mth, 'getdiag', errCMat, 1    )
  assertErrorMsgContains( msg[2], mth, 'getdiag', errCMat, 1..2 )
end

function TestCMatrixGet:testGetdiag()
  for _,cm in ipairs(G.cmatidx) do
    local nr, nc = cm:sizes()
    local n , d  = min(nr,nc), cm:getdiag()
    assertEquals( {d:sizes()}, {n,1} )
    for i=1,n do assertEquals( d[i], cm:get(i,i) ) end
  end
end

function TestCMatrixErr:testSetdiag()
  local msg = {
    "invalid argument #2 (scalar or iterable expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'setdiag', errCMat, nil  )
  assertErrorMsgContains( msg[1], mth, 'setdiag', errCMat, ''   )
  assertErrorMsgContains( msg[1], mth, 'setdiag', errCMat, \x x )
end

function TestCMatrixSet:testSetdiag()
  for _,cm in ipairs(G.cmattmp) do
    local nr, nc = cm:sizes()
    local n = min(nr,nc)
    for i=1,n do
      local ra = cm:same(i,1):fill(1..i):map(\x x+x*1i)
      cm:setdiag(ra)
      local d = cm:getdiag()
      assertEquals( {cm:getdiag():sizes()}, {n,1} )
      for i=1,n do assertEquals( d[i], cm:get(i,i) ) end
    end
  end
  local cm = G.cmattmp[25]
  cm:setdiag(1..3) assertEquals( cm:getdiag(), cvector{1,2,3,1,2} )
  cm:setdiag(1..6) assertEquals( cm:getdiag(), cvector{1,2,3,4,5} )
end

function TestCMatrixErr:testGetrow()
  local msg = {
    "invalid argument #2 (iterable expected)",
    "invalid argument #3 (iterable expected)",
    "cannot convert 'nil' to 'complex'"       ,
    "invalid range member '1'"               ,
    "1-index out of bounds"                  ,
  }
  assertErrorMsgContains( msg[1], mth, 'getrow', errCMat, ''               )
  assertErrorMsgContains( msg[1], mth, 'getrow', errCMat, nil              )
  assertErrorMsgContains( msg[1], mth, 'getrow', errCMat, NaN              )
  assertErrorMsgContains( msg[1], mth, 'getrow', errCMat, \x x             )
  assertErrorMsgContains( msg[2], mth, 'getrow', errCMat, 1   , ''         )
  assertErrorMsgContains( msg[2], mth, 'getrow', errCMat, 1   , 1          )
  assertErrorMsgContains( msg[3], mth, 'getrow', errCMat, 0                )
  assertErrorMsgContains( msg[3], mth, 'getrow', errCMat, 5                )
  assertErrorMsgContains( msg[4], mth, 'getrow', errCMat, 1   , 1..2       )
  assertErrorMsgContains( msg[5], mth, 'getrow', errCMat, 1   , cvector(1) )
end

function TestCMatrixGet:testGetrow()
  for _,cm in ipairs(G.cmatidx) do
    local nr, nc = cm:sizes()
    for i=1,nr do
    for a=1,i  do
      for li=1,i-a+1 do
        local ra = a..i..li
        assertEquals( cm:getrow(ra), cm:getsub(ra, 1..nc) )
      end
    end end
  end
end

function TestCMatrixErr:testSetrow()
  local m = matrix(3)
  local msg = {
    "invalid argument #2 (iterable expected)"          ,
    "invalid argument #3 (scalar or iterable expected)",
    "1-index out of bounds"                            ,
    "cannot convert 'nil' to 'complex'"                ,
  }
  assertErrorMsgContains( msg[1], mth, 'setrow', errCMat, ''         )
  assertErrorMsgContains( msg[1], mth, 'setrow', errCMat, nil        )
  assertErrorMsgContains( msg[1], mth, 'setrow', errCMat, NaN        )
  assertErrorMsgContains( msg[1], mth, 'setrow', errCMat, \x x       )
  assertErrorMsgContains( msg[2], mth, 'setrow', errCMat, 1   , nil  )
  assertErrorMsgContains( msg[2], mth, 'setrow', errCMat, 1   , ''   )
  assertErrorMsgContains( msg[3], mth, 'setrow', errCMat, 0   , 1    )
  assertErrorMsgContains( msg[3], mth, 'setrow', errCMat, 3   , 1    )
end

function TestCMatrixSet:testSetrow()
  local cm = G.cmattmp[25]
  cm:setrow(1, 1)           assertEquals( cm:getrow(1   ), cm:same(1,5):fill(1)    )
                            assertEquals( cm:getrow(2..5), cm:same(4,5)            )
  cm:setrow(1, 1..5)        assertEquals( cm:getrow(1   ), cm:same(1,5):fill(1..5) )
                            assertEquals( cm:getrow(2..5), cm:same(4,5)            )
  cm:setrow(1, {0,0,0,0,0}) assertEquals( cm:getrow(1..5), cm:same(5,5)            )
-- recycling
  cm:setrow(1, 1..3)        assertEquals( cm:getrow(1   ), cm:same(1,5):fill({1,2,3,1,2}) )
                            assertEquals( cm:getrow(2..5), cm:same(4,5)                   )
  cm:setrow(1, {0} )        assertEquals( cm:getrow(1..5), cm:same(5,5)                   )

  for _,cm in ipairs(G.cmattmp) do
    local nr, nc = cm:sizes()
    for i=1,nr do
    for a=1,i  do
      for li=1,i-a+1 do
        local ra = a..i..li
        local r = 1..nc*#ra
        cm:setrow(ra,r)
        for ii=1,#ra do
        for jj=1,nc  do
          assertEquals( cm:getrow(ra):get(ii,jj), idx(ii,jj,nc)+0i )
        end end
        cm:setrow(ra,0)
      end
    end end
  end
end

function TestCMatrixErr:testGetcol()
  local msg = {
    "invalid argument #2 (iterable expected)",
    "invalid argument #3 (iterable expected)",
    "cannot convert 'nil' to 'complex'"      ,
    "invalid range member '1'"               ,
    "1-index out of bounds"                  ,
  }
  assertErrorMsgContains( msg[1], mth, 'getcol', errCMat, ''               )
  assertErrorMsgContains( msg[1], mth, 'getcol', errCMat, nil              )
  assertErrorMsgContains( msg[1], mth, 'getcol', errCMat, NaN              )
  assertErrorMsgContains( msg[1], mth, 'getcol', errCMat, \x x             )
  assertErrorMsgContains( msg[2], mth, 'getcol', errCMat, 1   , ''         )
  assertErrorMsgContains( msg[2], mth, 'getcol', errCMat, 1   , 1          )
  assertErrorMsgContains( msg[3], mth, 'getcol', errCMat, 0                )
  assertErrorMsgContains( msg[3], mth, 'getcol', errCMat, 3                )
  assertErrorMsgContains( msg[4], mth, 'getcol', errCMat, 1   , 1..2       )
  assertErrorMsgContains( msg[5], mth, 'getcol', errCMat, 1   , cvector(1) )
end

function TestCMatrixGet:testGetcol()
  local cm = G.cmatidx[25]
  assertEquals( cm:getcol({1,2}          ), cm:getsub(1..5,{1,2}    ) )
  assertEquals( cm:getcol(vector{1,2}    ), cm:getsub(1..5,{1,2}    ) )
  assertEquals( cm:getcol(vector{1}  , {}), cm:getsub(1..5,{1}  , {}) )

  for _,cm in ipairs(G.cmatidx) do
    local nr, nc = cm:sizes()
    for j=1,nc do
    for b=1,j  do
      for lj = 1,j-b+1 do
        local rb = b..j..lj
        assertEquals( cm:getcol(rb) , cm:getsub(1..nr,rb) )
      end
    end end
  end
end

function TestCMatrixErr:testSetcol()
  local msg = {
    "invalid argument #2 (iterable expected)"          ,
    "invalid argument #3 (scalar or iterable expected)",
    "1-index out of bounds"                            ,
    "cannot convert 'nil' to 'double'"                 ,
  }
  assertErrorMsgContains( msg[1], mth, 'setcol', errCMat, ''         )
  assertErrorMsgContains( msg[1], mth, 'setcol', errCMat, nil        )
  assertErrorMsgContains( msg[1], mth, 'setcol', errCMat, NaN        )
  assertErrorMsgContains( msg[1], mth, 'setcol', errCMat, \x x       )
  assertErrorMsgContains( msg[2], mth, 'setcol', errCMat, 1   ,  ''  )
  assertErrorMsgContains( msg[2], mth, 'setcol', errCMat, 1   ,  nil )
  assertErrorMsgContains( msg[3], mth, 'setcol', errCMat, 0   ,  1   )
  assertErrorMsgContains( msg[3], mth, 'setcol', errCMat, 3   ,  1   )
end

function TestCMatrixSet:testSetcol()
  local cm = G.cmattmp[25]
  cm:setcol(1, 1)           assertEquals( cm:getcol(1   ), cm:same(5,1):fill(1   ) )
                            assertEquals( cm:getcol(2..5), cm:same(5,4)            )
  cm:setcol(1, 1..5)        assertEquals( cm:getcol(1   ), cm:same(5,1):fill(1..5) )
                            assertEquals( cm:getcol(2..5), cm:same(5,4)            )
  cm:setcol(1, {0,0,0,0,0}) assertEquals( cm:getcol(1..5), cm:same(5,5)            )
-- recycling
  cm:setcol(1, 1..3)        assertEquals( cm:getcol(1   ), cm:same(5,1):fill({1,2,3,1,2}) )
                            assertEquals( cm:getcol(2..5), cm:same(5,4)                   )
  cm:setcol(1, {0} )        assertEquals( cm:getcol(1..5), cm:same(5,5)                   )
  for _,cm in ipairs(G.cmattmp) do
    local nr, nc = cm:sizes()
    for j=1,nc do
    for b=1,j  do
      for lj = 1,j-b+1 do
        local rb = b..j..lj
        local r = 1..nr*#rb
        cm:setcol(rb,r)
        for ii=1,nr  do
        for jj=1,#rb do
          assertEquals( cm:getcol(rb):get(ii,jj), idx(jj,ii,nr)+0i )
        end end
        cm:setcol(rb,0)
      end
    end end
  end
end

-- size -----------------------------------------------------------------------o

function TestCMatrix:testNrow()
  for i,cm in ipairs(G.cmatidx) do
    assertEquals( cm:nrow(), G.size[i][1] )
  end
end

function TestCMatrix:testNcol()
  for i,cm in ipairs(G.cmatidx) do
    assertEquals( cm:ncol(), G.size[i][2] )
  end
end

function TestCMatrix:testSize()
  for i,cm in ipairs(G.cmatidx) do
    assertEquals( cm:size(), G.size[i][1]*G.size[i][2] )
  end
end

function TestCMatrix:testSizes()
  for i,cm in ipairs(G.cmatidx) do
    assertEquals( {cm:sizes()}, G.size[i] )
  end
end

function TestCMatrix:testTsizes()
  for i,cm in ipairs(G.cmatidx) do
    assertEquals( {cm:tsizes()}, {G.size[i][2], G.size[i][1]} )
  end
end

-- in place -------------------------------------------------------------------o

function TestCMatrixInPlace:setUp()
  for _,cm in ipairs(G.cmatidx) do cm:fill(1..cm:size()):map(\x x+x*1i) end
end

function TestCMatrixInPlace:tearDown()
  for _,cm in ipairs(G.cmatidx) do cm:fill(1..cm:size()):map(\x x+x*1i) end
end
 --[[

function TestCMatrixErr:testRandom()
  local msg, s = {
    "invalid argument #1 or #2 (nrow[,ncol] >=1 or table [of tables] expected)",
    "invalid argument #1 (non-empty table expected)"                           ,
  }
  assertErrorMsgContains( msg[1], mth, 'same', errCMat, 1, ''   )
  assertErrorMsgContains( msg[1], mth, 'same', errCMat, 1, 1..2 )
  assertErrorMsgContains( msg[1], mth, 'same', errCMat, 1, nan  )
  assertErrorMsgContains( msg[2], mth, 'same', errCMat, 1, {}   )
end

function TestCMatrixInPlace:testRandom()
  local oldVal, val = {}, {}
  for _,m in ipairs(G.cmatidx) do
    local mn = m:size()
    m:random()
    for i = 1,mn do
      val[i] = m:geti(i)
      assertTrue ( val[i] <  1    )
      assertTrue ( val[i] >= 0    )
      assertFalse( val[i] == oldVal[i] )
      oldVal[i] =  val[i]
    end
    m:random(nil,1,mn)
    for i = 1,mn do
      assertTrue ( m:geti(i) <= mn )
      assertTrue ( m:geti(i) >= 1  )
    end
  end
end

function TestCMatrixInPlaceII:testPerm()
  local oldV = {}
  local v = vector(25):fill(1..25)
  oldV[0] = 0
  for i=1,10 do
    v = v:perm()
    for is=1,v:size() do
      assertTrue( v:geti(is) <= 25 )
      assertTrue( v:geti(is) >= 1  )
    end
    assertFalse( v == oldV[i-1] )
    oldV[i] = v:copy()
  end
end

function TestCMatrixErr:testFill()
  local msg = {
    "invalid argument #2 (scalar, callable or indexable expected)",
    "incompatible container size"                                 ,
    "invalid container (iterable expected)"                       ,
  }
  assertErrorMsgContains( msg[1], mth,'fill', errCMat, nil  )
  assertErrorMsgContains( msg[1], mth,'fill', errCMat, true )
  assertErrorMsgContains( msg[1], mth,'fill', errCMat, ''   )
  assertErrorMsgContains( msg[2], mth,'fill', errCMat, {}   )
end
function TestCMatrixInPlace:testFill()
  for _,m in ipairs(G.cmatidx) do
    --scalar
    m:fill(nan)               for i=1,m:size() do assertNaN   ( m:geti(i)      ) end
    m:fill(inf)               for i=1,m:size() do assertInf   ( m:geti(i)      ) end
    m:fill(1  )               for i=1,m:size() do assertEquals( m:geti(i), 1   ) end
    m:fill(complex(1,1))      for i=1,m:size() do assertEquals( m:geti(i), 1   ) end
    --generator
    m:fill(1..#m)             for i=1,m:size() do assertEquals( m:geti(i), i   ) end
    m:fill\x x^2              for i=1,m:size() do assertEquals( m:geti(i), i^2 ) end
    --2D container
    m:fill( m:same() )        for i=1,m:size() do assertEquals( m:geti(i), 0   ) end
    --1D container
    t={} for i=1,m :size() do t[i]=i end
    m:fill(t)                 for i=1,m:size() do assertEquals( m:geti(i), i   ) end
    m:fill(vector(m :size())) for i=1,m:size() do assertEquals( m:geti(i), 0   ) end
  end
  local m, t = matrix(5), {}
  for i=1,5 do t[i] = {}      for j=1,5 do t[i][j]=(i-1)*5+j end end
  m :fill(t)                  for i=1,m:size() do assertEquals( m:geti(i), i ) end
  assertTrue ( is_matrix( m:same():fill(complex(1,1))) ) -- no matrix types change
end

function TestCMatrixErr:testCopy()
  local msg = {
    "invalid argument #1 (matrix expected)",
  }
  assertErrorMsgContains( msg[1], mth,'copy', errCMat, 1 )
end

function TestCMatrixInPlaceII:testCopy()
  for i,m in ipairs(G.cmatidx) do
    local mcopy = matrix( m:sizes() )
    mcopy:copy(m)
    assertEquals( m, mcopy )
  end
end

function TestCMatrixInPlaceII:testResize()
  local mres, minr, minc, _
  for i,m in ipairs(G.cmatidx) do
    local nr,nc = m:sizes()
    for ic=nc+1,nc+3 do
    for ir=nr+1,nr+3 do
      mres       = m:resize(ir, ic)
      minr, minc = min(nr,ir), min(nc,ic)
      assertEquals( {mres:sizes()}                    , {ir, ic}                    )
      assertEquals( mres:getsub(1..minr   ,1..minc   ), m:getsub(1..minr ,1..minc ) )
      assertEquals( mres:getsub(minr+1..ir,1..minc   ), m:same(_, ir-minr, minc   ) )
      assertEquals( mres:getsub(1..minr   ,minc+1..ic), m:same(_, minr   , ic-minc) )
    end
    end
    for ic=1,nc do
    for ir=1,nr do
      mres       = m:resize(ir, ic)
      minr, minc = min(nr,ir), min(nc,ic)
      assertEquals( {mres:sizes()}, {ir, ic}                  )
      assertEquals( mres          , m:getsub(1..minr,1..minc) )
    end
    end
  end
end
]]
function TestCMatrixInPlace:testZeros()
  for _,cm in ipairs(G.cmatidx) do
    cm:zeros()
    assertEquals( cm, cm:same() )
  end
end

function TestCMatrixInPlace:testOnes()
  for _,cm in ipairs(G.cmatidx) do
    cm:ones(    ) assertEquals( cm, cm:same():fill(1   ) )
    cm:ones(2   ) assertEquals( cm, cm:same():fill(2   ) )
    cm:ones(  1i) assertEquals( cm, cm:same():fill(  1i) )
    cm:ones(1+1i) assertEquals( cm, cm:same():fill(1+1i) )
  end
end
--[[

function TestCMatrixInPlace:testEye()
  for i,m in ipairs(G.cmatidx) do
    local nr, nc = m:sizes()
    m:eye()
    for i=1,nr do
    for j=1,nc do
      if i==j then assertEquals( m:get(i,j), 1 )
      else         assertEquals( m:get(i,j), 0 ) end
    end end
  end
end

function TestCMatrixErr:testSymp()
  local msg = {
    "invalid argument #1 (2n matrix expected)",
  }
  assertErrorMsgContains( msg[1], mth,'symp',  matrix(3)   )
  assertErrorMsgContains( msg[1], mth,'symp',  vector(2)   )
  assertErrorMsgContains( msg[1], mth,'symp',  matrix(4,3) )
end

function TestCMatrixInPlaceII:testSymp()
  for i=2,6,2 do
    local m = matrix(i):symp()
    assertTrue( m:t() == -m )
    for ii=1,m:ncol() do
    for jj=1,m:nrow() do
      if     ii==2 and jj==1 then assertEquals( m:get(ii,jj),-1 )
      elseif ii==4 and jj==3 then assertEquals( m:get(ii,jj),-1 )
      elseif ii==6 and jj==5 then assertEquals( m:get(ii,jj),-1 )
      elseif ii==1 and jj==2 then assertEquals( m:get(ii,jj), 1 )
      elseif ii==3 and jj==4 then assertEquals( m:get(ii,jj), 1 )
      elseif ii==5 and jj==6 then assertEquals( m:get(ii,jj), 1 )
      else                        assertEquals( m:get(ii,jj), 0 ) end
    end end
  end
end

function TestCMatrixErr:testCirc()
  local msg = {
    "invalid argument #2 (iterable expected)",
  }
  assertErrorMsgContains( msg[1], mth,'circ', errCMat, nil  )
  assertErrorMsgContains( msg[1], mth,'circ', errCMat, 1    )
  assertErrorMsgContains( msg[1], mth,'circ', errCMat, \x x )
end

function TestCMatrixInPlaceII:testCirc()
  for i=1,5 do
    local m = matrix(i)
    local t = {} for j=1,i do t[j]=j end
    --'row'
    m:circ(t)
    for j=1,i   do assertEquals( m:get(j  ,j  ), 1   ) end
    for j=1,i-1 do assertEquals( m:get(j+1,j  ), 2   )
                   assertEquals( m:get(j  ,j+1), i   ) end
    for j=1,i-2 do assertEquals( m:get(j+2,j  ), 3   )
                   assertEquals( m:get(j  ,j+2), i-1 ) end
    for j=1,i-3 do assertEquals( m:get(j+3,j  ), 4   )
                   assertEquals( m:get(j  ,j+3), i-2 ) end
    m:fill(0):circ(vector(i):fill(1..i))
    for j=1,i   do assertEquals( m:get(j  ,j  ), 1   ) end
    for j=1,i-1 do assertEquals( m:get(j+1,j  ), 2   )
                   assertEquals( m:get(j  ,j+1), i   ) end
    for j=1,i-2 do assertEquals( m:get(j+2,j  ), 3   )
                   assertEquals( m:get(j  ,j+2), i-1 ) end
    for j=1,i-3 do assertEquals( m:get(j+3,j  ), 4   )
                   assertEquals( m:get(j  ,j+3), i-2 ) end
    --'col'
    m:fill(0):circ(matrix(1,i):fill(1..i))
    for j=1,i   do assertEquals( m:get(j  ,j  ), 1   ) end
    for j=1,i-1 do assertEquals( m:get(j+1,j  ), i   )
                   assertEquals( m:get(j  ,j+1), 2   ) end
    for j=1,i-2 do assertEquals( m:get(j+2,j  ), i-1 )
                   assertEquals( m:get(j  ,j+2), 3   ) end
    for j=1,i-3 do assertEquals( m:get(j+3,j  ), i-2 )
                   assertEquals( m:get(j  ,j+3), 4   ) end
  end
end

function TestCMatrixInPlaceII:testShift() --TODO: recheck InPlaceII
  local m = vector(4):fill(1..4)
  assertEquals( m:shift( 0, 0), m )
  assertEquals( m:shift( 4, 0), m )
  assertEquals( m:shift( 0, 1), m )
  assertEquals( m:shift( 0, 2), m )
  m = matrix(2):fill(1..4)
  assertEquals( m:shift( 0, 0), m )
  assertEquals( m:shift( 3, 0), m )
  assertEquals( m:shift(-3, 0), m )

  for nr=1,5 do
  for nc=1,5 do
    m = matrix(nr,nc):fill(1..nr*nc)
    for inc=0,nc do
    for inr=0,nr do
      m:shift(inr,inc)
      for jnr=1,nr do
      for jnc=1,nc do
        if     jnc<=inc and jnr<=inr then assertEquals( m:get(jnr,jnc), idx(jnr+(nr-inr),jnc+(nc-inc),nc) )
        elseif jnc<=inc and jnr> inr then assertEquals( m:get(jnr,jnc), idx(jnr-inr     ,jnc+(nc-inc),nc) )
        elseif jnc> inc and jnr<=inr then assertEquals( m:get(jnr,jnc), idx(jnr+(nr-inr),jnc- inc    ,nc) )
        else                              assertEquals( m:get(jnr,jnc), idx(jnr-inr     ,jnc- inc    ,nc) ) end
      end end
      m:shift(-inr,-inc)
    end end
  end end
end

function TestCMatrixErr:testReshape()
  local msg = {
    "invalid matrix new sizes",
  }
  assertErrorMsgContains( msg[1], mth,'reshape', errCMat, nil, 2 )
  assertErrorMsgContains( msg[1], mth,'reshape', errCMat, 0  , 1 )
  assertErrorMsgContains( msg[1], mth,'reshape', errCMat, 1  , 0 )
  assertErrorMsgContains( msg[1], mth,'reshape', errCMat, 3  , 2 )
  assertErrorMsgContains( msg[1], mth,'reshape', errCMat, 1  , 5 )
end

function TestCMatrixInPlaceII:testReshape()
  local m
  m = matrix(2,2) assertEquals( {m:reshape() :sizes()}, {4,1} )
  m = matrix(2,2) assertEquals( {m:reshape(1):sizes()}, {1,1} )
  for nr=1,5 do
  for nc=1,5 do
    for i=1,nr do
    for j=1,nc do
      m = matrix(nr,nc):fill(1..nr*nc)
      m:reshape(i,j)
      assertEquals( {m:sizes()}, {i,j}                    )
      assertEquals( m          , matrix(i,j):fill(1..i*j) )
    end end
  end end
end

-- foreach, filter, map, fold, scan -------------------------------------------o

function TestCMatrixFun:setUp()
  for _,m in ipairs(G.cmatidx) do m:fill(1..m:size()) end
end

function TestCMatrixFun:tearDown()
  for _,m in ipairs(G.cmatidx) do m:fill(1..m:size()) end
end

function TestCMatrixErr:testForeach()
  local msg = {
    "invalid argument #2 (callable expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'foreach', errCMat, nil       )
  assertErrorMsgContains( msg[1], mth, 'foreach', errCMat, ''        )
  assertErrorMsgContains( msg[1], mth, 'foreach', errCMat, 1         )
  assertErrorMsgContains( msg[1], mth, 'foreach', errCMat, 1..2      )
  assertErrorMsgContains( msg[1], mth, 'foreach', errCMat, matrix(1) )
  assertErrorMsgContains( msg[1], mth, 'foreach', errCMat, { }       )
end

function TestCMatrixFun:testForeach()
  for _,m in ipairs(G.cmatidx) do
    local t = table.new(m:sizes())
    local f = \x,i,j => t[i][j] = x  end
    local nr, nc = m:sizes()
    for i=0,nr-1 do local c = t[i+1] or table.new(nc,0); t[i+1] = c end
    m:foreach(f)
    for i=1,nr do for j=1,nc do assertEquals( t[i][j], idx(i,j,nc) ) end end
  end
end

function TestCMatrixErr:testMap()
  local msg = {
    "invalid argument #2 (callable expected)"                 ,
    "invalid argument #2 (scalar function expected)"          ,
    "invalid argument #3 (iterable expected)"                 ,
    "attempt to perform arithmetic on local 'y' (a nil value)",
    "invalid range member '1'"                                ,
  }
  assertErrorMsgContains( msg[1], mth, 'map', errCMat, ''              )
  assertErrorMsgContains( msg[1], mth, 'map', errCMat, 1..2            )
  assertErrorMsgContains( msg[1], mth, 'map', errCMat, 1               )
  assertErrorMsgContains( msg[1], mth, 'map', errCMat, matrix(1)       )
  assertErrorMsgContains( msg[1], mth, 'map', errCMat, {}              )
  assertErrorMsgContains( msg[2], mth, 'map', errCMat, '!'             )
  assertErrorMsgContains( msg[4], mth, 'map', errCMat, '+'             )
  assertErrorMsgContains( msg[3], mth, 'map', errCMat, \x x+1   , ''   )
  assertErrorMsgContains( msg[3], mth, 'map', errCMat, \x x+1   , 1    )
  assertErrorMsgContains( msg[5], mth, 'map', errCMat, \x x+1   , 1..2 )
end

function TestCMatrixFun:testMap()
  for i,m in ipairs(G.cmatidx) do
    local mn, nr, nc = m:size(), m:sizes()
    assertEquals( m:map('~'      ), m:same():fill(-1..-mn..-1) )
    assertEquals( m:map(\x x-x   ), m:same()                   )
    --totable test
    assertEquals( m:map(\x x-x,{}), rep(0    , mn) )
    assertEquals( m:map('!'   ,{}), rep(false, mn) )
    --'in' place test
    m:map('~'   , 'in') assertEquals( m, m:same():fill(-1..-mn..-1) )
    m:map(\x x-x, 'in') assertEquals( m, m:same()                   )
  end
end

function TestCMatrixErr:testMap2()
  local m = matrix(1)
  local msg = {
    "invalid argument #2 (scalar or iterable expected)"       ,
    "invalid argument #3 (callable expected)"                 ,
    "invalid argument #3 (scalar function expected)"          ,
    "invalid argument #4 (iterable expected)"                 ,
    "invalid range member '1'"                                ,
    "attempt to perform arithmetic on local 'y' (a nil value)",
  }
  assertErrorMsgContains( msg[1], mth, 'map2', errCMat, nil               )
  assertErrorMsgContains( msg[1], mth, 'map2', errCMat, ''                )
  assertErrorMsgContains( msg[1], mth, 'map2', errCMat, NaN               )
  assertErrorMsgContains( msg[1], mth, 'map2', errCMat, \x x              )
  assertErrorMsgContains( msg[2], mth, 'map2', errCMat, m    , nil        )
  assertErrorMsgContains( msg[2], mth, 'map2', errCMat, m    , ''         )
  assertErrorMsgContains( msg[2], mth, 'map2', errCMat, m    , 1..2       )
  assertErrorMsgContains( msg[2], mth, 'map2', errCMat, m    , 1          )
  assertErrorMsgContains( msg[3], mth, 'map2', errCMat, m    , '!'        )
  assertErrorMsgContains( msg[4], mth, 'map2', errCMat, m    , \x x, 1    )
  assertErrorMsgContains( msg[5], mth, 'map2', errCMat, m    , \x x, 1..2 )
  assertErrorMsgContains( msg[6], mth, 'map2', errCMat, m    , \x,y  x+y  )
end

function TestCMatrixFun:testMap2()
  for _,m in ipairs(G.cmatidx) do
    local mn, nr, nc = m:size(), m:sizes()
    assertEquals( m:map2(1 , '+'     ), m:same():fill( 2.. mn+1  ) )
    assertEquals( m:map2(1 , \x,y x-y), m:same():fill( 0.. mn-1  ) )
    assertEquals( m:map2(m, '~'      ), m:same():fill(-1..-mn..-1) )

    local ir = { m, 1..mn, totable(1..mn) }
    for d=1,#ir do
      assertEquals( m:map2(ir[d], '+'     ), m:same():fill(2..2*mn..2) )
      assertEquals( m:map2(ir[d], \x,y x-y), m:same()                  )
      --totable test
      assertEquals( m:map2(ir[d], '-'   , {}), rep(0    , mn) )
      assertEquals( m:map2(ir[d], '<'   , {}), rep(false, mn) )
      assertEquals( m:map2(m    , '!'   , {}), rep(false, mn) )
    end
    --'in' place test
    for d=1,#ir do
      m:map2(ir[d], '~'     , 'in') for i=1,#m do assertEquals( m:geti(i), i*(-1)^d ) end
    end
      m:map2(m    , \x,y x-y, 'in') assertEquals( m, matrix(nr,nc) )
  end
end

function TestCMatrixErr:testMap3()
  local m = matrix(1)
  local msg = {
    "invalid argument #2 (scalar or iterable expected)"       ,
    "invalid argument #3 (scalar or iterable expected)"       ,
    "invalid argument #4 (callable expected)"                 ,
    "invalid argument #4 (scalar function expected)"          ,
    "invalid argument #5 (iterable expected)"                 ,
    "invalid range member '1'"                                ,
    "attempt to perform arithmetic on local 'y' (a nil value)",
    "attempt to perform arithmetic on local 'z' (a nil value)",
  }
  assertErrorMsgContains( msg[1], mth, 'map3', errCMat, nil                          )
  assertErrorMsgContains( msg[1], mth, 'map3', errCMat, ''                           )
  assertErrorMsgContains( msg[1], mth, 'map3', errCMat, NaN                          )
  assertErrorMsgContains( msg[1], mth, 'map3', errCMat, \x x                         )
  assertErrorMsgContains( msg[2], mth, 'map3', errCMat, errCMat, nil                  )
  assertErrorMsgContains( msg[2], mth, 'map3', errCMat, errCMat, ''                   )
  assertErrorMsgContains( msg[2], mth, 'map3', errCMat, errCMat, NaN                  )
  assertErrorMsgContains( msg[2], mth, 'map3', errCMat, errCMat, \x x                 )
  assertErrorMsgContains( msg[3], mth, 'map3', errCMat, errCMat, errCMat, nil          )
  assertErrorMsgContains( msg[3], mth, 'map3', errCMat, errCMat, errCMat, 1..2         )
  assertErrorMsgContains( msg[3], mth, 'map3', errCMat, errCMat, errCMat, 1            )
  assertErrorMsgContains( msg[4], mth, 'map3', errCMat, m     , m     , '!'          )
  assertErrorMsgContains( msg[5], mth, 'map3', errCMat, errCMat, errCMat, \x x, 1      )
  assertErrorMsgContains( msg[6], mth, 'map3', errCMat, errCMat, errCMat, \x x, 1..2   )
  assertErrorMsgContains( msg[7], mth, 'map3', errCMat, m     , errCMat, \x,y,z x+y+z )
  assertErrorMsgContains( msg[7], mth, 'map3', errCMat, m     , m     , \x,y,z x+y+z )
  assertErrorMsgContains( msg[8], mth, 'map3', errCMat, errCMat, m     , \x,y,z x+y+z )
end

function TestCMatrixFun:testMap3()
  for _,m1 in ipairs(G.cmatidx) do
    local mn, nr, nc = m1:size(), m1:sizes()
    assertEquals( m1:map3(m1, m1, '~'             ), m1:same():fill(-1.. -mn..-1) )
    assertEquals( m1:map3(m1, m1, '+'             ), m1:same():fill( 2..2*mn.. 2) )
    assertEquals( m1:map3(m1, m1, \x,y,z x+y+z    ), m1:same():fill( 3..3*mn.. 3) )
    assertEquals( m1:map3(m1, m1, '<'         , {}), rep(false, #m1)              )

    local m2 = { m1, 1..#m1, totable(1..#m1) }
    local m3 = { m1, 1..#m1, totable(1..#m1) }
    for i=1,#m2 do
    for j=1,#m3 do
      assertEquals( m1:map3(m2[i],m3[j], \x,y,z x+y+z    ), m1:same():fill(3..3*mn..3) )
      assertEquals( m1:map3(m2[i],m3[j], \x,y,z x+y+z, {}),        totable(3..3*mn..3) ) -- totable test
    end end
    --'in' place test
    m1:map3(m1, m1, '~'         , 'in') assertEquals( m1, m1:same():fill(-1..  -mn..-1) )
    m1:map3(m1, m1, \x,y,z x+y+z, 'in') assertEquals( m1, m1:same():fill(-3..-3*mn..-3) )
  end
end

function TestCMatrixErr:testMapij()
  local msg = {
    "invalid argument #2 (callable expected)",
    "invalid argument #3 (iterable expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'mapij', errCMat, nil             )
  assertErrorMsgContains( msg[1], mth, 'mapij', errCMat, ''              )
  assertErrorMsgContains( msg[1], mth, 'mapij', errCMat, 1..2            )
  assertErrorMsgContains( msg[1], mth, 'mapij', errCMat, 1               )
  assertErrorMsgContains( msg[1], mth, 'mapij', errCMat, matrix(1)       )
  assertErrorMsgContains( msg[1], mth, 'mapij', errCMat, { }             )
  assertErrorMsgContains( msg[2], mth, 'mapij', errCMat, \x x+1   , ''   )
  assertErrorMsgContains( msg[2], mth, 'mapij', errCMat, \x x+1   , \x x )
end

function TestCMatrixFun:testMapij()
  local m1
  for i,m in ipairs(G.cmatidx) do
    local mn, nr, nc = m:size(), m:sizes()
    assertEquals( m:mapij '~'    , m:same():fill(-1..-mn..-1) )
    assertEquals( m:mapij \x x-x , m:same()                   )
    --totable test
    assertEquals( m:mapij('!'   ,{}), rep(false, mn) )
    assertEquals( m:mapij(\x x-x,{}), rep(0    , mn) )
    --'in' place test
    m:mapij('~'   , 'in')  assertEquals( m, m:same():fill(-1..-mn..-1) )
    m:mapij(\x x-x, 'in')  assertEquals( m, m:same()                   )

    m1 = m:mapij \x,i,j i+j for i=1,nr do for j=1,nc do assertEquals( m1:get(i,j), i+j ) end end
    m1 = m1:fill(1..nr*nc):mapij( \x,i,j => if j>3 then x=3 end return x end, {} )
    for i=1,nr do
    for j=1,nc do
      if j > 3 then assertEquals( m1[idx(i,j,nc)], 3           )
               else assertEquals( m1[idx(i,j,nc)], idx(i,j,nc) ) end
    end end
  end
end

function TestCMatrixErr:testMapat()
  local msg = {
    "invalid argument #2 (callable expected)"                 ,
    "invalid argument #3 (iterable expected)"                 ,
    "invalid argument #4 (iterable expected)"                 ,
    "invalid range member '1'"                                ,
    "attempt to perform arithmetic on local 'x' (a nil value)",
    "attempt to perform arithmetic on local 'y' (a nil value)",
  }
  assertErrorMsgContains( msg[1], mth, 'mapat', errCMat, nil                    )
  assertErrorMsgContains( msg[1], mth, 'mapat', errCMat, ''                     )
  assertErrorMsgContains( msg[1], mth, 'mapat', errCMat, 1..2                   )
  assertErrorMsgContains( msg[1], mth, 'mapat', errCMat, 1                      )
  assertErrorMsgContains( msg[1], mth, 'mapat', errCMat, matrix(1)              )
  assertErrorMsgContains( msg[1], mth, 'mapat', errCMat, { }                    )
  assertErrorMsgContains( msg[2], mth, 'mapat', errCMat, \x x+1   , ''          )
  assertErrorMsgContains( msg[2], mth, 'mapat', errCMat, \x x+1   , nil         )
  assertErrorMsgContains( msg[2], mth, 'mapat', errCMat, \x x+1   , NaN         )
  assertErrorMsgContains( msg[2], mth, 'mapat', errCMat, \x x+1   , \x x        )
  assertErrorMsgContains( msg[3], mth, 'mapat', errCMat, \x x+1   , 1    , ''   )
  assertErrorMsgContains( msg[3], mth, 'mapat', errCMat, \x x+1   , 1    , \x x )
  assertErrorMsgContains( msg[4], mth, 'mapat', errCMat, \x x+1   , 1    , 1..2 )
  assertErrorMsgContains( msg[5], mth, 'mapat', errCMat, \x x+1   , 0           )
  assertErrorMsgContains( msg[5], mth, 'mapat', errCMat, \x x+1   , 5           )
  assertErrorMsgContains( msg[6], mth, 'mapat', errCMat, '+'      , 1           )
end

function TestCMatrixFun:testMapat()
  local m, mres
  for _,m in ipairs(G.cmatidx) do
    local mn, nr, nc = m:size(), m:sizes()
    for li=1,nr do
      local vi = G.vi[li]:copy()
      for j=1,li do vi[j] = random(1,mn) end
      vi:perm()
      assertEquals( m:mapat('~',vi):getv(vi), vector(#vi):fill(-vi) )
      assertEquals( m:mapat('!',vi):getv(vi), vector(#vi):fill( 0)  )
    end
  end
  m = G.cmatidx[5]
  mres = {-1,-2,-3, 4, 5}
  assertEquals   ( m:mapat('~',vector{1,2,3})    , vector(mres):t() )
  assertAllEquals( m:mapat('~',vector{1,2,3}, {}), mres             )
  mres = { 2, 3, 4, 4, 5}
  m:mapat(\x x+1,vector{1,2,3}, 'in') assertEquals( m, vector(mres):t() )
end

function TestCMatrixErr:testFoldl()
  local msg = {
    "invalid argument #2 (callable expected)"                    ,
    "invalid argument #5 (iterable expected)"                    ,
    "invalid argument #4 (string 'vec', 'row' or 'col' expected)",
    "invalid range member '1'"                                   ,
    "attempt to perform arithmetic on local 'x' (a table value)" ,
  }
  local m, cm = matrix(2), cmatrix(2)
  assertErrorMsgContains( msg[1], mth, 'foldl', errCMat, nil                   )
  assertErrorMsgContains( msg[1], mth, 'foldl', errCMat, NaN                   )
  assertErrorMsgContains( msg[1], mth, 'foldl', errCMat, ''                    )
  assertErrorMsgContains( msg[1], mth, 'foldl', errCMat, {}                    )
  assertErrorMsgContains( msg[1], mth, 'foldl', errCMat, 1                     )
  assertErrorMsgContains( msg[1], mth, 'foldl', errCMat, 1..2                  )
  assertErrorMsgContains( msg[1], mth, 'foldl', errCMat, m                     )
  assertErrorMsgContains( msg[1], mth, 'foldl', errCMat, cm                    )
  assertErrorMsgContains( msg[3], mth, 'foldl', errCMat, \x x, ''              )
  assertErrorMsgContains( msg[3], mth, 'foldl', errCMat, \x x, 1 , {}   , {}   )
  assertErrorMsgContains( msg[3], mth, 'foldl', errCMat, \x x, 1 , 1..2 , {}   )
  assertErrorMsgContains( msg[3], mth, 'foldl', errCMat, \x x, 1 , ''   , {}   )
  assertErrorMsgContains( msg[2], mth, 'foldl', errCMat, \x x, 1 , 'vec', ''   )
  assertErrorMsgContains( msg[2], mth, 'foldl', errCMat, \x x, 1 , 'vec', 1    )
  assertErrorMsgContains( msg[2], mth, 'foldl', errCMat, \x x, 1 , 'vec', \x x )
  assertErrorMsgContains( msg[5], mth, 'foldl', errCMat, '+' , {}              )
end
--[[
parameters:
  f: callable, x0: initial value, d: ['vec', 'row', 'col'], r: iterable
  r:{}, cmatrix(2), matrix(2), 1..2

fold cases:
  1) x:fold( f )
  2) x:fold( f, nil, d )      and 2') x:fold( f, d )
  3) x:fold( f, nil, nil, r ) and 3') x:fold( f, r ) and  3") x:fold( f, nil, r)
  4) x:fold( f, nil, d, r )   and 4') x:fold( f, d, r) and  4") x:fold( f, d, nil, r )
  5) x:fold( f, x0 )
  6) x:fold( f, x0 , d )
  7) x:fold( f, x0, nil, r ) and 7') x:fold( f, x0, r )
  8) x:fold( f, x0 , d, r )
]]
--[[
local sum = \r =>local x = 0    for i=1,r:size() do x = x + r[i] end return x end
local sub = \r =>local x = r[1] for i=2,r:size() do x = x - r[i] end return x end

function TestCMatrixFun:testFoldl()
  local _ = nil
  for i,m in ipairs(G.cmatidx) do
    local mn, nr, nc = m:size(), m:sizes()
    local s = sum(1..mn)
    --                     f  , x0 , d    , r
    assertEquals( m:foldl(\r r                ) , 1   ) -- 1)
    assertEquals( m:foldl('+' , 2  , nil  , {}) , s+2 ) -- 7)
    assertEquals( m:foldl('+'                 ) , s   ) -- 1)
    assertEquals( m:foldl('+'      , 'vec'    ) , s   ) -- 2)
    assertEquals( m:foldl('+' , nil, 'vec'    ) , s   ) -- 2)
    assertEquals( m:foldl('+'      , 'vec', {}) , s   ) -- 4)
    assertEquals( m:foldl('+' , 2             ) , s+2 ) -- 5)
    assertEquals( m:foldl('+' , 2  , 'vec'    ) , s+2 ) -- 6)
    assertEquals( m:foldl('+' , nil       , {}) , s   ) -- 3)
    assertEquals( m:foldl('+' , nil, nil  , {}) , s   ) -- 3)

    local t ={} for i=1,nc do t [i]=sum(idx(1,i,nc)..idx(nr,i,nc)..nc) end
    local tr={} for i=1,nr do tr[i]=sum(idx(i,1,nc)..idx(i,nc,nc)..1 ) end
    assertEquals   ( m:foldl('+'   , 'col'    ) , matrix(t ):t() ) -- 2)
    assertEquals   ( m:foldl('+'   , 'row'    ) , matrix(tr)     ) -- 2)
    assertEquals   ( m:foldl('+', 0, 'col'    ) , matrix(t ):t() ) -- 6)
    assertEquals   ( m:foldl('+', 0, 'row'    ) , matrix(tr)     ) -- 6)
    assertAllEquals( m:foldl('+', 0, 'col', {}) , t              ) -- 8)
    assertAllEquals( m:foldl('+', 0, 'row', {}) , tr             ) -- 8)

  -- non-commutative operations
    local mrefC = m:same(_,1  ):mapij\x,i,j sub(idx(1,j,nc)..idx(nr,j,nc)..nc)
    local mrefR = m:same(_,_,1):mapij\x,i,j sub(idx(i,1,nc)..idx(i,nc,nc)..1 )
    if mn%2 == 0 then assertEquals( m:foldl '~',-1 )
                 else assertEquals( m:foldl '~', 1 ) end
    assertEquals( m:foldl('-'       ) , sub(1..mn) )
    assertEquals( m:foldl('-', 'col') , mrefC      )
    assertEquals( m:foldl('-', 'row') , mrefR      )
  end
  assertEquals( vector(4):fill(4..1..-1):foldl '^', (4^3)^2 )
end

function TestCMatrixErr:testFoldr()
  local msg = {
    "invalid argument #2 (callable expected)"                    ,
    "invalid argument #5 (iterable expected)"                    ,
    "invalid argument #4 (string 'vec', 'row' or 'col' expected)",
    "invalid range member '1'"                                   ,
  }
  local m, cm = matrix(2), cmatrix(2)
  assertErrorMsgContains( msg[1], mth, 'foldr', errCMat, nil  )
  assertErrorMsgContains( msg[1], mth, 'foldr', errCMat, NaN  )
  assertErrorMsgContains( msg[1], mth, 'foldr', errCMat, ''   )
  assertErrorMsgContains( msg[1], mth, 'foldr', errCMat, {}   )
  assertErrorMsgContains( msg[1], mth, 'foldr', errCMat, 1    )
  assertErrorMsgContains( msg[1], mth, 'foldr', errCMat, 1..2 )
  assertErrorMsgContains( msg[1], mth, 'foldr', errCMat, m    )
  assertErrorMsgContains( msg[1], mth, 'foldr', errCMat, cm   )
  assertErrorMsgContains( msg[3], mth, 'foldr', errCMat, \x x, '')
  assertErrorMsgContains( msg[3], mth, 'foldr', errCMat, \x x, 1 , {}   , {}   )
  assertErrorMsgContains( msg[3], mth, 'foldr', errCMat, \x x, 1 , 1..2 , {}   )
  assertErrorMsgContains( msg[3], mth, 'foldr', errCMat, \x x, 1 , ''   , {}   )
  assertErrorMsgContains( msg[2], mth, 'foldr', errCMat, \x x, 1 , "vec", ''   )
  assertErrorMsgContains( msg[2], mth, 'foldr', errCMat, \x x, 1 , "vec", 1    )
  assertErrorMsgContains( msg[2], mth, 'foldr', errCMat, \x x, 1 , "vec", \x x )
end

function TestCMatrixFun:testFoldr()
  for _,m in ipairs(G.cmatidx) do
    local mn, nr, nc = m:size(), m:sizes()
    local s = sum(1..mn)
    assertEquals( m:foldr(\r r               ) , 1   ) -- 1)
    assertEquals( m:foldr('+' , 2 , nil  , {}) , s+2 ) -- 7)
    assertEquals( m:foldr('+'                ) , s   ) -- 1)
    assertEquals( m:foldr('+'     , 'vec'    ) , s   ) -- 2)
    assertEquals( m:foldr('+', nil, 'vec'    ) , s   ) -- 2)
    assertEquals( m:foldr('+'     , 'vec', {}) , s   ) -- 4)
    assertEquals( m:foldr('+', 2             ) , s+2 ) -- 5)
    assertEquals( m:foldr('+', 2  , 'vec'    ) , s+2 ) -- 6)
    assertEquals( m:foldr('+', nil       , {}) , s   ) -- 3)
    assertEquals( m:foldr('+', nil, nil  , {}) , s   ) -- 3)

    local t ={} for i=1,nc do t [i]=sum(idx(1,i,nc)..idx(nr,i,nc)..nc) end
    local tr={} for i=1,nr do tr[i]=sum(idx(i,1,nc)..idx(i,nc,nc)..1 ) end
    assertEquals   ( m:foldr('+'   , 'col'    ) , matrix(t ):t() ) -- 2)
    assertEquals   ( m:foldr('+'   , 'row'    ) , matrix(tr)     ) -- 2)
    assertEquals   ( m:foldr('+', 0, 'col'    ) , matrix(t ):t() ) -- 6)
    assertEquals   ( m:foldr('+', 0, 'row'    ) , matrix(tr)     ) -- 6)
    assertAllEquals( m:foldr('+', 0, 'col', {}) , t              ) -- 8)
    assertAllEquals( m:foldr('+', 0, 'row', {}) , tr             ) -- 8)

  -- non-commutative operations
    local mrefC = m:same(_,1 ,nc):mapij\x,i,j sum(idx(1,j,nc)..idx(nr,j,nc)..2*nc) - sum(idx(2,j,nc)..idx(nr,j,nc)..2*nc)
    local mrefR = m:same(_,nr,1 ):mapij\x,i,j sum(idx(i,1,nc)..idx(i,nc,nc)..2 )   - sum(idx(i,2,nc)..idx(i,nc,nc)..2   )
    local v = vector( m:size() ):fill(1..m:size()):map(\x => if x%2==0 then x=-x end return x end)
    if mn == 1 then assertEquals( m:foldr '~', 1 )
               else assertEquals( m:foldr '~',-1 ) end
    assertEquals( m:foldr '-'        , v:foldr('+') )
    assertEquals( m:foldr('-', 'col'), mrefC        )
    assertEquals( m:foldr('-', 'row'), mrefR        )
  end
  assertEquals( vector(4):fill(4..1..-1):foldr '^', 4^(3^2) )
end

--[[ scan cases:
1) x:scan( f )
2) x:scan( f, nil, d )      and 2') x:scan( f, d )
3) x:scan( f, nil, nil, r ) and 3') x:scan( f, r ) and  3") x:scan( f, nil, r)
4) x:scan( f, nil, d, r )   and 4') x:scan( f, d, r) and  4")x:scan( f, d, nil, r )
5) x:scan( f, x0 )
6) x:scan( f, x0 , d )
7) x:scan( f, x0 , nil, r ) and 7') x:scan( f, x0, r )
8) x:scan( f, x0 , d, r )              ]]
--[[
function TestCMatrixErr:testScanl()
  local msg = {
    "invalid argument #2 (callable expected)"                    ,
    "invalid argument #5 (iterable expected)"                    ,
    "invalid argument #4 (string 'vec', 'row' or 'col' expected)",
    "invalid range member '1'"                                   ,
  }
  local m, cm = matrix(2), cmatrix(2)
  assertErrorMsgContains( msg[1], mth, 'scanl', errCMat, nil                   )
  assertErrorMsgContains( msg[1], mth, 'scanl', errCMat, NaN                   )
  assertErrorMsgContains( msg[1], mth, 'scanl', errCMat, ''                    )
  assertErrorMsgContains( msg[1], mth, 'scanl', errCMat, {}                    )
  assertErrorMsgContains( msg[1], mth, 'scanl', errCMat, 1                     )
  assertErrorMsgContains( msg[1], mth, 'scanl', errCMat, 1..2                  )
  assertErrorMsgContains( msg[1], mth, 'scanl', errCMat, m                     )
  assertErrorMsgContains( msg[1], mth, 'scanl', errCMat, cm                    )
  assertErrorMsgContains( msg[3], mth, 'scanl', errCMat, \x x, ''              )
  assertErrorMsgContains( msg[3], mth, 'scanl', errCMat, \x x, 1 , {}   , {}   )
  assertErrorMsgContains( msg[3], mth, 'scanl', errCMat, \x x, 1 , 1..2 , {}   )
  assertErrorMsgContains( msg[3], mth, 'scanl', errCMat, \x x, 1 , ''   , {}   )
  assertErrorMsgContains( msg[2], mth, 'scanl', errCMat, \x x, 1 , 'vec', ''   )
  assertErrorMsgContains( msg[2], mth, 'scanl', errCMat, \x x, 1 , 'vec', 1    )
  assertErrorMsgContains( msg[2], mth, 'scanl', errCMat, \x x, 1 , 'vec', \x x )
end

function TestCMatrixFun:testScanl()
  for _,m in ipairs(G.cmatidx) do
    local mn, nr, nc = m:size(), m:sizes()
    local t = {} for i=1,mn do t[i] = sum(1..i) end
    local mref  = m:same():fill(1..mn):map(\x sum(1..x)  )
    local mref2 = m:same():fill(1..mn):map(\x sum(1..x)+2)
    assertEquals   ( m:scanl(\x x               ), m:same():fill(1) ) -- 1)
    assertEquals   ( m:scanl('+'                ), mref             ) -- 1)
    assertEquals   ( m:scanl('+','vec'          ), mref             ) -- 2)
    assertEquals   ( m:scanl('+', 2             ), mref2            ) -- 5)
    assertEquals   ( m:scanl('+', 2   ,'vec'    ), mref2            ) -- 6)
    assertAllEquals( m:scanl('+','vec', {}      ), t                ) -- 4)
    assertAllEquals( m:scanl('+', 0   ,'vec', {}), t                ) -- 8)
    assertAllEquals( m:scanl('+', nil       , {}), t                ) -- 3)
    assertAllEquals( m:scanl('+', nil , nil , {}), t                ) -- 3)
    assertAllEquals( m:scanl('+', 0   , nil , {}), t                ) -- 7)

    mref  = m:copy():mapij\x,i,j sum(idx(1,j,nc)..idx(i,j,nc)..nc)
    mref2 = m:copy():mapij\x,i,j sum(idx(i,1,nc)..idx(i,j,nc)..1 )
    assertEquals( m:scanl('+', 'col'), mref  ) -- 2)
    assertEquals( m:scanl('+', 'row'), mref2 ) -- 2)

  -- non-commutative operations
    mref  = m:same():fill(1..mn):map(\x sub(1..x))
    mref2 = m:copy():mapij\x,i,j sub(idx(i,1,nc)..idx(i,j,nc)..1 )
    assertEquals( m:scanl '-'        , mref  )
    assertEquals( m:scanl('-', 'row'), mref2 )
  end
  assertEquals( vector(4):fill(4..1..-1):scanl '^', vector{4, 4^3, (4^3)^2, ((4^3)^2)^1} )
end

function TestCMatrixErr:testScanr()
  local msg = {
    "invalid argument #2 (callable expected)"                    ,
    "invalid argument #5 (iterable expected)"                    ,
    "invalid argument #4 (string 'vec', 'row' or 'col' expected)",
    "invalid range member '1'"                                   ,
  }
  local m, cm = matrix(2), cmatrix(2)
  assertErrorMsgContains( msg[1], mth, 'scanr', errCMat, nil                   )
  assertErrorMsgContains( msg[1], mth, 'scanr', errCMat, NaN                   )
  assertErrorMsgContains( msg[1], mth, 'scanr', errCMat, ''                    )
  assertErrorMsgContains( msg[1], mth, 'scanr', errCMat, {}                    )
  assertErrorMsgContains( msg[1], mth, 'scanr', errCMat, 1                     )
  assertErrorMsgContains( msg[1], mth, 'scanr', errCMat, 1..2                  )
  assertErrorMsgContains( msg[1], mth, 'scanr', errCMat, m                     )
  assertErrorMsgContains( msg[1], mth, 'scanr', errCMat, cm                    )
  assertErrorMsgContains( msg[3], mth, 'scanr', errCMat, \x x, ''              )
  assertErrorMsgContains( msg[3], mth, 'scanr', errCMat, \x x, 1 , {}   , {}   )
  assertErrorMsgContains( msg[3], mth, 'scanr', errCMat, \x x, 1 , 1..2 , {}   )
  assertErrorMsgContains( msg[3], mth, 'scanr', errCMat, \x x, 1 , ''   , {}   )
  assertErrorMsgContains( msg[2], mth, 'scanr', errCMat, \x x, 1 , 'vec', ''   )
  assertErrorMsgContains( msg[2], mth, 'scanr', errCMat, \x x, 1 , 'vec', 1    )
  assertErrorMsgContains( msg[2], mth, 'scanr', errCMat, \x x, 1 , 'vec', \x x )
end

function TestCMatrixFun:testScanr()
  local function subR(r)
    local x = table.new(r:size(),1)
    x[r:size()] = r[r:size()]
    for i=r:size()-1,1,-1 do
      if i%2 == 0 then x[i]= -(x[i+1] - r[i])
                  else x[i]= - x[i+1] + r[i]  end
    end
    return x
  end
  for _,m in ipairs(G.cmatidx) do
    local mn, nr, nc = m:size(), m:sizes()
    local mref  = m:same():fill(1..mn):map(\x sum(x..mn))
    local mref2 = m:same():fill(1..mn):map(\x sum(x..mn)+2)
    local t = {} for i=1,mn do t[i] = sum(i..mn) end
    assertEquals   ( m:scanr(\x x               ) , m:same():fill(1..mn) ) -- 1)
    assertEquals   ( m:scanr('+'                ) , mref                 ) -- 1)
    assertEquals   ( m:scanr('+','vec'          ) , mref                 ) -- 2)
    assertEquals   ( m:scanr('+', 2             ) , mref2                ) -- 5)
    assertEquals   ( m:scanr('+', 2   ,'vec'    ) , mref2                ) -- 6)
    assertAllEquals( m:scanr('+','vec', {}      ) , t                    ) -- 4)
    assertAllEquals( m:scanr('+', 0   ,'vec', {}) , t                    ) -- 8)
    assertAllEquals( m:scanr('+', nil       , {}) , t                    ) -- 3)
    assertAllEquals( m:scanr('+', nil , nil , {}) , t                    ) -- 3)
    assertAllEquals( m:scanr('+', 0   , nil , {}) , t                    ) -- 7)

    mref  = m:copy():mapij\x,i,j sum(idx(nr,j,nc)..idx(i,j,nc)..-nc)
    mref2 = m:copy():mapij\x,i,j sum(idx(i,nc,nc)..idx(i,j,nc)..-1 )
    assertEquals( m:scanr('+', 'col'), mref  )
    assertEquals( m:scanr('+', 'row'), mref2 )

    -- non-commutative operations
    mref  = m:copy():mapij\x,i,j sum(idx(i,j,nc)..idx(nr,j,nc)..2*nc)-sum(idx(i+1,j,nc)..idx(nr,j,nc)..2*nc)
    mref2 = m:copy():mapij\x,i,j sum(idx(i,j,nc)..idx(i,nc,nc)..2   )-sum(idx(i,j+1,nc)..idx(i,nc,nc)..2   )
    assertEquals   ( m:scanr('-'          ) , m:same():fill(subR(1..mn)) )
    assertAllEquals( m:scanr('-', nil , {}) , subR(1..mn) )
    assertEquals   ( m:scanr('-','col'    ) , mref        )
    assertEquals   ( m:scanr('-','row'    ) , mref2       )
  end
  assertEquals( vector(4):fill(4..1..-1):scanr '^', vector{ 4^3^2^1, 3^2^1, 2^1, 1 } )
end

function TestCMatrixErr:testFilter()
  local msg = {
    "invalid argument #2 (callable expected)",
    "invalid argument #3 (iterable expected)",
    "invalid matrix new sizes"               ,
  }
  assertErrorMsgContains( msg[1], mth, 'filter', errCMat   , nil             )
  assertErrorMsgContains( msg[1], mth, 'filter', errCMat   , ''              )
  assertErrorMsgContains( msg[1], mth, 'filter', errCMat   , 1..2            )
  assertErrorMsgContains( msg[1], mth, 'filter', errCMat   , 1               )
  assertErrorMsgContains( msg[1], mth, 'filter', errCMat   , matrix(1)       )
  assertErrorMsgContains( msg[1], mth, 'filter', errCMat   , { }             )
  assertErrorMsgContains( msg[2], mth, 'filter', errCMat   , \x x     , ''   )
  assertErrorMsgContains( msg[2], mth, 'filter', errCMat   , \x x     , 1    )
  assertErrorMsgContains( msg[2], mth, 'filter', errCMat   , \x x     , \x x )
  assertErrorMsgContains( msg[3], mth, 'filter', matrix{1}, \x x~=1         )
end

function TestCMatrixFun:testFilter()
 for _,m in ipairs(G.cmatidx) do
    local mn = m:size()
    assertEquals( m:filter(\x x==1    )         , vector(1) :fill(1)     )
    assertEquals( m:filter(\x x~=0    )         , vector(mn):fill(1..mn) )
    assertEquals( m:filter(\x x>1 , {})         , totable(2..mn)         )
    assertEquals( m:filter(\x x==1, {})         , {1}                    )
    assertEquals( m:filter(\x x==1, vector(25)) , vector(1):seti(1,1)    )
    if mn>=5 then assertEquals( m:filter(\x x<6), m:same(5 ,1):fill(1..idx(5 ,1,1)) )
             else assertEquals( m:filter(\x x<6), m:same(mn,1):fill(1..idx(mn,1,1)) )  end
  end
end

function TestCMatrixErr:testFilter_out()
  local msg = {
    "invalid argument #2 (callable expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'filter_out', errCMat, nil       )
  assertErrorMsgContains( msg[1], mth, 'filter_out', errCMat, ''        )
  assertErrorMsgContains( msg[1], mth, 'filter_out', errCMat, 1..2      )
  assertErrorMsgContains( msg[1], mth, 'filter_out', errCMat, 1         )
  assertErrorMsgContains( msg[1], mth, 'filter_out', errCMat, matrix(1) )
  assertErrorMsgContains( msg[1], mth, 'filter_out', errCMat, {}        )
end

function TestCMatrixFun:testFilter_out()
  for _,m in ipairs(G.cmatidx) do
    local mn = m:size()
    assertEquals( m:filter_out(\x x~=1    ), m:filter(\x x==1    ) )
    assertEquals( m:filter_out(\x x==0    ), m:filter(\x x~=0    ) )
    assertEquals( m:filter_out(\x x>=6    ), m:filter(\x x<6     ) )
    assertEquals( m:filter_out(\x x<=1, {}), m:filter(\x x>1 , {}) )
    assertEquals( m:filter_out(\x x~=1, {}), m:filter(\x x==1, {}) )
  end
end

-- special maps ---------------------------------------------------------------o

function TestCMatrixSMaps:setUp()
  for _,m in ipairs(G.cmattmp) do m:zeros() end
  for _,m in ipairs(G.cmatidx) do m:fill(1..m:size()) end
end

function TestCMatrixSMaps:tearDown()
  for _,m in ipairs(G.cmattmp) do m:zeros() end
  for _,m in ipairs(G.cmatidx) do m:fill(1..m:size()) end
end

function TestCMatrixSMaps:testCeil ()
  for _,m in ipairs(G.cmattmp) do
    local r = nrange(0.01, 1, m:size())
    m:fill(r):ceil('in')
    assertEquals( m, m:same():fill(1) )
  end
end

function TestCMatrixSMaps:testFloor()
  for _,m in ipairs(G.cmattmp) do
    local r = nrange(0, 1-0.01, m:size())
    m:fill(r):floor('in')
    assertEquals( m, m:same() )
  end
end

function TestCMatrixSMaps:testFrac()
  for _,m in ipairs(G.cmattmp) do
    local r  = range(0.1,(m:size())/10,0.1)
    local mn = m:size()
    m:fill(r):frac('in')
    for i=1,mn do
      if     r[i] < 1 then assertAlmostEquals( m:geti(i) -  i/10   , 0,   eps )
      elseif r[i] < 2 then assertAlmostEquals( m:geti(i) - (i/10-1), 0,   eps )
                      else assertAlmostEquals( m:geti(i) - (i/10-2), 0, 2*eps ) end
    end
  end
end

function TestCMatrixSMaps:testTrunc()
  for _,m in ipairs(G.cmattmp) do
    local r = nrange(0, 3-0.01, m:size())
    m:fill(r):trunc('in')
    for i=1,#m do
      if     r[i] < 1 then assertEquals( m:geti(i), 0 )
      elseif r[i] < 2 then assertEquals( m:geti(i), 1 )
                      else assertEquals( m:geti(i), 2 ) end
    end
  end
end

function TestCMatrixSMaps:testRound()
  for _,m in ipairs(G.cmattmp) do
    local r = nrange(0, 1, m:size())
    m:fill(r):round('in')
    for i=1,#m do
    if r[i] < 0.5 then assertEquals( m:geti(i), 0 )
                  else assertEquals( m:geti(i), 1 ) end
    end
  end
end

function TestCMatrixSMaps:testAbs()
  for _,m in ipairs(G.cmattmp) do
    local r = nrange(-3, 3, m:size())
    m:fill(r):abs('in')
    local res = m:map(\x x>=0, {})
    assertEquals( res, rep(true, #m) )
  end
end

function TestCMatrixSMaps:testSqrt()
  for _,m in ipairs(G.cmatidx) do
    local mn = m:size()
    m:map(\x x*x):sqrt('in')
    assertEquals( m, m:same():fill(1..mn) )
  end
end

function TestCMatrixSMaps:testExp()
  for _,m in ipairs(G.cmatidx) do
    local mn = m:size()
    m:exp('in')
    assertEquals( m:map(log), m:same():fill(1..mn) )
  end
end

function TestCMatrixSMaps:testLog()
  for _,m in ipairs(G.cmatidx) do
    local mn = m:size()
    m:log('in')
    local res = m:map(\x exp(x) )
    assertTrue( res:eq( m:same():fill(1..mn), 16*eps ) )
  end
end

function TestCMatrixSMaps:testLog10()
  for _,m in ipairs(G.cmatidx) do
    local mres = m:copy():map(\x log(x)/log(10) )
    m:log10('in')
    assertTrue( m:eq( mres, eps) )
  end
end

function TestCMatrixSMaps:testSin()
  for _,m in ipairs(G.cmattmp) do
    local r = nrange(1, pi/2, m:size())
    m:fill(r)
    assertEquals( m:sin(), m:copy():map(\x -sin(-x)) )
  end
end

function TestCMatrixSMaps:testCos()
  for _,m in ipairs(G.cmattmp) do
    local r = nrange(1, pi/2, m:size())
    m:fill(r)
    assertEquals( m:cos(),    m:copy():map(\x cos(-x    ))        )
    assertTrue  ( m:cos():eq( m:copy():map(\x sin(pi/2-x)), eps ) )
  end
end

function TestCMatrixSMaps:testTan()
  for _,m in ipairs(G.cmattmp) do
    local r = nrange(1,pi/2,m:size())
    m:fill(r)
    assertTrue( m:tan():eq( m:copy():map(\x sin(x)/cos(x)), 32*eps ) )
  end
end

function TestCMatrixSMaps:testSinh()
  for _,m in ipairs(G.cmattmp) do
    local r = nrange(1,pi/2,m:size())
    m:fill(r)
    assertTrue( m:sinh():eq( m:copy():map(\x 2*sinh(x/2)*cosh(x/2)), 2*eps ) )
  end
end

function TestCMatrixSMaps:testCosh()
  for _,m in ipairs(G.cmattmp) do
    local r = nrange(1,pi/2,m:size())
    m:fill(r)
    assertTrue( m:cosh():eq( m:copy():map(\x 2*sinh(x/2)^2 + 1), 2*eps ) )
  end
end

function TestCMatrixSMaps:testTanh()
  for _,m in ipairs(G.cmattmp) do
    local r = nrange(1,pi/2,m:size())
    m:fill(r)
    assertTrue( m:tanh():eq( m:copy():map(\x sinh(x)/cosh(x)), eps) )
  end
end

function TestCMatrixSMaps:testAsin()
  for _,m in ipairs(G.cmatidx) do
    local r = nrange(1,pi/2,m:size())
    m:fill(r)
    assertTrue( m:sin():asin('in'):eq( m:copy(), 8*eps) ) -- linux err: 6*eps
  end
end

function TestCMatrixSMaps:testAcos()
  for _,m in ipairs(G.cmattmp) do
    local r = nrange(1,pi/2,m:size())
    m:fill(r)
    assertTrue( m:cos():acos('in'):eq( m:copy(), eps ) )
  end
end

function TestCMatrixSMaps:testAtan()
  for _,m in ipairs(G.cmattmp) do
    local r = nrange(1,pi/2,m:size())
    m:fill(r)
    assertTrue( m:tan():atan('in'):eq( m:same():fill(r), eps ) )
  end
end

function TestCMatrixSMaps:testAsinh()
  for _,m in ipairs(G.cmattmp) do
    local r = nrange(1,pi/2,m:size())
    m:fill(r)
    assertTrue( m:asinh():sinh('in'):eq( m:copy(), 2*eps ) )
  end
end

function TestCMatrixSMaps:testAcosh()
  for _,m in ipairs(G.cmattmp) do
    local r = nrange(1,pi/2,m:size())
    m:fill(r)
    assertTrue( m:acosh():cosh('in'):eq( m:copy(), eps ) )
  end
end

function TestCMatrixSMaps:testAtanh()
  for _,m in ipairs(G.cmattmp) do
    local r = nrange(1,pi/2,m:size())
    m:fill(r)
    assertTrue( m:tanh():atanh('in'):eq( m:copy(), 2*eps ) )
  end
end

--function TestCMatrixSMaps:testErf()    end
--function TestCMatrixSMaps:testTgamma() end
--function TestCMatrixSMaps:testLgamma() end

function TestCMatrixSMaps:testCarg()
  for _,m in ipairs(G.cmatidx) do
    m:carg('in')
    assertEquals( m, m:same() )
  end
end

function TestCMatrixSMaps:testReal()
  for _,m in ipairs(G.cmatidx) do
    local mn = m:size()
    m:real('in')
    assertEquals( m, m:same():fill(1..mn) )
  end
end

function TestCMatrixSMaps:testImag()
  for i,m in ipairs(G.cmatidx) do
    m:imag('in')
    assertEquals( m, m:same() )
  end
end

function TestCMatrixSMaps:testConj()
  for _,m in ipairs(G.cmatidx) do
    local mn = m:size()
    m:conj('in')
    assertEquals( m, m:same():fill(1..mn) )
  end
end

function TestCMatrixSMaps:testProj()
  for _,m in ipairs(G.cmatidx) do
    local mn = m:size()
    assertEquals( m:proj(), m:same():fill(1..mn) )
  end
end

function TestCMatrixSMaps:testRect()
  for _,m in ipairs(G.cmatidx) do
    local mn = m:size()
    m:rect('in')
    assertEquals( m, m:same():fill(1..mn) )
  end
end

function TestCMatrixSMaps:testPolar()
  for _,m in ipairs(G.cmatidx) do
    local mn = m:size()
    assertEquals( m:polar(), m:same(0i):fill(1..mn) )
  end
end

-- special folds --------------------------------------------------------------o

function TestCMatrixSFolds:testMin()
  for _,m in ipairs(G.cmatidx) do
    local nr,nc,_ = m:sizes()
    assertEquals( m:min()     , 1                                         )
    assertEquals( m:min('col'), m:same(_,1 ,nc):fill(1..nc)               )
    assertEquals( m:min('row'), m:same(_,nr,1 ):fill(1..idx(nr,1,nc)..nc) )
  end
end

function TestCMatrixSFolds:testMax()
  for _,m in ipairs(G.cmatidx) do
    local nr,nc,_ = m:sizes()
    assertEquals( m:max()     , m:size() )
    assertEquals( m:max('col'), m:same(_,1 ,nc):fill(idx(nr,1,nc)..idx(nr,nc,nc)..1 ) )
    assertEquals( m:max('row'), m:same(_,nr,1 ):fill(idx(1,nc,nc)..idx(nr,nc,nc)..nc) )
  end
end

function TestCMatrixSFolds:testSum()
  for _,m in ipairs(G.cmatidx) do
    local nr,nc,_ = m:sizes()
    assertEquals( m:sum()     , sum(1..m:size()) )
    assertEquals( m:sum('col'), m:same(_,1 ,nc):mapij\x,i,j sum(idx(1,j,nc)..idx(nr,j,nc)..nc) )
    assertEquals( m:sum('row'), m:same(_,nr,1 ):mapij\x,i,j sum(idx(i,1,nc)..idx(i,nc,nc)..1 ) )
  end
end

function TestCMatrixSFolds:testSumabs()
  for _,m in ipairs(G.cmatidx) do
    local nr,nc,_ = m:sizes()
    local m1 = m:copy():map(\x -x)
    assertEquals( m1:sumabs()     , sum(1..m:size()) )
    assertEquals( m1:sumabs('col'), m:same(_,1 ,nc):mapij\x,i,j sum(idx(1,j,nc)..idx(nr,j,nc)..nc) )
    assertEquals( m1:sumabs('row'), m:same(_,nr,1 ):mapij\x,i,j sum(idx(i,1,nc)..idx(i,nc,nc)..1 ) )
  end
end

function TestCMatrixSFolds:testSumsqr()
  local sumsqr = \r =>local x = 0 for i=1,r:size() do x = x + r[i]^2 end return x end
  for _,m in ipairs(G.cmatidx) do
    local nr,nc,_ = m:sizes()
    assertEquals( m:sumsqr()     , sumsqr(1..m:size()) )
    assertEquals( m:sumsqr('col'), m:same(_,1 ,nc):mapij\x,i,j sumsqr(idx(1,j,nc)..idx(nr,j,nc)..nc) )
    assertEquals( m:sumsqr('row'), m:same(_,nr,1 ):mapij\x,i,j sumsqr(idx(i,1,nc)..idx(i,nc,nc)..1 ) )
  end
end

function TestCMatrixSFolds:testProduct()
  local prod = \r =>local x = 1 for i=1,r:size() do x = x * r[i] end return x end
  for _,m in ipairs(G.cmatidx) do
    local nr,nc,_ = m:sizes()
    assertEquals( m:product()     , prod(1..m:size()) )
    assertEquals( m:product('col'), m:same(_,1 ,nc):mapij\x,i,j prod(idx(1,j,nc)..idx(nr,j,nc)..nc) )
    assertEquals( m:product('row'), m:same(_,nr,1 ):mapij\x,i,j prod(idx(i,1,nc)..idx(i,nc,nc)..1 ) )
  end
end

function TestCMatrixErr:testAll()
  local msg = {
    "invalid argument #2 (callable expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'all', errCMat, nil    )
  assertErrorMsgContains( msg[1], mth, 'all', errCMat, ''     )
  assertErrorMsgContains( msg[1], mth, 'all', errCMat, 1..2   )
  assertErrorMsgContains( msg[1], mth, 'all', errCMat, 1      )
  assertErrorMsgContains( msg[1], mth, 'all', errCMat, errCMat )
  assertErrorMsgContains( msg[1], mth, 'all', errCMat, { }    )
end

function TestCMatrixSFolds:testAll()
  for _,m in ipairs(G.cmatidx) do
    local nr, nc, mref = m:sizes()
    assertFalse ( m:all \x x> m:size()   )
    assertTrue  ( m:all \x x< m:size()+1 )

    mref = m:same(_,1 ,nc)
    if     m:size() <  16 then mref:setrow(1,1)
    elseif m:size() == 16 then mref:setrow(1,1):seti(nc, 0) end
    assertEquals( m:all( \x x<16, 'col'), mref )

    mref = m:same(_,nr,1 ):setcol(1,1)
    if m:size() >= 16 then for i=4,nr do mref:seti(i,0) end end
    assertEquals( m:all( \x x<16, 'row'), mref )
 end
end

function TestCMatrixErr:testAny()
  local msg = {
    "invalid argument #2 (callable expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'any', errCMat, nil    )
  assertErrorMsgContains( msg[1], mth, 'any', errCMat, ''     )
  assertErrorMsgContains( msg[1], mth, 'any', errCMat, 1..2   )
  assertErrorMsgContains( msg[1], mth, 'any', errCMat, 1      )
  assertErrorMsgContains( msg[1], mth, 'any', errCMat, errCMat )
  assertErrorMsgContains( msg[1], mth, 'any', errCMat, { }    )
end

function TestCMatrixSFolds:testAny()
  for _,m in ipairs(G.cmatidx) do
    local nr, nc, mref = m:sizes()
    assertFalse ( m:any \x x> m:size()   )
    assertTrue  ( m:any \x x< m:size()+1 )

    mref = m:same(_,1 ,nc)
    if nr == 4 and nc == 5 then for i=2,nc do mref:seti  (i,1) end
    elseif m:size() > 16   then               mref:setrow(1,1) end
    assertEquals( m:any( \x x>16, 'col'), mref )

    mref = m:same(_,nr,1 )
    if     m:size() == 20 then               mref:seti(nr,1)
    elseif m:size() >  16 then for i=4,nr do mref:seti(i ,1) end end
    assertEquals( m:any( \x x>16, 'row'), mref )
  end
end

-- special scans --------------------------------------------------------------o

-- left accumulation
function TestCMatrixSScans:testAccmin()
  for _,m in ipairs(G.cmatidx) do
    local nr, nc = m:sizes()
    local mref   = m:same()
    assertEquals( m:accmin()     , m:same():fill(1) )
    for i=1,nr do mref:setrow(i, 1..nc      ) end
    assertEquals( m:accmin('col'), mref )
    for i=1,nr do mref:setrow(i, idx(i,1,nc)) end
    assertEquals( m:accmin('row'), mref )
  end
end

function TestCMatrixSScans:testAccmax()
  for _,m in ipairs(G.cmatidx) do
    assertEquals( m:accmax()     , m:same():fill(1..m:size()) )
    assertEquals( m:accmax('col'), m:copy() )
    assertEquals( m:accmax('row'), m:copy() )
  end
end

function TestCMatrixSScans:testAccsum()
  for _,m in ipairs(G.cmatidx) do
    local nr, nc = m:sizes()
    assertEquals( m:accsum()     , m:copy():map\x sum(1..x) )
    assertEquals( m:accsum('col'), m:copy():mapij(\x,i,j sum(idx(1,j,nc)..idx(i,j,nc)..nc)) )
    assertEquals( m:accsum('row'), m:copy():mapij(\x,i,j sum(idx(i,1,nc)..idx(i,j,nc)..1 )) )
  end
end

function TestCMatrixSScans:testAccsumabs()
for _,m0 in ipairs(G.cmatidx) do
    local nr, nc = m0:sizes()
    local m = m0:copy():map(\x -x)
    assertEquals( m:accsumabs()     , m0:copy():map\x sum(1..x) )
    assertEquals( m:accsumabs('col'), m0:copy():mapij(\x,i,j sum(idx(1,j,nc)..idx(i,j,nc)..nc)) )
    assertEquals( m:accsumabs('row'), m0:copy():mapij(\x,i,j sum(idx(i,1,nc)..idx(i,j,nc)..1 )) )
  end
end

function TestCMatrixSScans:testAccsumsqr()
  local sumsqr = \r =>local x = 0 for i=1,r:size() do x = x + r[i]^2 end return x end
  for _,m in ipairs(G.cmatidx) do
    local nr, nc = m:sizes()
    assertEquals( m:accsumsqr()     , m:copy():map\x sumsqr(1..x) )
    assertEquals( m:accsumsqr('col'), m:copy():mapij(\x,i,j sumsqr(idx(1,j,nc)..idx(i,j,nc)..nc)) )
    assertEquals( m:accsumsqr('row'), m:copy():mapij(\x,i,j sumsqr(idx(i,1,nc)..idx(i,j,nc)..1 )) )
  end
end

function TestCMatrixSScans:testAccprod()
  local prod = \r =>local x = 1 for i=1,r:size() do x = x * r[i] end return x end
  for _,m in ipairs(G.cmatidx) do
    local nr, nc = m:sizes()
    assertEquals( m:accprod()     , m:copy():map\x prod(1..x) )
    assertEquals( m:accprod('col'), m:copy():mapij(\x,i,j prod(idx(1,j,nc)..idx(i,j,nc)..nc)) )
    assertEquals( m:accprod('row'), m:copy():mapij(\x,i,j prod(idx(i,1,nc)..idx(i,j,nc)..1 )) )
  end
end

-- right accumulation
function TestCMatrixSScans:testRaccmin()
  for _,m in ipairs(G.cmatidx) do
    local nr, nc = m:sizes()
    assertEquals( m:raccmin()     , m:copy() )
    assertEquals( m:raccmin('col'), m:copy():mapij\x,i,j idx(i,j,nc) )
    assertEquals( m:raccmin('row'), m:copy():mapij\x,i,j idx(i,j,nc) )
  end
end

function TestCMatrixSScans:testRaccmax()
  for _,m in ipairs(G.cmatidx) do
    local nr, nc = m:sizes()
    assertEquals( m:raccmax()     , m:same():fill(m:geti(m:size())) )
    assertEquals( m:raccmax('col'), m:copy():mapij\x,i,j idx(nr,j ,nc) )
    assertEquals( m:raccmax('row'), m:copy():mapij\x,i,j idx(i ,nc,nc) )
  end
end

function TestCMatrixSScans:testRaccsum()
  for _,m in ipairs(G.cmatidx) do
    local nr, nc = m:sizes()
    assertEquals( m:raccsum()     , m:copy():mapij\x sum(x..nr*nc) )
    assertEquals( m:raccsum('col'), m:copy():mapij\x,i,j sum(idx(nr,j,nc)..idx(i,j ,nc)..-nc) )
    assertEquals( m:raccsum('row'), m:copy():mapij\x,i,j sum(idx(i ,j,nc)..idx(i,nc,nc))      )
  end
end

function TestCMatrixSScans:testRaccsumabs()
  for _,m0 in ipairs(G.cmatidx) do
    local nr, nc = m0:sizes()
    local m = m0:copy():map(\x -x)
    assertEquals( m:raccsumabs()     , m0:copy():mapij\x sum(x..nr*nc) )
    assertEquals( m:raccsumabs('col'), m0:copy():mapij\x,i,j sum(idx(nr,j,nc)..idx(i,j ,nc)..-nc) )
    assertEquals( m:raccsumabs('row'), m0:copy():mapij\x,i,j sum(idx(i ,j,nc)..idx(i,nc,nc))      )
  end
end

function TestCMatrixSScans:testRaccsumsqr()
  local sumsqr = \r =>local x = 0 for i=1,r:size() do x = x + r[i]^2 end return x end
  for _,m in ipairs(G.cmatidx) do
    local nr, nc = m:sizes()
    assertEquals( m:raccsumsqr()     , m:copy():map\x sumsqr(x..nr*nc) )
    assertEquals( m:raccsumsqr('col'), m:copy():mapij\x,i,j sumsqr(idx(nr,j,nc)..idx(i,j ,nc)..-nc) )
    assertEquals( m:raccsumsqr('row'), m:copy():mapij\x,i,j sumsqr(idx(i ,j,nc)..idx(i,nc,nc)     ) )
  end
end

function TestCMatrixSScans:testRaccprod()
  local prod = \r =>local x = 1 for i=1,r:size() do x = x * r[i] end return x end
  for _,m in ipairs(G.cmatidx) do
    local nr, nc = m:sizes()
    if nr*nc < 25 then
      assertTrue( m:raccprod()   :eq( m:copy():map\x prod(x..nr*nc) ) )
    end
    assertTrue( m:raccprod('col'):eq( m:copy():mapij\x,i,j prod(idx(nr,j,nc)..idx(i,j ,nc)..-nc), eps) )
    assertTrue( m:raccprod('row'):eq( m:copy():mapij\x,i,j prod(idx(i ,j,nc)..idx(i,nc,nc))     , eps) )
  end
end

-- symplectic matrix ----------------------------------------------------------o

function TestCMatrixErr:testSympinv()
  local msg = {
   "invalid argument #1 (2n matrix expected)",
  }
  assertErrorMsgContains( msg[1], mth,'sympinv',  matrix(3)   )
  assertErrorMsgContains( msg[1], mth,'sympinv',  matrix(4,3) )
end

function TestCMatrixSympl:testSympinv()
-- -J M' J
--[[ M' J M = J => M^-1 = J^-1 M'      det(M)  = ±1 (i.e. Sp(n))
     symp M = {{A,B},{C,D}} <=> A'D - C'B = 1, A'C = C'A, B'D = D'B ]]
     --[[
  local mat = matrix(2)
  local j   = matrix(2):symp()
  local m1  = { matrix{{1,0},{0,1}},
                matrix{{1,0},{1,1}},
                matrix{{1,1},{0,1}}, }
  for _,m in ipairs(m1) do
    assertEquals( m:t()*j*m      , j         )
    assertEquals( m:sympinv()   , -j*m:t()*j )
    assertEquals( m:sympinv(mat), -j*m:t()*j )
  end
end

function TestCMatrixErr:testSymperr()
  local msg = {
    "invalid argument #1 (2n matrix expected)"       ,
    "invalid argument #2 (different matrix expected)",
  }
  assertErrorMsgContains( msg[1], mth,'symperr',  matrix(3)   )
  assertErrorMsgContains( msg[1], mth,'symperr',  matrix(4,3) )
end

function TestCMatrixSympl:testSymperr()
  -- M' J M - J
  --assertEquals( m:symperr(), m:t()*j*m-j )
  local j  = matrix(2):symp()
  local m1 = { matrix{{1,0},{0,1}},
               matrix{{1,0},{1,1}},
               matrix{{1,1},{0,1}}, }
  for _,m in ipairs(m1) do
    assertEquals( m:symperr(), 0 )
  end
  local m1 = { matrix{{0,0},{0,1}},
               matrix{{0,1},{0,1}}, }
  for _,m in ipairs(m1) do
    assertTrue( m:symperr() ~= 0 )
  end
end

-- conjugate, transpose -------------------------------------------------------o

function TestCMatrixLinAlg:testConjugate()
  for _,m in ipairs(G.cmatidx) do assertEquals( m:conj(), m )  end
end

function TestCMatrixLinAlg:testTranspose()
  for _,m in ipairs(G.cmatidx) do
    local nr, nc, m1 = m:sizes()
    m1 = m:copy()
    assertEquals( {m:t():sizes()}, {nc,nr}        )
    assertEquals(  m:t()  :t()   , m              )
    assertEquals( (m + m1):t()   , m:t() + m1:t() )
    assertEquals( (2 * m) :t()   , 2 * m:t()      )
    if nr == nc then assertEquals( (m*m1):t(), m:t()*m1:t() ) end
    m1 = m:t()
    for i=1,nr do for j=1,nc do
      assertEquals( m1:get(i,j), m:get(j,i) )
    end end
  end
end

function TestCMatrixLinAlg:testTrace()
  for _,m in ipairs(G.cmatidx) do
    assertEquals( m:tr(), m:getdiag():sum() )
  end
end

-- inner, cross, mixed, outer -------------------------------------------------o

function TestCMatrixErr:testInner()
  local msg = {
    "invalid argument #2 (matrix expected)",
    "incompatible matrix sizes"            ,
  }
  assertErrorMsgContains( msg[1], mth, 'inner', errCMat, nil            )
  assertErrorMsgContains( msg[1], mth, 'inner', errCMat, ''             )
  assertErrorMsgContains( msg[1], mth, 'inner', errCMat, 1              )
  assertErrorMsgContains( msg[1], mth, 'inner', errCMat, 1..2           )
  assertErrorMsgContains( msg[1], mth, 'inner', errCMat, {}             )
  assertErrorMsgContains( msg[2], mth, 'inner', errCMat, errCMat, errCMat )
end

function TestCMatrixLinAlg:testInner()
  -- inner prod:  u'.v = |u|.|v| cos(u^v)
  for _,m1 in ipairs(G.cmatidx) do
    local mres, mref
    mres =  m1:inner(m1:copy())
    mref = (m1:t() * m1:copy()):getdiag():t()
    if mref:size() == 1 then assertEquals( mres, mref:geti(1) )
    else                     assertEquals( mres, mref         ) end

    mres =  m1:inner(m1:copy(),'tr')
    mref = (m1:t() * m1:copy()):tr()
    assertEquals( mres, mref )
  end
end

function TestCMatrixErr:testOuter()
  local m = matrix(2,1)
  local msg = {
    "invalid argument #2 (matrix expected)",
    "incompatible matrix sizes",
  }
  assertErrorMsgContains( msg[1], mth, 'outer', m          , nil         )
  assertErrorMsgContains( msg[1], mth, 'outer', m          , ''          )
  assertErrorMsgContains( msg[1], mth, 'outer', m          , {}          )
  assertErrorMsgContains( msg[1], mth, 'outer', m          , 1           )
  assertErrorMsgContains( msg[1], mth, 'outer', m          , 1..2        )
  assertErrorMsgContains( msg[2], mth, 'outer', matrix(1,2), matrix(2,2) )
end

function TestCMatrixLinAlg:testOuter()
  -- x * y:t() without temporary
  for nr=1,5 do
    local m1 = vector(nr):fill(1..2*nr..2)
    local m2 = vector(nr):fill(1..  nr)
    assertEquals( m1:outer(m2), m1*m2:t() )
  end
end

function TestCMatrixErr:testCross()
  local m = matrix(3)
  local msg = {
    "invalid argument #2 (matrix expected)",
    "invalid matrix sizes"                 ,
  }
  assertErrorMsgContains( msg[1], mth, 'cross', m     , nil  )
  assertErrorMsgContains( msg[1], mth, 'cross', m     , ''   )
  assertErrorMsgContains( msg[1], mth, 'cross', m     , 1    )
  assertErrorMsgContains( msg[1], mth, 'cross', m     , 1..2 )
  assertErrorMsgContains( msg[1], mth, 'cross', m     , {}   )
  assertErrorMsgContains( msg[2], mth, 'cross', errCMat, m    )
end

function TestCMatrixLinAlg:testCross()
  -- cross prod:  uxv = |u|.|v| sin(u^v) \vec{n}
  local m1 = matrix(3):fill(0..8)   -- skew-symmetric matrix
  local m2 = vector {2,-4,2}
  local m3 = m2:copy()
  assertEquals( m2:cross(m3), m1*m3 )
  for nc=1,5 do
    m1 = matrix(3,nc):fill(1   ..3*nc)
    m2 = m1:copy()   :fill(3*nc..1   ..-1)
    m3 = m2:copy()
    assertEquals(    m1 :cross(m2)   ,-m2  :cross( m1)              )
    assertEquals(    m1 :cross(m2+m3), m1  :cross( m2)+m1:cross(m3) )
    assertEquals( (2*m1):cross(m2)   , m1  :cross( m2*2)            )
    assertEquals( (2*m1):cross(m2)   , 2*m1:cross( m2)              )
    assertEquals( (2*m1):cross(m2)   , 2*m1:cross( m2)              )
    if nc == 3 then
      assertEquals( m1:cross( m2:cross(m3) ), m2*(m1*m3)-m3*(m1*m2)  )
    end
  end
end

function TestCMatrixErr:testMixed()
  local msg = {
    "invalid argument #2 (matrix expected)",
    "invalid argument #3 (matrix expected)",
    "invalid matrix sizes"                 ,
    "incompatible matrix sizes"            ,
  }
  local m1 = matrix(3,1)
  assertErrorMsgContains( msg[1], mth, 'mixed', m1         , nil                      )
  assertErrorMsgContains( msg[1], mth, 'mixed', m1         , ''                       )
  assertErrorMsgContains( msg[1], mth, 'mixed', m1         , 1                        )
  assertErrorMsgContains( msg[1], mth, 'mixed', m1         , 1..2                     )
  assertErrorMsgContains( msg[1], mth, 'mixed', m1         , {}                       )
  assertErrorMsgContains( msg[2], mth, 'mixed', m1         , m1         , nil         )
  assertErrorMsgContains( msg[2], mth, 'mixed', m1         , m1         , ''          )
  assertErrorMsgContains( msg[2], mth, 'mixed', m1         , m1         , 1           )
  assertErrorMsgContains( msg[2], mth, 'mixed', m1         , m1         , 1..2        )
  assertErrorMsgContains( msg[2], mth, 'mixed', m1         , m1         , {}          )
  assertErrorMsgContains( msg[3], mth, 'mixed', matrix(2,1), m1         , m1          )
  assertErrorMsgContains( msg[4], mth, 'mixed', matrix(3,2), m1         , m1          )
  assertErrorMsgContains( msg[4], mth, 'mixed', m1         , matrix(2,1), m1          )
  assertErrorMsgContains( msg[4], mth, 'mixed', m1         , matrix(3,2), m1          )
  assertErrorMsgContains( msg[4], mth, 'mixed', m1         , m1         , matrix(2,1) )
  assertErrorMsgContains( msg[4], mth, 'mixed', m1         , m1         , matrix(3,2) )
end

function TestCMatrixLinAlg:testMixed()
  -- x:cross(y):inner(z) without temporary
  for nc=1,5 do
    local m1 = matrix(3,nc):fill(1   ..3*nc)
    local m2 = m1:same()   :fill(3*nc..1..-1)
    local m3 = m1:same()   :fill(1)
    assertEquals( m1:mixed(m2,m3), m1:cross(m2):inner(m3) )
  end
end

-- norm, unit, center, angle (in place) ---------------------------------------o

function TestCMatrixLinAlg:testNorm() --|u| = sqrt(u'.u), forbidius norm
  for _,m in ipairs(G.cmatidx) do
    assertEquals( m:norm(), sqrt(m:map(\x x^2):foldl('+')) )
  end
end

function TestCMatrixErr:testDistance()
  local msg = {
    "invalid argument #2 (matrix expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'distance', errCMat, nil  )
  assertErrorMsgContains( msg[1], mth, 'distance', errCMat, 1..2 )
  assertErrorMsgContains( msg[1], mth, 'distance', errCMat, ''   )
  assertErrorMsgContains( msg[1], mth, 'distance', errCMat, {}   )
end

function TestCMatrixLinAlg:testDistance()
  --sqrt( trace((A-B) * (A-B)') )
  for _,m1 in ipairs(G.cmatidx) do
    local m2 = m1:copy()
    assertEquals( m1:distance(m2), sqrt( ( (m1-m2)*(m1-m2):t() ):tr()) )
  end
end

function TestCMatrixErr:testUnit()
  local msg = {
    "null matrix norm",
  }
  assertErrorMsgContains( msg[1], mth, 'unit', matrix(2) )
end

function TestCMatrixLinAlg:testUnit()  --  unit :  u / |u|
  for _,m in ipairs(G.cmatidx) do
    assertEquals( m:unit(), m / m:norm() )
  end
end

function TestCMatrixLinAlg:testCenter()
  for _,m in ipairs(G.cmatidx) do
    local mid = m:sum() / m:size()
    assertEquals( m:center(),  m:map(\x x-mid) )
  end
end

function TestCMatrixErr:testAngle()
  local msg = {
    "null vector norm",
  }
  assertErrorMsgContains( msg[1], mth, 'angle', vector{1,1,1}, vector{0,0,0} )
  assertErrorMsgContains( msg[1], mth, 'angle', vector{0,0,0}, vector{1,1,1} )
end

function TestCMatrixLinAlg:testAngle()
  -- angle:  u^v = acos(u'.v / |u|.|v|)  in [0,pi] (or [-pi,pi] if n)
  local rad = \i,n -> pi*(i-1)/n
  local function unitVectors(n1, n2, r)
    local v = {}
    if is_nil(r) then r=1 end
    for i = 1, n1 do
      local a = rad(i, n1)
      v[i]={}
      for j = 1, n2 do
        local b = rad(j,n2)
        local x = r * cos(a) * sin(b)
        local y = r * sin(a) * sin(b)
        local z = r * cos(b)
        v[i][j] = vector{x,y,z}
      end
    end
    return v
  end

  local n, m = 16, 16
  for i,t in ipairs( unitVectors( m, n ) ) do
  for j,v in ipairs( t ) do
    assertAlmostEquals( vector{0,0,1}:angle( v ) - rad(j, n), 0,2* eps )
  end
  end
  assertAlmostEquals( vector{1,0,0}:angle(vector{ 1, 1, 0}), pi/4  , eps )
  assertAlmostEquals( vector{1,0,1}:angle(vector{ 1, 1, 0}), pi/3  , eps )
  assertEquals      ( vector{1,0,0}:angle(vector{ 1, 0, 0}), 0           )
  assertEquals      ( vector{1,0,0}:angle(vector{ 0, 1, 0}), pi/2        )
  assertEquals      ( vector{1,0,0}:angle(vector{-1,-1, 0}), 3*pi/4      )
  assertEquals      ( vector{1,0,0}:angle(vector{-1, 0, 0}), pi          )
  assertEquals      ( vector{0,0,1}:angle(vector{ 0, 0, 1}), 0           )
  assertEquals      ( vector{0,0,1}:angle(vector{ 0, 0,-1}), pi          )
end

-- operators ------------------------------------------------------------------o

function TestCMatrixOps:testUnm()
  for _,m in ipairs(G.cmatidx) do
    local mn = m:size()
    local mref = m:same():fill(-1..-mn..-1)
    assertEquals( -m      , mref )
    assertEquals(  m:unm(), mref )
  end
end

function TestCMatrixOps:testMod()
  for _,m in ipairs(G.cmatidx) do
    assertEquals( m%m:copy()                       , m:same()         )
    assertEquals( m:same():fill(4)%m:same():fill(3), m:same():fill(1) )
  end
end

function TestCMatrixOps:testPow()
  for _,m in ipairs(G.cmatidx) do
    local mref = m:copy():map(\x x*x)
    assertEquals( m^2               , mref )
    assertEquals( m^m:same():fill(2), mref )
  end
end

function TestCMatrixErr:testEq()
  local errCMat = matrix(2):fill(1..4)
  local msg = {
  "invalid arguments (unsupported matrix operation)",
  "invalid argument #3 (callable expected)"         ,
  }
  assertErrorMsgContains( msg[1], mth, 'eq', errCMat, {}            )
  assertErrorMsgContains( msg[1], mth, 'eq', errCMat, ''            )
  assertErrorMsgContains( msg[1], mth, 'eq', errCMat, 1..4          )
  assertErrorMsgContains( msg[2], mth, 'eq', errCMat, matrix(1), '' )
  assertErrorMsgContains( msg[2], mth, 'eq', errCMat, matrix(1), {} )
end

function TestCMatrixOps:testEq()
  for _,m in ipairs(G.cmatidx) do
    local cm = m:map(\x complex(x,0))
    assertTrue ( m  == m:copy() ) -- mat  == mat
    assertFalse( m  == m:same() )
    assertTrue ( m  == cm       ) -- mat  == cmat
    assertTrue ( cm == m:copy() ) -- cmat == mat
    -- f defined
    assertTrue (  m       :eq(  m:copy()                       ,   0  ) )
    assertTrue (  m       :eq(  m:map(\x x+  eps)              ,   eps) )
    assertFalse(  m       :eq(  m:map(\x x+2*eps)              ,   eps) )
    assertFalse(  m       :eq(  m:map(\x x+  eps):seti(1,3*eps),   eps) )
    assertTrue ( cm       :eq( cm:map(\x x+eps*1i    )         ,   eps) )
    assertTrue ( cm       :eq( cm:map(\x x+eps*(1+1i))         , 2*eps) )
    assertTrue ( cm:imag():eq( cm:map(\x x+eps*1i    ):imag()  ,   eps) )
    assertTrue ( cm:real():eq( cm:map(\x x+eps*1i    ):real()  ,   eps) )
  end
  -- f as function
  local  m =  matrix(2)
  local cm = cmatrix(2)
  assertTrue ( m:fill(1):eq( m:same():fill(eps), \x,y x/y>eps) )
  assertFalse( m:fill(1):eq( m:same():fill(eps), \x,y x/y<eps) )
  assertTrue (  0        ==  m:same()         ) -- num  == mat
  assertFalse(  0        ==  m:same():fill(1) )
  assertTrue (  0        == cm:same()         ) -- num  == cmat
  assertFalse(  0        == cm:same():fill(1) )
  assertTrue (  0+0i     ==  m:same()         ) -- cpx  == mat
  assertFalse(  1+0i     ==  m:same()         )
  assertTrue (  0+0i     == cm:same()         ) -- cpx  == cmat
  assertFalse(  0+1i     == cm:same()         )
  assertTrue (  m:same() == 0                 ) -- mat  == num
  assertTrue ( cm:same() == 0                 ) -- cmat == num
  assertTrue (  m:same() == 0+0i              ) -- mat  == cpx
  assertTrue ( cm:same() == 0+0i              ) -- cmat == cpx
end

function TestCMatrixErr:testAdd()
  local msg = {
    "invalid arguments (unsupported matrix operation)",
    "incompatible matrix sizes"                       ,
  }
  assertErrorMsgContains( msg[1], mth, 'add', errCMat, ''              )
  assertErrorMsgContains( msg[1], mth, 'add', errCMat, nil             )
  assertErrorMsgContains( msg[1], mth, 'add', errCMat, 1..4            )
  assertErrorMsgContains( msg[2], mth, 'add', errCMat, matrix(1)       )
  assertErrorMsgContains( msg[2], mth, 'add', errCMat, matrix(3)       )
  assertErrorMsgContains( msg[2], mth, 'add', errCMat, matrix(2), {}   )
  assertErrorMsgContains( msg[2], mth, 'add', errCMat, matrix(2), 1..4 )
end

function TestCMatrixOps:testAdd()
  for _,m in ipairs(G.cmatidx) do
    local mn = m:size()
    local mc = m:copy()
    local cm = m:same(0i):fill(1..mn):map(\x x*(1+1i))
    assertEquals( 2 + m , m:same():fill(3..mn+2    ) ) -- num + mat  => num + vec
    assertEquals( m + 2 , m:same():fill(3..mn+2    ) ) -- mat + num  => vec + num
    assertEquals( m + mc, m:copy():map(\x x*2      ) ) -- mat + mat  => vec + vec
    assertEquals( m + 2i, m:copy():map(\x x+2i     ) ) -- mat + cpx  => vec + cpx
    assertEquals( m + cm, m:copy():map(\x x*(2+1i) ) ) -- mat + cmat => vec + cvec
    assertTrue  ( is_cmatrix(m + 2i) )
    assertTrue  ( is_cmatrix(m + cm) )
  end
end

function TestCMatrixOps:testAddCPx()
  for _,m in ipairs(G.cmatidx) do
    local mres = 2i + m
    assertEquals( mres, m:copy():map(\x x+2i) ) -- cpx + mat => cpx + vec
    assertTrue  ( is_cmatrix(mres) )
  end
end

function TestCMatrixErr:testSub()
  local msg = {
    "invalid arguments (unsupported matrix operation)",
    "incompatible matrix sizes"                       ,
  }
  assertErrorMsgContains( msg[1], mth, 'sub', errCMat, ''        )
  assertErrorMsgContains( msg[1], mth, 'sub', errCMat, nil       )
  assertErrorMsgContains( msg[1], mth, 'sub', errCMat, 1..4      )
  assertErrorMsgContains( msg[2], mth, 'sub', errCMat, matrix(1) )
  assertErrorMsgContains( msg[2], mth, 'sub', errCMat, matrix(3) )
end

function TestCMatrixOps:testSub()
  for _,m in ipairs(G.cmatidx) do
    local mn = m:size()
    local mc = m:copy()
    local cm = m:same(0i):fill(1..mn):map(\x x*(1+1i))
    assertEquals( m - mc, m:same()                ) -- mat - mat  => vec - vec
    assertEquals( 2 - m , m:copy():map(\x 2-x )   ) -- num - mat  => num - vec
    assertEquals( m - 2 , m:same():fill(-1..mn-2) ) -- mat - num  => vec + -num
    assertEquals( m - 2i, m:copy():map(\x x-2i)   ) -- mat - cpx  => vec + -cpx
    assertEquals( m - cm, m:copy():map(\x x*1i)   ) -- mat - cmat => vec - cvec
    assertTrue  ( is_cmatrix(m - 2i) )
    assertTrue  ( is_cmatrix(m - cm) )
  end
end

function TestCMatrixOps:testSubCPx()
  for _,m in ipairs(G.cmatidx) do
    local mres = 2i + m
    assertEquals( mres, m:copy():map(\x x+2i) ) -- cpx - mat => cpx - vec
    assertTrue  ( is_cmatrix(mres) )
  end
end

function TestCMatrixErr:testMul()
  local msg = {
    "invalid arguments (unsupported matrix operation)",
    "incompatible matrix sizes"                       ,
  }
  assertErrorMsgContains( msg[1], mth, 'mul', errCMat     , ''          )
  assertErrorMsgContains( msg[1], mth, 'mul', errCMat     , nil         )
  assertErrorMsgContains( msg[1], mth, 'mul', errCMat     , 1..4        )
  assertErrorMsgContains( msg[2], mth, 'mul', matrix(2,1), matrix(2,1) )
  assertErrorMsgContains( msg[2], mth, 'mul', matrix(1,2), matrix(1,1) )
  assertErrorMsgContains( msg[2], mth, 'mul', matrix(1,2), matrix(3,1) )
end

local function refMul(m1, m2, i, j )
  local mref = matrix(m1:nrow(), m2:ncol())
  for i=1,m1:nrow() do
  for j=1,m2:ncol() do
    local x = 0
    for ii=1,m1:ncol()
      do x = x + m1:get(i,ii) * m2:get(ii,j)
    end
    mref:set(i,j,x)
  end end
  return mref
end

function TestCMatrixOps:testMul()
  for _,m in ipairs(G.cmatidx) do
    local mn, nr, nc, _ = m:size(), m:sizes()
    for j=1,5 do
      local m2 = m:same(_ ,nc,j):fill(1..nc*j)
      local cm = m:same(0i,nc,j):fill(1..nc*j)
      assertEquals( j * m   , m:same():fill(j..mn*j..j) ) -- num * mat  => num * vec
      assertEquals( m * j   , m:same():fill(j..mn*j..j) ) -- mat * num  => vec * num
      assertEquals( m * j*1i, m:copy():map(\x x*j*1i  ) ) -- mat * cpx  => vec * cp
      assertEquals( m * m2  , refMul(m,m2)              ) -- mat * mat
      assertEquals( m * cm  , refMul(m,cm)              ) -- mat * cmat
      assertTrue  ( is_cmatrix(m * 2i) )
      assertTrue  ( is_cmatrix(m * cm) )
    end
  end
end

function TestCMatrixOps:testMulCPx()
  for _,m in ipairs(G.cmatidx) do
    local mref = 2i * m
    assertEquals( mref, m:copy():map(\x x*2i) )
    assertTrue  ( is_cmatrix(mref) )
  end
end

function TestCMatrixErr:testTmul()
  local msg = {
    "invalid arguments (unsupported matrix operation)",
    "incompatible matrix sizes"                       ,
  }
  assertErrorMsgContains( msg[1], mth, 'tmul', errCMat     , ''          )
  assertErrorMsgContains( msg[1], mth, 'tmul', errCMat     , nil         )
  assertErrorMsgContains( msg[1], mth, 'tmul', errCMat     , 1..4        )
  assertErrorMsgContains( msg[2], mth, 'tmul', matrix(2,1), matrix(1,2) )
  assertErrorMsgContains( msg[2], mth, 'tmul', matrix(1,2), matrix(3,1) )
end

function TestCMatrixOps:testTmul()
  for _,m in ipairs(G.cmatidx) do
    local nr, _ = m:nrow()
    for i=1,5 do
      local m2 = m:same(_ ,nr,i):fill(1..nr*i)
      local cm = m:same(0i,nr,i):fill(1..nr*i)
      assertEquals( m:tmul(m2), refMul(m:t(),m2) ) -- mat' * mat
      assertEquals( m:tmul(cm), refMul(m:t(),cm) ) -- mat' * cmat
      assertTrue  ( is_cmatrix(m:tmul(cm)) )
    end
  end
end

function TestCMatrixErr:testMult()
  local msg = {
    "invalid arguments (unsupported matrix operation)",
    "incompatible matrix sizes"                       ,
  }
  assertErrorMsgContains( msg[1], mth, 'mult', errCMat     , ''          )
  assertErrorMsgContains( msg[1], mth, 'mult', errCMat     , nil         )
  assertErrorMsgContains( msg[1], mth, 'mult', errCMat     , 1..4        )
  assertErrorMsgContains( msg[2], mth, 'mult', matrix(2,1), matrix(1,2) )
  assertErrorMsgContains( msg[2], mth, 'mult', matrix(1,2), matrix(3,1) )
end

function TestCMatrixOps:testMult()
  for _,m in ipairs(G.cmatidx) do
    local nr, _ = m:ncol()
    for i=1,5 do
      local m2 = m:same(_ ,i,nr):fill(1..nr*i)
      local cm = m:same(0i,i,nr):fill(1..nr*i)
      assertEquals( m:mult(m2), refMul(m, m2:t()) ) -- mat * mat'
      assertEquals( m:mult(cm), refMul(m, cm:t()) ) -- mat * cmat'
      assertTrue  ( is_cmatrix(m:mult(cm)) )
    end
  end
end

function TestCMatrixErr:testDiv()
  local msg = {
    "invalid arguments (unsupported matrix operation)",
    "incompatible matrix sizes"                       ,
  }
  assertErrorMsgContains( msg[1], mth, 'div', errCMat     , ''          )
  assertErrorMsgContains( msg[1], mth, 'div', errCMat     , nil         )
  assertErrorMsgContains( msg[1], mth, 'div', errCMat     , 1..4        )
  assertErrorMsgContains( msg[2], mth, 'div', matrix(2,1), matrix(1,2) )
  assertErrorMsgContains( msg[2], mth, 'div', matrix(1,2), matrix(3,1) )
end

function TestCMatrixOps:testDiv() -- TODO
--  local m = matrix(3,2):fill(2)
--  print(1/m)
  for _,m in ipairs(G.cmatidx) do
    local mn, nr, nc = m:size(), m:sizes()
    local mc = m:copy():random(randomseed(2))
    local cm = m:same(0i):fill(1..mn):map\x x+x*1i
    if nr == nc then
      assertTrue( (mc * (1/mc)):eq( mc:copy():eye(), 5*eps) )  -- num / mat
    else--TODO
      --print( 1/mc,"\n" )
      --print( mc,"\n" )
      --print( mc:t() * (1/mc),"\n" )  -- num / mat
    end
    assertEquals(  m / 2 , m:copy():map(\x  x/2   )         ) -- mat / num
    assertEquals(  m / 2i, m:copy():map(\x -x/2*1i)         ) -- mat / cpx
    assertTrue  ( (m / m  ):eq(m:copy()*1/m        ,   eps) ) -- mat / mat
    assertTrue  ( (m / cm ):eq(m:copy()*1/cm       , 2*eps) ) -- mat / mat
  end
end

function TestCMatrixOps:testDivCPx()
  for _,m in ipairs(G.cmatidx) do
    local mref = 2i / m
    assertTrue( mref:eq( 2i*1/m, 2*eps) )
    assertTrue( is_cmatrix(mref) )
  end
end

function TestCMatrixErr:testEmul()
  local msg = {
    "invalid argument #2 (matrix expected)",
    "incompatible matrix sizes"            ,
  }
  assertErrorMsgContains( msg[1], mth, 'emul', errCMat, ''        )
  assertErrorMsgContains( msg[1], mth, 'emul', errCMat, nil       )
  assertErrorMsgContains( msg[1], mth, 'emul', errCMat, 1..4      )
  assertErrorMsgContains( msg[2], mth, 'emul', errCMat, matrix(1) )
  assertErrorMsgContains( msg[2], mth, 'emul', errCMat, matrix(3) )
end

function TestCMatrixOps:testEmul()
  for _,m in ipairs(G.cmatidx) do
    local mn = m:size()
    local mc = m:copy()
    local cm = m:same(0i):fill(1..mn):map(\x x+x*1i)
    assertEquals( m:emul(mc), m:map2(mc, '*') )
    assertEquals( m:emul(cm), m:map2(cm, '*') )
    assertTrue  ( is_cmatrix(m:emul(cm)) )
  end
end

function TestCMatrixErr:testEdiv()
  local msg = {
    "invalid argument #2 (matrix expected)",
    "incompatible matrix sizes"            ,
  }
  assertErrorMsgContains( msg[1], mth, 'ediv', errCMat, ''        )
  assertErrorMsgContains( msg[1], mth, 'ediv', errCMat, nil       )
  assertErrorMsgContains( msg[1], mth, 'ediv', errCMat, 1..4      )
  assertErrorMsgContains( msg[2], mth, 'ediv', errCMat, matrix(1) )
  assertErrorMsgContains( msg[2], mth, 'ediv', errCMat, matrix(3) )
end

function TestCMatrixOps:tetEdiv()
  for _,m in ipairs(G.cmatidx) do
    local mn = m:size()
    local mc = m:copy()
    local cm = m:same(0i):fill(1..mn):map(\x x+x*1i)
    assertEquals( m:ediv(mc), m:map2(mc, '/') )
    assertEquals( m:ediv(cm), m:map2(cm, '/') )
    assertTrue  ( is_cmatrix(m:ediv(cm)) )
   end
end

-- linear algebra -------------------------------------------------------------o

function TestCMatrixLapack:testSolve()
  for i,m1 in ipairs(dat.solveIn1) do
    local m2 = dat.solveIn2[i]
    local m3 = dat.solveOut[i]
    assertTrue( m1:solve(m2):eq(m3, 2*eps) )
  end
end

function TestCMatrixErr:testSvd() --TODO
  local msg = {
    "invalid input argument" ,
    "SVD failed to converged",
  }
end

function TestCMatrixLapack:testSvd()
  for i,m in ipairs(dat.svdIn) do
    local refU = dat.svdU[i]
    local refS = dat.svdS[i]:getdiag()
    local refV = dat.svdV[i]
    local ru, rs, rv, info = m:svd()
    local m1   = ru * m:same():setdiag(rs) * rv:t() -- M = U*S*V'
    assertTrue( ru:eq(refU,  3*eps) )
    assertTrue( rs:eq(refS, 64*eps) )
    assertTrue( rv:eq(refV,  3*eps) )
    assertTrue( m1:eq(m   , 32*eps) )
  end
end

function TestCMatrixErr:testDet()
  local msg = {
    "matrix must be square",
  }
  assertErrorMsgContains( msg[1], mth, 'det', matrix(2,1) )
end

function TestCMatrixLapack:testDet()
  local M = {}
  for i=1,5 do M[i] = matrix(i):random() end
  assertEquals( matrix(2):symp():det(), 1 )
  assertEquals( matrix(2):eye() :det(), 1 )
  for i,m in ipairs(M) do
    local m1 = m:same():random()
    assertAlmostEquals( (m*m1):det() - m:det()*m1:det(), 0, 3*eps )
    assertAlmostEquals(  m:t():det() - m:det()         , 0, 2*eps )
    assertAlmostEquals( (2*m) :det() - m:det()*(2^i)   , 0,   eps )
  end
end

function TestCMatrixErr:testEigen()
  local msg = {
    "matrix must be square"                  ,
    "invalid input argument"                 ,
    "eigen failed to compute all eigenvalues",
  }
  assertErrorMsgContains( msg[1], mth, 'eigen', matrix(2,1) )
  assertErrorMsgContains( msg[1], mth, 'eigen', matrix(1,3) )
end

function TestCMatrixLapack:testEigen()
  for i=1,5,1 do
    local m = matrix(i)
    local w, vl, vr, info = m:eigen()
    assertEquals( w   , cvector(i)      )
    assertEquals( vl  , matrix(i):eye() )
    assertEquals( vr  , matrix(i):eye() )
    assertEquals( info, 0               )
  end
  for i,m in ipairs(dat.eigenIn) do
    local w, vl, vr, info = m:eigen()
    local refD  = dat.eigenD[i]:getdiag()
    local refW  = dat.eigenW[i]
    local refV  = dat.eigenV[i]
    local diagW = m:same():setdiag(w)
    assertTrue( w         :eq( refD               , 16*eps) )
    assertTrue( vr        :eq( refV               ,  4*eps) )
    assertTrue( vl        :eq( refW               ,  4*eps) )
    assertTrue( (m * vr)  :eq( vr    * diagW      , 64*eps) ) -- A * V - V * D
    assertTrue( (vl:t()*m):eq( diagW * vl:t()     , 64*eps) ) -- W'* A - D * W'
    assertAlmostEquals( w:sum():real() - m:tr(), 0, 64*eps  )
  end
end

-- FFT, convolution, correlation, covrariance ---------------------------------o
  --vector sizes: 1,2,3,4,5,7,11,13,17,19,25
  --matrix sizes: (of 2,5,7 combinations)

function TestCMatrixFFT:testFFT()
  for i,s in ipairs(dat.sv) do -- 1D
    local ref = dat.fftVOut[i]
    local res = dat.fftVIn:getsub(1..s, 1):fft()
    assertTrue( res:real():eq( ref:real(), 16*eps ) )
    assertTrue( res:imag():eq( ref:imag(), 16*eps ) ) -- linux err: 12eps
  end
  for i ,s1 in ipairs(dat.sm) do -- 2D
  for ii,s2 in ipairs(dat.sm) do
    local ref = dat.fftMOut[idx(i,ii,3)]
    local res = dat.fftMIn:getsub(1..s1, 1..s2):fft()
    assertTrue( res:real():eq( ref:real(), 16*eps ) )
    assertTrue( res:imag():eq( ref:imag(), 16*eps ) )
  end end
end

function TestCMatrixFFT:testIFFT()
  for i,s in ipairs(dat.sv) do -- 1D
    local ref = dat.fftVIn:getsub(1..s, 1)
    local res = ref:fft():ifft()
    assertTrue( res:real():eq( ref:real(), 4*eps ) )
    assertTrue( res:imag():eq( ref:imag(),   eps ) )
  end
  for i ,s1 in ipairs(dat.sm) do -- 2D
  for ii,s2 in ipairs(dat.sm) do
    local ref = dat.fftMIn:getsub(1..s1, 1..s2)
    local res = ref:fft():ifft()
    assertTrue( res:real():eq( ref:real(), 2*eps ) )
    assertTrue( res:imag():eq( ref:imag(),   eps ) )
  end end
end

function TestCMatrixErr:testRFFT()
  local msg = {
    "incompatible matrix sizes",
  }
  assertErrorMsgContains( msg[1], mth, 'rfft', vector(1), matrix(2) )
  assertErrorMsgContains( msg[1], mth, 'rfft', matrix(3), vector(2) )
end

function TestCMatrixFFT:testRFFT()
  for i,s in ipairs(dat.sv) do
    local ref = dat.fftVOut[i]
    local res = dat.fftVIn:getsub(1..s, 1):rfft()
    local nr = res:nrow()
    assertTrue( res:imag():eq( ref:getrow(1..nr):imag(), 16*eps ) ) -- linux err: 12eps
    assertTrue( res:real():eq( ref:getrow(1..nr):real(), 16*eps ) )
  end
  for i ,s1 in ipairs(dat.sm) do
  for ii,s2 in ipairs(dat.sm) do
    local ref = dat.fftMOut[idx(i,ii,3)]
    local res = dat.fftMIn:getsub(1..s1, 1..s2):rfft()
    local nc, nr = res:sizes()
    assertTrue( res:imag():eq(ref:getsub(1..nc,1..nr):imag(), 16*eps) )
    assertTrue( res:real():eq(ref:getsub(1..nc,1..nr):real(), 16*eps) )
  end end
end

function TestCMatrixErr:testIRFFT()
  local msg = {
    "invalid argument #1 (cmatrix expected)",
    "invalid argument #2 (matrix expected)" ,
    "incompatible matrix sizes"             ,
  }
  assertErrorMsgContains( msg[1], mth, 'irfft',  vector(1), cmatrix(2) )
  assertErrorMsgContains( msg[2], mth, 'irfft', cvector(3), nil        )
  assertErrorMsgContains( msg[3], mth, 'irfft', cvector(3), matrix(1)  )
end

function TestCMatrixFFT:testIRFFT()
  for i,s in ipairs(dat.sv) do   -- 1D
    local ref = dat.fftVIn:getsub(1..s, 1)
    local res = ref:rfft():irfft(ref:same())
    assertTrue( res:eq( ref, 2*eps ) )
  end
  for i ,s1 in ipairs(dat.sm) do -- 2D
  for ii,s2 in ipairs(dat.sm) do
    local ref = dat.fftMIn:getsub(1..s1, 1..s2)
    local res = ref:rfft():irfft(ref:same())
    assertTrue( res:eq( ref, 2*eps ) )
  end end

  local ref = {
    matrix{{1,1,0},{1,1,0},{1,1,0}},
    matrix{{1,1,1},{1,1,1},{0,0,0}},
    matrix{{1,1,1},{0,0,0},{1,1,1}},
    matrix(3):eye()                ,
  }
  for _,ref in ipairs(ref) do
    local res = ref:rfft():irfft(matrix(3))
    assertTrue( res:eq( ref, 2*eps ) )
  end
end

--function TestCMatrixFFT:testNFFT() end
--function TestCMatrixFFT:testINFFT() end

function TestCMatrixErr:testConv()
  local msg = {
    "incompatible matrix sizes",
  }
  assertErrorMsgContains( msg[1], mth, 'conv',  vector(1), vector(2) )
  assertErrorMsgContains( msg[1], mth, 'conv',  matrix(1), matrix(2) )
end

-- pascal triangle helpers
local pasVal = \x => local y=1 for i=1,x do y=y*i end return y end
local function pasVec(x)
  local v = vector(x)
  for z=1,x do v:seti(z, pasVal(x-1)/( pasVal(z-1)*pasVal(x-z) )) end
  return v
end

 -- convolution theorem
function TestCMatrixFFT:testConv()
  -- HELP - to get full conv: nr, nc = xr+yr-1, xc+yc-1
  for i=3,8 do
    local outs = (i-1)+(i-2) - 1
    local v1  = pasVec(i-1):resize(outs,1)
    local v2  = pasVec(i-2):resize(outs,1)
    local res = v1:conv(v2)
    assertTrue( res:eq(pasVec(outs), 51*eps ) )
    assertTrue( res:eq(v2:conv(v1)          ) )
  end
  for i=3,5 do
  for j=0,2 do
    local outs = i+2
    local m = dat.fftMIn:getsub(1+j..i+j, 1+j..i+j):resize(outs)
    local k = matrix{{0,0,0},{0,1,0},{0,0,0}}      :resize(outs)
    local mres = m:conv(k):shift(-1,-1)
    assertTrue( mres:getsub(1..i     ,1..i     ):eq( m:getsub(1..i, 1..i  ), 2*eps ) )
    assertTrue( mres:getsub(i+1..outs,1..i     ):eq( matrix(outs-i, i     ),   eps ) )
    assertTrue( mres:getsub(1..i     ,i+1..outs):eq( matrix(i     , outs-i), 2*eps ) )
  end end
end

 -- correlation theorem
function TestCMatrixFFT:testCorr()
  for i=3,6 do
    local outs = (i-1)+(i-2) - 1
    local v1  = pasVec(i-1):resize(outs,1)
    local v2  = pasVec(i-2):resize(outs,1)
    local res = v1:corr(v2)
    assertTrue( res:eq( pasVec(outs):shift(outs/2+1,0), 16*eps ) )
    assertTrue( res:eq( v2:corr(v1) :shift(1       ,0), 16*eps ) )
  end
  for i=3,5 do
  for j=0,2 do
    local outs = i+2
    local m = dat.fftMIn:getsub(1+j..i+j, 1+j..i+j):resize(outs)
    local k = matrix{{0,0,0},{0,1,0},{0,0,0}}      :resize(outs)
    local mref = m:conv(k):shift(-1,-1)
    local mres = m:corr(k):shift( 1 ,1)
    assertTrue( mref:eq( mres, 2*eps ) )
  end end
end

function TestCMatrixFFT:testCovar()
for i=3,6 do
    local outs = (i-1)+(i-2) - 1
    local v1 = pasVec(i-1):resize(outs,1)
    local v2 = pasVec(i-2):resize(outs,1)
    local res = v1:covar(v2)
    local ref = v1:corr (v2):center()
    assertTrue( res:eq( ref, 16*eps ) )
  end
  for i=3,5 do
    local outs = i+2
    local m = dat.fftMIn:getsub(1..i, 1..i)  :resize(outs)
    local k = matrix{{0,0,0},{0,1,0},{0,0,0}}:resize(outs)
    local mref = m:corr (k):shift(1,1):center()
    local mres = m:covar(k):shift(1,1)
    assertTrue( mref:eq( mres, 2*eps ) )
  end
end

-- rotations ------------------------------------------------------------------o

function TestCMatrixErr:testRot()
  local msg = {
    "invalid argument #1 (2D squared matrix expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'rot', matrix(2,1), pi )
  assertErrorMsgContains( msg[1], mth, 'rot', matrix(2,3), pi )
end

function TestCMatrixErr:testRotxyz()
  local msg = {
    "invalid argument #1 (3D squared matrix expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'rotx', matrix(3,2), pi )
  assertErrorMsgContains( msg[1], mth, 'roty', matrix(3,2), pi )
  assertErrorMsgContains( msg[1], mth, 'rotz', matrix(3,2), pi )
end

function TestCMatrixRot:testRot()
  local m = matrix(2)
  for i,a in ipairs(dat.rad) do
    local res = m:rot(a)
    local ref = dat.rot[i]
    assertTrue( res:eq( ref, eps ) )
  end
end

function TestCMatrixRot:testRotx()
  local m = matrix(3)
  for i,ax in ipairs(dat.rad) do
    local res = m:rotx(ax)
    local ref = dat.rotx[i]
    assertEquals( res:t()*res, m:same():eye() )
    assertTrue  ( res:eq( ref, eps ) )
  end
end

function TestCMatrixRot:testRoty()
  local m = matrix(3)
  for i,ay in ipairs(dat.rad) do
    local res = m:roty(ay)
    local ref = dat.roty[i]
    assertEquals( res:t()*res, m:same():eye() )
    assertTrue  ( res:eq( ref, eps ) )
  end
end

function TestCMatrixRot:testRotz()
  local m = matrix(3)
  for i,az in ipairs(dat.rad) do
    local res = m:rotz(az)
    local ref = dat.rotz[i]
    assertEquals( res:t()*res, m:same():eye() )
    assertTrue  ( res:eq( ref, eps ) )
  end
end

function TestCMatrixRot:testRotxy()
  local m = matrix(3)
  for i,ax in ipairs(dat.rad) do
    for ii,ay in ipairs(dat.rad) do
      local res = m:same():rotxy(ax,ay)
      local ref = m:same():roty(ay)*m:same():rotx(ax)
      assertTrue( res:eq( ref, eps ) )
    end
  end
end

function TestCMatrixRot:testRotxz()
  local m = matrix(3)
  for i,ax in ipairs(dat.rad) do
    for ii,az in ipairs(dat.rad) do
      local res = m:same():rotxz(ax,az)
      local ref = m:same():rotz(az)*m:same():rotx(ax)
      assertTrue( res:eq( ref, eps ) )
    end
  end
end

function TestCMatrixRot:testRotyz()
  local m = matrix(3)
  for i,ay in ipairs(dat.rad) do
    for ii,az in ipairs(dat.rad) do
      local res = m:same():rotyz(ay,az)
      local ref = m:same():rotz(az)*m:same():roty(ay)
      assertTrue( res:eq( ref, eps ) )
    end
  end
end

function TestCMatrixRot:testRotyx()
  local m = matrix(3)
  for i,ay in ipairs(dat.rad) do
    for ii,ax in ipairs(dat.rad) do
      local res = m:same():rotyx(ay,ax)
      local ref = m:same():rotx(ax)*m:same():roty(ay)
      assertTrue( res:eq( ref, eps ) )
    end
  end
end

function TestCMatrixRot:testRotzx()
  local m = matrix(3)
  for i,az in ipairs(dat.rad) do
    for ii,ax in ipairs(dat.rad) do
      local res = m:same():rotzx(az,ax)
      local ref = m:same():rotx(ax)*m:same():rotz(az)
      assertTrue( res:eq( ref, eps ) )
    end
  end
end

function TestCMatrixRot:testRotzy()
  local m = matrix(3)
  for i,az in ipairs(dat.rad) do
    for ii,ay in ipairs(dat.rad) do
      local res = m:same():rotzy(az,ay)
      local ref = m:same():roty(ay)*m:same():rotz(az)
      assertTrue( res:eq( ref, eps ) )
    end
  end
end

function TestCMatrixRot:testRotxyz()
  local m = matrix(3)
  for i,ax in ipairs(dat.rad) do
    for ii,ay in ipairs(dat.rad) do
      for iii,az in ipairs(dat.rad) do
        local res = m:same():rotxyz(ax,ay,az)
        local ref = m:same():rotz(az)*m:same():roty(ay)*m:same():rotx(ax)
        assertTrue( res:eq( ref, eps ) )
      end
    end
  end
end

function TestCMatrixRot:testRotzyx()
  local m = matrix(3)
  for i,ax in ipairs(dat.rad) do
    for ii,ay in ipairs(dat.rad) do
      for iii,az in ipairs(dat.rad) do
        local res = m:same():rotzyx(ax,ay,az)
        local ref = m:same():rotx(ax)*m:same():roty(ay)*m:same():rotz(az)
        assertTrue( res:eq( ref, eps ) )
      end
    end
  end
end

function TestCMatrixRot:testRotpitch()
  local m = matrix(3)
  for i,ax in ipairs(dat.rad) do
    local res = m:rotpitch(-ax)
    local ref = dat.rotx[i]
    assertEquals( res:t()*res, m:same():eye() )
    assertTrue  ( res:eq( ref, eps ) )
  end
end

function TestCMatrixRot:testRotyaw()
  local m = matrix(3)
  for i,ay in ipairs(dat.rad) do
    local res = m:rotyaw(-ay)
    local ref = dat.roty[i]
    assertEquals( res:t()*res, m:same():eye() )
    assertTrue  ( res:eq( ref, eps ) )
  end
end

function TestCMatrixRot:testRotroll()
  local m = matrix(3)
  for i,az in ipairs(dat.rad) do
    local res = m:rotroll(-az)
    local ref = dat.rotz[i]
    assertEquals( res:t()*res, m:same():eye() )
    assertTrue  ( res:eq( ref, eps ) )
  end
end

function TestCMatrixRot:testRotmad()
  local m = matrix(3)
  for i,th in ipairs(dat.rad) do
    for ii,phi in ipairs(dat.rad) do
      for iii,psi in ipairs(dat.rad) do
        local res = m:same():rotmad(th,phi,psi)
        local ref = m:same():roty(th)*m:same():rotx(-phi)*m:same():rotz(psi)
        assertTrue( res:eq( ref, eps ) )
      end
    end
  end
end

function TestCMatrixRot:testTorotmad()
  local m = matrix(3)
  for i,th in ipairs(dat.rad) do
    for ii,phi in ipairs(dat.rad) do
      for iii,psi in ipairs(dat.rad) do
        local a1, a2, a3 = m:same():rotmad(th,phi,psi):torotmad(th/2,phi/2,psi/2)
        if phi == pi then
          assertAlmostEquals( a1 - th ,-pi, eps )
          assertAlmostEquals( a2 - phi,-pi, eps )
          assertAlmostEquals( a3 - psi,-pi, eps )
        else
          assertAlmostEquals( a1 - th , 0 , eps )
          assertAlmostEquals( a2 - phi, 0 , eps )
          assertAlmostEquals( a3 - psi, 0 , eps )
        end
      end
    end
  end
end

function TestCMatrixErr:testRotv()
  local msg = {
    "invalid argument #2 (iterable expected)"         ,
    "invalid argument #1 (3D squared matrix expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'rotv', matrix(3)  , pi          )
  assertErrorMsgContains( msg[2], mth, 'rotv', matrix(2,3), {1,0,0}, pi )
end

function TestCMatrixRot:testRotv()
  local v, m = vector{0,0,1}:unit(), matrix(3)
  for _,a in ipairs(dat.rad) do
    for _,a1 in ipairs(dat.rad) do
      for _,a2 in ipairs(dat.rad) do
        local m1  = m:same():rotz( a1 )
        local m2  = m:same():roty( a2 )
        local m3  = m:same():rotz( a  )
        local v1  = m1 * m2 * v
        local res = m:same():rotv(v1,a)
        local ref = m1 * m2 * m3 * ( m1 * m2 ):t()
        assertTrue( res:eq( ref, eps ) )
      end
    end
  end
end

function TestCMatrixErr:testTorotv() -- TODO after fix
  local msg = {
    "invalid argument #2 (iterable expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'torotv', matrix(3), 1  )
end

function TestCMatrixRot:testTorotv()
  local fmt = MAD.option.format
  MAD.option.format = "%.5e"
  MAD.export('tostring', true)
  --print()
  --print('a/pi', '', 'a1/pi', '', 'a2/pi', '', '|res|', '', '|v1|', '', 'res-v1')
  local v, m = vector{0,0,1}:unit(), matrix(3)
  for _,a in ipairs(dat.rad) do
    for _,a1 in ipairs(dat.rad) do
      for _,a2 in ipairs(dat.rad) do
        local m1  = m:same():rotz( a1 )
        local m2  = m:same():roty( a2 )
        local v1  = m1 * m2 * v
        local res, ares = m:same():rotv(v1,a):torotv()
        assertAlmostEquals( ares - a, 0, eps )
        --print( a/pi, a1/pi, a2/pi,
        --       res[1]-v1:geti(1), res[2]-v1:geti(2), res[3]-v1:geti(3))
          --assertAlmostEquals( res[j] - v1:geti(j), 0, eps )
      end
    end
  end
  MAD.option.format = fmt
end

function TestCMatrixErr:testRotq()
local msg = {
    "invalid argument #2 (iterable expected)"         ,
    "invalid argument #1 (3D squared matrix expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'rotq', matrix(3)  , pi        )
  assertErrorMsgContains( msg[2], mth, 'rotq', matrix(2,3), {1,0,0,0} )
end

function TestCMatrixRot:testRotq()
  local v, m = vector{0,0,1}:unit(), matrix(3)
  for _,a in ipairs(dat.rad) do
    for _,a1 in ipairs(dat.rad) do
      for _,a2 in ipairs(dat.rad) do
        local m1  = m:same():rotz( a1 )
        local m2  = m:same():roty( a2 )
        local m3  = m:same():rotz( a  )
        local v1  = m1 * m2 * v
        local ref = m:same():rotv(v1,a)
        local q   = {cos(a/2), v1[1]*sin(a/2), v1[2]*sin(a/2), v1[3]*sin(a/2) }
        local res = m:same():rotq(q)
        assertTrue( res:eq( ref, 2*eps ) )
      end
    end
  end
end

function TestCMatrixRot:testTorotq() -- TODO
  local v, m = vector{0,0,1}:unit(), matrix(3)
  for _,a in ipairs(dat.rad) do
    for _,a1 in ipairs(dat.rad) do
      for _,a2 in ipairs(dat.rad) do
        local m1  = m:same():rotz( a1 )
        local m2  = m:same():roty( a2 )
        local v1  = m1 * m2 * v
        local q   = {cos(a/2), v1[1]*sin(a/2), v1[2]*sin(a/2), v1[3]*sin(a/2) }
        local res = (m:same():rotq(q)):torotq()
        --print(q  )
        --print(res,"\n --")
        assertAlmostEquals( res[1] - q[1], 0, eps)
      end
    end
  end
end

-- concatenation, conversion --------------------------------------------------o

function TestCMatrixErr:testConcat()
  local msg = {
    "invalid argument #1 (matrix expected)"                     ,
    "invalid argument #2 (matrix expected)"                     ,
    "incompatible matrix sizes"                                 ,
    "invalid argument #3 (string 'vec', row' or 'col' expected)",
    "incompatible matrix sizes"                                 ,
  }
  assertErrorMsgContains( msg[2], mth, 'concat', errCMat     , ''                            )
  assertErrorMsgContains( msg[2], mth, 'concat', errCMat     , nil                           )
  assertErrorMsgContains( msg[2], mth, 'concat', errCMat     , 1..4                          )
  assertErrorMsgContains( msg[3], mth, 'concat', errCMat     , matrix(1)                     )
  assertErrorMsgContains( msg[3], mth, 'concat', matrix(3)  , errCMat                        )
  assertErrorMsgContains( msg[4], mth, 'concat', errCMat     , errCMat     , ''               )
  assertErrorMsgContains( msg[4], mth, 'concat', errCMat     , errCMat     , 1                )
  assertErrorMsgContains( msg[5], mth, 'concat', matrix(1,2), matrix(3,2), 'row'            )
  assertErrorMsgContains( msg[5], mth, 'concat', matrix(2,3), matrix(2,2), 'col'            )
  assertErrorMsgContains( msg[5], mth, 'concat', errCMat     , errCMat     , 'col', matrix(3) )
end

function TestCMatrix:testConcat()
  for _,m in ipairs(G.cmatidx) do
    local mn, nr, nc, _ = m:size(), m:sizes()
    local mref1 = m:same(_,2*nr,nc):setsub(1..nr, 1..nc, 1..mn):setsub(1+nr..2*nr, 1   ..  nc, 1..mn)
    local mref2 = m:same(_,nr,2*nc):setsub(1..nr, 1..nc, 1..mn):setsub(1   ..  nr, 1+nc..2*nc, 1..mn)
    local mref3 = m:same(_,2*mn,1):setsub( 1..mn, 1    , 1..mn):setsub(1+mn..2*mn, 1         , 1..mn)
    assertEquals( m:concat( m       ), mref1 )
    assertEquals( m:concat( m, 'col'), mref1 )
    assertEquals( m:concat( m, 'row'), mref2 )
    assertEquals( m:concat( m, 'vec'), mref3 )
  end
end

function TestCMatrixConv:testTosting()
  local m = matrix(2)
  assertTrue( is_string(tostring(m      )) )
  assertTrue( is_string(tostring(m, ''  )) )
  assertTrue( is_string(tostring(m, "\n")) )
  for i,m in ipairs(G.cmatidx) do
    local c, nr, nc = {}, m:sizes()
    local ref1 = {} for i=1,nr do for j=1,nc do c[j]=tostring(idx(i,j,nc)) end ref1[i]=table.concat(c, ' ' ) end
    local ref2 = {} for i=1,nr do for j=1,nc do c[j]=tostring(idx(i,j,nc)) end ref2[i]=table.concat(c      ) end
    local ref3 = {} for i=1,nr do for j=1,nc do c[j]=tostring(idx(i,j,nc)) end ref3[i]=table.concat(c, "\n") end
    assertEquals( tostring(m      ), table.concat(ref1, '\n') )
    assertEquals( tostring(m, ''  ), table.concat(ref2, '\n') )
    assertEquals( tostring(m, '\n'), table.concat(ref3, '\n') )
  end
end

function TestCMatrixErr:testTotable()
  local msg = {
    "invalid argument #2 (table expected)"          ,
    "invalid argument #2 (table of tables expected)",
  }
  assertErrorMsgContains( msg[1], totable, errCMat, ''     )
  assertErrorMsgContains( msg[1], totable, errCMat, 1      )
  assertErrorMsgContains( msg[1], totable, errCMat, true   )
  assertErrorMsgContains( msg[1], totable, errCMat, 1..2   )
  assertErrorMsgContains( msg[1], totable, errCMat, errCMat )
  assertErrorMsgContains( msg[2], totable, errCMat, {{},5} )
end

function TestCMatrixConv:testTotable()
  for i,m in ipairs(G.cmatidx) do
    local nr, nc = m:sizes()
    local tref   = totable(m)
    if nc ~=1 then for i=1,nr do for j=1,nc do assertEquals( tref[i][j], idx(i,j,nc) ) end end
              else for i=1,nr do               assertEquals( tref[i]   , idx(i,1,nc) )     end end
    assertTrue  ( is_table(totable(m))    )
    assertEquals( matrix  (totable(m)), m )
  end
end

TestCMatrixZ = {}

function TestCMatrixZ:testGMatixCheck()
  for i,m in ipairs(G.cmatidx) do
    local mn = m:size()
    assertEquals( G.size[i], {m:sizes()}           )
    assertEquals( m        ,  m:same():fill(1..mn) )
  end
  for i,m in ipairs(G.cmattmp) do
    assertEquals( G.size[i], {m:sizes()} )
    assertEquals( m        ,  m:same()   )
  end
end

-- performance test suite -----------------------------------------------------o

Test_Matrix = {}

-- end ------------------------------------------------------------------------o
]]

